
F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b5c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f7c  08006f7c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f7c  08006f7c  00007f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f84  08006f84  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f84  08006f84  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f88  08006f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006f8c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000006c  08006ff8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08006ff8  000083c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013764  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002772  00000000  00000000  0001b7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4e  00000000  00000000  0001f060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f3b  00000000  00000000  0001fdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001613a  00000000  00000000  00023ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb6e  00000000  00000000  00039e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00138991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa4  00000000  00000000  00138a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0013d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08006d44 	.word	0x08006d44

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08006d44 	.word	0x08006d44

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HM01B0_WriteRegister>:
//============================================================================================
//Using HAL I2C Memory Write & Read function


void HM01B0_WriteRegister(uint16_t addr, uint8_t val)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af04      	add	r7, sp, #16
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	80fb      	strh	r3, [r7, #6]
 80005dc:	4613      	mov	r3, r2
 80005de:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef I2Cstatus;
    I2Cstatus = HAL_I2C_Mem_Write(&hi2c2, HIMAX_I2C_ADDR, addr, 2, &val, sizeof(val), 500);
 80005e0:	88fa      	ldrh	r2, [r7, #6]
 80005e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	1d7b      	adds	r3, r7, #5
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2302      	movs	r3, #2
 80005f2:	2148      	movs	r1, #72	@ 0x48
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <HM01B0_WriteRegister+0x50>)
 80005f6:	f001 fd9f 	bl	8002138 <HAL_I2C_Mem_Write>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]

    if(I2Cstatus != HAL_OK)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <HM01B0_WriteRegister+0x42>
    {
    	printf("\r\nI2C write failed at address 0x%04x with error 0x%02x\r\n", addr, I2Cstatus);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	7bfa      	ldrb	r2, [r7, #15]
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	@ (8000624 <HM01B0_WriteRegister+0x54>)
 800060c:	f005 fcce 	bl	8005fac <iprintf>
    else
	{
	printf("\r\nI2C Write -  HAL_OK \r\n");
	}

}
 8000610:	e002      	b.n	8000618 <HM01B0_WriteRegister+0x48>
	printf("\r\nI2C Write -  HAL_OK \r\n");
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <HM01B0_WriteRegister+0x58>)
 8000614:	f005 fd32 	bl	800607c <puts>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000088 	.word	0x20000088
 8000624:	08006d5c 	.word	0x08006d5c
 8000628:	08006d98 	.word	0x08006d98

0800062c <HM01B0_ReadRegister>:


uint8_t HM01B0_ReadRegister(uint16_t addr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af04      	add	r7, sp, #16
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef I2Cstatus;
	uint8_t ReceiveBuffer[1];

    I2Cstatus = HAL_I2C_Mem_Read(&hi2c2, HIMAX_I2C_ADDR, addr, 2, ReceiveBuffer, 1, 500); // ReceiveBuffer = &ReceiveBuffer[0]
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800063c:	9302      	str	r3, [sp, #8]
 800063e:	2301      	movs	r3, #1
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2302      	movs	r3, #2
 800064a:	2148      	movs	r1, #72	@ 0x48
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <HM01B0_ReadRegister+0x50>)
 800064e:	f001 fe87 	bl	8002360 <HAL_I2C_Mem_Read>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]

    if(I2Cstatus != HAL_OK)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <HM01B0_ReadRegister+0x3e>
    {
    	printf("\r\nI2C read failed at address 0x%04x with error 0x%02x\r\n", addr, I2Cstatus);
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	7bfa      	ldrb	r2, [r7, #15]
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <HM01B0_ReadRegister+0x54>)
 8000664:	f005 fca2 	bl	8005fac <iprintf>
 8000668:	e002      	b.n	8000670 <HM01B0_ReadRegister+0x44>
    }
    else
    	{
    	printf("\r\nI2C read - HAL_OK \r\n");
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <HM01B0_ReadRegister+0x58>)
 800066c:	f005 fd06 	bl	800607c <puts>
    	}

	return ReceiveBuffer[0];
 8000670:	7b3b      	ldrb	r3, [r7, #12]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000088 	.word	0x20000088
 8000680:	08006db0 	.word	0x08006db0
 8000684:	08006de8 	.word	0x08006de8

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068e:	f000 fa55 	bl	8000b3c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fd8c 	bl	80011ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f871 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f9b9 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f000 f991 	bl	80009c4 <MX_DMA_Init>
  MX_I2C2_Init();
 80006a2:	f000 f8c7 	bl	8000834 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006a6:	f000 f905 	bl	80008b4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80006aa:	f000 f95b 	bl	8000964 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t write_3 = 0x03;
  uint8_t count = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("\033[2J\033[H");
 80006b2:	482b      	ldr	r0, [pc, #172]	@ (8000760 <main+0xd8>)
 80006b4:	f005 fc7a 	bl	8005fac <iprintf>
  HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006bc:	f000 fdd4 	bl	8001268 <HAL_Delay>
  while (count<1)
 80006c0:	e046      	b.n	8000750 <main+0xc8>
  {
	  printf("\r\n======================================================\r\n");
 80006c2:	4828      	ldr	r0, [pc, #160]	@ (8000764 <main+0xdc>)
 80006c4:	f005 fcda 	bl	800607c <puts>

	  //Writing TEST
	  HM01B0_WriteRegister(reg_address,0x03);
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <main+0xe0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2103      	movs	r1, #3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff7e 	bl	80005d0 <HM01B0_WriteRegister>
	  HAL_Delay(100);
 80006d4:	2064      	movs	r0, #100	@ 0x64
 80006d6:	f000 fdc7 	bl	8001268 <HAL_Delay>
	  //READING TEST
	  uint8_t reg_value = HM01B0_ReadRegister(reg_address);
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <main+0xe0>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa4 	bl	800062c <HM01B0_ReadRegister>
 80006e4:	4603      	mov	r3, r0
 80006e6:	71bb      	strb	r3, [r7, #6]
	  printf("\r\nThe reg_address = 0x%04x , and value = 0x%02x ",reg_address,reg_value);
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <main+0xe0>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	461a      	mov	r2, r3
 80006f2:	481e      	ldr	r0, [pc, #120]	@ (800076c <main+0xe4>)
 80006f4:	f005 fc5a 	bl	8005fac <iprintf>
	  HAL_Delay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fc:	f000 fdb4 	bl	8001268 <HAL_Delay>

	  //Writing then reading I2C_clear
	  HM01B0_WriteRegister(I2C_CLEAR,0x01);
 8000700:	2101      	movs	r1, #1
 8000702:	f242 1053 	movw	r0, #8531	@ 0x2153
 8000706:	f7ff ff63 	bl	80005d0 <HM01B0_WriteRegister>
	  printf("\r\nI2C_Clear is written");
 800070a:	4819      	ldr	r0, [pc, #100]	@ (8000770 <main+0xe8>)
 800070c:	f005 fc4e 	bl	8005fac <iprintf>
	  HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 fda9 	bl	8001268 <HAL_Delay>

	  reg_value = HM01B0_ReadRegister(reg_address);
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <main+0xe0>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff86 	bl	800062c <HM01B0_ReadRegister>
 8000720:	4603      	mov	r3, r0
 8000722:	71bb      	strb	r3, [r7, #6]
	  printf("\r\nThe reg_address = 0x%04x , and value = 0x%02x ",reg_address,reg_value);
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <main+0xe0>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	461a      	mov	r2, r3
 800072e:	480f      	ldr	r0, [pc, #60]	@ (800076c <main+0xe4>)
 8000730:	f005 fc3c 	bl	8005fac <iprintf>
	  HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f000 fd96 	bl	8001268 <HAL_Delay>

	  printf("\r\nCount is %d",count++);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	71fa      	strb	r2, [r7, #7]
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	@ (8000774 <main+0xec>)
 8000746:	f005 fc31 	bl	8005fac <iprintf>
	  printf("\r\n\n");
 800074a:	480b      	ldr	r0, [pc, #44]	@ (8000778 <main+0xf0>)
 800074c:	f005 fc96 	bl	800607c <puts>
  while (count<1)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0b5      	beq.n	80006c2 <main+0x3a>
 8000756:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08006e84 	.word	0x08006e84
 8000764:	08006e8c 	.word	0x08006e8c
 8000768:	20000000 	.word	0x20000000
 800076c:	08006ec8 	.word	0x08006ec8
 8000770:	08006efc 	.word	0x08006efc
 8000774:	08006f14 	.word	0x08006f14
 8000778:	08006f24 	.word	0x08006f24

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2234      	movs	r2, #52	@ 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fd56 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xb0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xb0>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemClock_Config+0xb0>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <SystemClock_Config+0xb4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <SystemClock_Config+0xb4>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <SystemClock_Config+0xb4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 f805 	bl	80037f8 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f9ce 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fa9e 	bl	8003d54 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800081e:	f000 f9b9 	bl	8000b94 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_I2C2_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <MX_I2C2_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A; // 400 KHZ
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_I2C2_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000870:	f001 fbc6 	bl	8002000 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f98b 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000882:	f002 ff21 	bl	80036c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f982 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_I2C2_Init+0x74>)
 8000894:	f002 ff63 	bl	800375e <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f979 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000088 	.word	0x20000088
 80008ac:	40005800 	.word	0x40005800
 80008b0:	0010061a 	.word	0x0010061a

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_TIM2_Init+0xac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008fe:	4818      	ldr	r0, [pc, #96]	@ (8000960 <MX_TIM2_Init+0xac>)
 8000900:	f004 f836 	bl	8004970 <HAL_TIM_PWM_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 f943 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4810      	ldr	r0, [pc, #64]	@ (8000960 <MX_TIM2_Init+0xac>)
 800091e:	f004 fc9d 	bl	800525c <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000928:	f000 f934 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092c:	2360      	movs	r3, #96	@ 0x60
 800092e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	220c      	movs	r2, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <MX_TIM2_Init+0xac>)
 8000944:	f004 f86c 	bl	8004a20 <HAL_TIM_PWM_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800094e:	f000 f921 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <MX_TIM2_Init+0xac>)
 8000954:	f000 fa46 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000019c 	.word	0x2000019c

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	@ (80009c0 <MX_USART3_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_USART3_UART_Init+0x58>)
 80009a8:	f004 fce6 	bl	8005378 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f8ef 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001e8 	.word	0x200001e8
 80009c0:	40004800 	.word	0x40004800

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_DMA_Init+0x48>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <MX_DMA_Init+0x48>)
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_DMA_Init+0x48>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200d      	movs	r0, #13
 80009e8:	f000 fd3d 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009ec:	200d      	movs	r0, #13
 80009ee:	f000 fd56 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 fd35 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009fc:	200f      	movs	r0, #15
 80009fe:	f000 fd4e 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a26:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b3e      	ldr	r3, [pc, #248]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a3a      	ldr	r2, [pc, #232]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b38      	ldr	r3, [pc, #224]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b35      	ldr	r3, [pc, #212]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a34      	ldr	r2, [pc, #208]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a2e      	ldr	r2, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a8c:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <MX_GPIO_Init+0x120>)
 8000a8e:	f001 fa5f 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Green_Pin LD3_Red_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin;
 8000a92:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4821      	ldr	r0, [pc, #132]	@ (8000b30 <MX_GPIO_Init+0x120>)
 8000aac:	f001 f8a4 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_GPIO_Init+0x124>)
 8000ac4:	f001 f898 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCLK_Pin */
  GPIO_InitStruct.Pin = PCLK_Pin;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCLK_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <MX_GPIO_Init+0x124>)
 8000adc:	f001 f88c 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VSync_Pin */
  GPIO_InitStruct.Pin = VSync_Pin;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VSync_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <MX_GPIO_Init+0x128>)
 8000af6:	f001 f87f 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8000afa:	23f0      	movs	r3, #240	@ 0xf0
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <MX_GPIO_Init+0x128>)
 8000b0e:	f001 f873 	bl	8001bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2008      	movs	r0, #8
 8000b18:	f000 fca5 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b1c:	2008      	movs	r0, #8
 8000b1e:	f000 fcbe 	bl	800149e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b4e:	f000 fcc1 	bl	80014d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b5e:	231f      	movs	r3, #31
 8000b60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b62:	2387      	movs	r3, #135	@ 0x87
 8000b64:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fcdf 	bl	8001544 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b86:	2004      	movs	r0, #4
 8000b88:	f000 fcbc 	bl	8001504 <HAL_MPU_Enable>

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(1000); // Delay for 1 second
 8000b9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba0:	f000 fb62 	bl	8001268 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000ba4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <Error_Handler+0x20>)
 8000baa:	f001 f9ea 	bl	8001f82 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); // Delay for 1 second
 8000bae:	bf00      	nop
 8000bb0:	e7f4      	b.n	8000b9c <Error_Handler+0x8>
 8000bb2:	bf00      	nop
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0ae      	sub	sp, #184	@ 0xb8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2290      	movs	r2, #144	@ 0x90
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f005 fb0b 	bl	800623c <memset>
  if(hi2c->Instance==I2C2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a58      	ldr	r2, [pc, #352]	@ (8000d8c <HAL_I2C_MspInit+0x18c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	f040 80a8 	bne.w	8000d82 <HAL_I2C_MspInit+0x182>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fa6d 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000c4c:	f7ff ffa2 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c50:	4b4f      	ldr	r3, [pc, #316]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	4a4e      	ldr	r2, [pc, #312]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000c56:	f043 0320 	orr.w	r3, r3, #32
 8000c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c80:	2304      	movs	r3, #4
 8000c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c86:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4841      	ldr	r0, [pc, #260]	@ (8000d94 <HAL_I2C_MspInit+0x194>)
 8000c8e:	f000 ffb3 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c92:	4b3f      	ldr	r3, [pc, #252]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a3e      	ldr	r2, [pc, #248]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d90 <HAL_I2C_MspInit+0x190>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8000caa:	4b3b      	ldr	r3, [pc, #236]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cac:	4a3b      	ldr	r2, [pc, #236]	@ (8000d9c <HAL_I2C_MspInit+0x19c>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 8000cb0:	4b39      	ldr	r3, [pc, #228]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cb6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cba:	2240      	movs	r2, #64	@ 0x40
 8000cbc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc4:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ccc:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000cea:	482b      	ldr	r0, [pc, #172]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cec:	f000 fc6a 	bl	80015c4 <HAL_DMA_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000cf6:	f7ff ff4d 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a26      	ldr	r2, [pc, #152]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000cfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d00:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <HAL_I2C_MspInit+0x198>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d08:	4a26      	ldr	r2, [pc, #152]	@ (8000da4 <HAL_I2C_MspInit+0x1a4>)
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d0e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d12:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000d46:	4816      	ldr	r0, [pc, #88]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d48:	f000 fc3c 	bl	80015c4 <HAL_DMA_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 8000d52:	f7ff ff1f 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a11      	ldr	r2, [pc, #68]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d5c:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_I2C_MspInit+0x1a0>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2021      	movs	r0, #33	@ 0x21
 8000d68:	f000 fb7d 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d6c:	2021      	movs	r0, #33	@ 0x21
 8000d6e:	f000 fb96 	bl	800149e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2022      	movs	r0, #34	@ 0x22
 8000d78:	f000 fb75 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d7c:	2022      	movs	r0, #34	@ 0x22
 8000d7e:	f000 fb8e 	bl	800149e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d82:	bf00      	nop
 8000d84:	37b8      	adds	r7, #184	@ 0xb8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40005800 	.word	0x40005800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40021400 	.word	0x40021400
 8000d98:	200000dc 	.word	0x200000dc
 8000d9c:	40026070 	.word	0x40026070
 8000da0:	2000013c 	.word	0x2000013c
 8000da4:	40026040 	.word	0x40026040

08000da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x38>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x38>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x38>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e04:	d11c      	bne.n	8000e40 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <HAL_TIM_MspPostInit+0x64>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <HAL_TIM_MspPostInit+0x64>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HAL_TIM_MspPostInit+0x64>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCLK_Pin;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <HAL_TIM_MspPostInit+0x68>)
 8000e3c:	f000 fedc 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ae      	sub	sp, #184	@ 0xb8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2290      	movs	r2, #144	@ 0x90
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f005 f9e3 	bl	800623c <memset>
  if(huart->Instance==USART3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	@ (8000f04 <HAL_UART_MspInit+0xb4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d13c      	bne.n	8000efa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f946 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e9a:	f7ff fe7b 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a13      	ldr	r2, [pc, #76]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ece:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <HAL_UART_MspInit+0xbc>)
 8000ef6:	f000 fe7f 	bl	8001bf8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000efa:	bf00      	nop
 8000efc:	37b8      	adds	r7, #184	@ 0xb8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004800 	.word	0x40004800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <NMI_Handler+0x4>

08000f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f95f 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VSync_Pin);
 8000f72:	2004      	movs	r0, #4
 8000f74:	f001 f820 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <DMA1_Stream2_IRQHandler+0x10>)
 8000f82:	f000 fbef 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000013c 	.word	0x2000013c

08000f90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA1_Stream4_IRQHandler+0x10>)
 8000f96:	f000 fbe5 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000dc 	.word	0x200000dc

08000fa4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <I2C2_EV_IRQHandler+0x10>)
 8000faa:	f001 faf3 	bl	8002594 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000088 	.word	0x20000088

08000fb8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <I2C2_ER_IRQHandler+0x10>)
 8000fbe:	f001 fb03 	bl	80025c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000088 	.word	0x20000088

08000fcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e00a      	b.n	8000ff4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fde:	f3af 8000 	nop.w
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf0      	blt.n	8000fde <_read+0x12>
  }

  return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e009      	b.n	800102c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f841 	bl	80010a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf1      	blt.n	8001018 <_write+0x12>
  }
  return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_close>:

int _close(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001066:	605a      	str	r2, [r3, #4]
  return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_isatty>:

int _isatty(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <__io_putchar>:
  return -1;
}

//////////////////////////////////////////////////////////////////////////////////////////////
int __io_putchar(int ch)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // Use &huart2 if using USART2
 80010b0:	1d39      	adds	r1, r7, #4
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	2201      	movs	r2, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <__io_putchar+0x20>)
 80010ba:	f004 f9ab 	bl	8005414 <HAL_UART_Transmit>
    return ch;
 80010be:	687b      	ldr	r3, [r7, #4]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001e8 	.word	0x200001e8

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f005 f8ec 	bl	80062d8 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20080000 	.word	0x20080000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000270 	.word	0x20000270
 8001134:	200003c8 	.word	0x200003c8

08001138 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800118a:	f005 f8ab 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fa7b 	bl	8000688 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011a0:	08006f8c 	.word	0x08006f8c
  ldr r2, =_sbss
 80011a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011a8:	200003c4 	.word	0x200003c4

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>

080011ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f94c 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b8:	200f      	movs	r0, #15
 80011ba:	f000 f805 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011be:	f7ff fcfb 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f967 	bl	80014ba <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f92f 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000004 	.word	0x20000004
 8001220:	2000000c 	.word	0x2000000c
 8001224:	20000008 	.word	0x20000008

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000274 	.word	0x20000274

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000274 	.word	0x20000274

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	@ (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014d8:	f3bf 8f5f 	dmb	sy
}
 80014dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_MPU_Disable+0x28>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <HAL_MPU_Disable+0x28>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_MPU_Disable+0x2c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	e000ed90 	.word	0xe000ed90

08001504 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800150c:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_MPU_Enable+0x38>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_MPU_Enable+0x3c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_MPU_Enable+0x3c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001522:	f3bf 8f4f 	dsb	sy
}
 8001526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001528:	f3bf 8f6f 	isb	sy
}
 800152c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed90 	.word	0xe000ed90
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001552:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_MPU_ConfigRegion+0x7c>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001560:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7b1b      	ldrb	r3, [r3, #12]
 800156c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7adb      	ldrb	r3, [r3, #11]
 8001572:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7a9b      	ldrb	r3, [r3, #10]
 800157a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800157c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b5b      	ldrb	r3, [r3, #13]
 8001582:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7b9b      	ldrb	r3, [r3, #14]
 800158a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800158c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7bdb      	ldrb	r3, [r3, #15]
 8001592:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800159c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7a1b      	ldrb	r3, [r3, #8]
 80015a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b0:	6113      	str	r3, [r2, #16]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed90 	.word	0xe000ed90

080015c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fe3e 	bl	8001250 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e099      	b.n	8001714 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	e00f      	b.n	8001622 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001602:	f7ff fe25 	bl	8001250 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b05      	cmp	r3, #5
 800160e:	d908      	bls.n	8001622 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2220      	movs	r2, #32
 8001614:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e078      	b.n	8001714 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e8      	bne.n	8001602 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4b38      	ldr	r3, [pc, #224]	@ (800171c <HAL_DMA_Init+0x158>)
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	2b04      	cmp	r3, #4
 800167a:	d107      	bne.n	800168c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	4313      	orrs	r3, r2
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f023 0307 	bic.w	r3, r3, #7
 80016a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d117      	bne.n	80016e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fa19 	bl	8001b00 <DMA_CheckFifoParam>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2240      	movs	r2, #64	@ 0x40
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016e2:	2301      	movs	r3, #1
 80016e4:	e016      	b.n	8001714 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f9d0 	bl	8001a94 <DMA_CalcBaseAndBitshift>
 80016f4:	4603      	mov	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fc:	223f      	movs	r2, #63	@ 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	e010803f 	.word	0xe010803f

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001770:	4b8e      	ldr	r3, [pc, #568]	@ (80019ac <HAL_DMA_IRQHandler+0x248>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a8e      	ldr	r2, [pc, #568]	@ (80019b0 <HAL_DMA_IRQHandler+0x24c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808f 	beq.w	8001a04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8087 	beq.w	8001a04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	223f      	movs	r2, #63	@ 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07e      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e079      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01d      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d031      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02c      	b.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
 80019aa:	bf00      	nop
 80019ac:	20000004 	.word	0x20000004
 80019b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d023      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
 80019c4:	e01e      	b.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0210 	bic.w	r2, r2, #16
 80019e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d032      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d307      	bcc.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f2      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x2cc>
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
 8001a6e:	e000      	b.n	8001a72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a70:	bf00      	nop
    }
  }
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a86:	b2db      	uxtb	r3, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b10      	subs	r3, #16
 8001aa4:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <DMA_CalcBaseAndBitshift+0x60>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <DMA_CalcBaseAndBitshift+0x64>)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d908      	bls.n	8001ad4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <DMA_CalcBaseAndBitshift+0x68>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	1d1a      	adds	r2, r3, #4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ad2:	e006      	b.n	8001ae2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <DMA_CalcBaseAndBitshift+0x68>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	aaaaaaab 	.word	0xaaaaaaab
 8001af8:	08006f40 	.word	0x08006f40
 8001afc:	fffffc00 	.word	0xfffffc00

08001b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11f      	bne.n	8001b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d856      	bhi.n	8001bce <DMA_CheckFifoParam+0xce>
 8001b20:	a201      	add	r2, pc, #4	@ (adr r2, 8001b28 <DMA_CheckFifoParam+0x28>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b4b 	.word	0x08001b4b
 8001b30:	08001b39 	.word	0x08001b39
 8001b34:	08001bcf 	.word	0x08001bcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d046      	beq.n	8001bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b48:	e043      	b.n	8001bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b52:	d140      	bne.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b58:	e03d      	b.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b62:	d121      	bne.n	8001ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d837      	bhi.n	8001bda <DMA_CheckFifoParam+0xda>
 8001b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b70 <DMA_CheckFifoParam+0x70>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b87 	.word	0x08001b87
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001b99 	.word	0x08001b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      break;
 8001b84:	e030      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d025      	beq.n	8001bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b96:	e022      	b.n	8001bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ba0:	d11f      	bne.n	8001be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ba6:	e01c      	b.n	8001be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d903      	bls.n	8001bb6 <DMA_CheckFifoParam+0xb6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bb4:	e018      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bba:	e015      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      break;
 8001bcc:	e00b      	b.n	8001be6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e00a      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e008      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e006      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e004      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e002      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
    }
  } 
  
  return status; 
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e175      	b.n	8001f04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8164 	bne.w	8001efe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x56>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80be 	beq.w	8001efe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_GPIO_Init+0x324>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a65      	ldr	r2, [pc, #404]	@ (8001f1c <HAL_GPIO_Init+0x324>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b63      	ldr	r3, [pc, #396]	@ (8001f1c <HAL_GPIO_Init+0x324>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d9a:	4a61      	ldr	r2, [pc, #388]	@ (8001f20 <HAL_GPIO_Init+0x328>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	@ (8001f24 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d037      	beq.n	8001e36 <HAL_GPIO_Init+0x23e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_GPIO_Init+0x23a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a56      	ldr	r2, [pc, #344]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02b      	beq.n	8001e2e <HAL_GPIO_Init+0x236>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a55      	ldr	r2, [pc, #340]	@ (8001f30 <HAL_GPIO_Init+0x338>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x232>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a54      	ldr	r2, [pc, #336]	@ (8001f34 <HAL_GPIO_Init+0x33c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a53      	ldr	r2, [pc, #332]	@ (8001f38 <HAL_GPIO_Init+0x340>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x22a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	@ (8001f3c <HAL_GPIO_Init+0x344>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	@ (8001f40 <HAL_GPIO_Init+0x348>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	@ (8001f44 <HAL_GPIO_Init+0x34c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001e0e:	2309      	movs	r3, #9
 8001e10:	e012      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e12:	230a      	movs	r3, #10
 8001e14:	e010      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	@ (8001f20 <HAL_GPIO_Init+0x328>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a34      	ldr	r2, [pc, #208]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a29      	ldr	r2, [pc, #164]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <HAL_GPIO_Init+0x354>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae86 	bls.w	8001c18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40022400 	.word	0x40022400
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e08b      	b.n	800212a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fdea 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	@ 0x24
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e006      	b.n	8002088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d108      	bne.n	80020a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	e007      	b.n	80020b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <HAL_I2C_Init+0x134>)
 80020be:	430b      	orrs	r3, r1
 80020c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69d9      	ldr	r1, [r3, #28]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	02008000 	.word	0x02008000

08002138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 80f9 	bne.w	8002352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_I2C_Mem_Write+0x34>
 8002166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0ed      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Mem_Write+0x4e>
 8002182:	2302      	movs	r3, #2
 8002184:	e0e6      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218e:	f7ff f85f 	bl	8001250 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2319      	movs	r3, #25
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f001 f83e 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d1      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	@ 0x21
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d8:	88f8      	ldrh	r0, [r7, #6]
 80021da:	893a      	ldrh	r2, [r7, #8]
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fb81 	bl	80028f0 <I2C_RequestMemoryWrite>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0a9      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2bff      	cmp	r3, #255	@ 0xff
 8002208:	d90e      	bls.n	8002228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	@ 0xff
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	b2da      	uxtb	r2, r3
 8002216:	8979      	ldrh	r1, [r7, #10]
 8002218:	2300      	movs	r3, #0
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f001 f9c1 	bl	80035a8 <I2C_TransferConfig>
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 f9b0 	bl	80035a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f001 f841 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e07b      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d034      	beq.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d130      	bne.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 ffba 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e04d      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d90e      	bls.n	80022e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	@ 0xff
 80022c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	2300      	movs	r3, #0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f001 f965 	bl	80035a8 <I2C_TransferConfig>
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 f954 	bl	80035a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d19e      	bne.n	8002248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f001 f827 	bl	8003362 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e01a      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2220      	movs	r2, #32
 8002324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_I2C_Mem_Write+0x224>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fe00e800 	.word	0xfe00e800

08002360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80fd 	bne.w	8002582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_I2C_Mem_Read+0x34>
 800238e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0f1      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Mem_Read+0x4e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0ea      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b6:	f7fe ff4b 	bl	8001250 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 ff2a 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d5      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2222      	movs	r2, #34	@ 0x22
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002400:	88f8      	ldrh	r0, [r7, #6]
 8002402:	893a      	ldrh	r2, [r7, #8]
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4603      	mov	r3, r0
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fac1 	bl	8002998 <I2C_RequestMemoryRead>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0ad      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d90e      	bls.n	8002450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	4b52      	ldr	r3, [pc, #328]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f001 f8ad 	bl	80035a8 <I2C_TransferConfig>
 800244e:	e00f      	b.n	8002470 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f001 f89c 	bl	80035a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fed1 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07c      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d034      	beq.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fea2 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04d      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f001 f84d 	bl	80035a8 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 f83c 	bl	80035a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19a      	bne.n	8002470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 ff0f 	bl	8003362 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01a      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_I2C_Mem_Read+0x230>)
 8002562:	400b      	ands	r3, r1
 8002564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	80002400 	.word	0x80002400
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
  }
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00f      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002608:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00f      	beq.n	8002634 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f043 0208 	orr.w	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002632:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00f      	beq.n	800265e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264c:	f043 0202 	orr.w	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 030b 	and.w	r3, r3, #11
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800266e:	68f9      	ldr	r1, [r7, #12]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fc7d 	bl	8002f70 <I2C_ITError>
  }
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70fb      	strb	r3, [r7, #3]
 80026b2:	4613      	mov	r3, r2
 80026b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <I2C_Slave_ISR_IT+0x24>
 800271e:	2302      	movs	r3, #2
 8002720:	e0e2      	b.n	80028e8 <I2C_Slave_ISR_IT+0x1ea>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800273e:	6939      	ldr	r1, [r7, #16]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa5d 	bl	8002c00 <I2C_ITSlaveCplt>
 8002746:	e0ca      	b.n	80028de <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04b      	beq.n	80027ea <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002758:	2b00      	cmp	r3, #0
 800275a:	d046      	beq.n	80027ea <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d128      	bne.n	80027b8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b28      	cmp	r3, #40	@ 0x28
 8002770:	d108      	bne.n	8002784 <I2C_Slave_ISR_IT+0x86>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002778:	d104      	bne.n	8002784 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800277a:	6939      	ldr	r1, [r7, #16]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fba3 	bl	8002ec8 <I2C_ITListenCplt>
 8002782:	e031      	b.n	80027e8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b29      	cmp	r3, #41	@ 0x29
 800278e:	d10e      	bne.n	80027ae <I2C_Slave_ISR_IT+0xb0>
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002796:	d00a      	beq.n	80027ae <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fcfc 	bl	800319e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f9ce 	bl	8002b48 <I2C_ITSlaveSeqCplt>
 80027ac:	e01c      	b.n	80027e8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027b6:	e08f      	b.n	80028d8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <I2C_Slave_ISR_IT+0xdc>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d8:	d17e      	bne.n	80028d8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fbc5 	bl	8002f70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027e6:	e077      	b.n	80028d8 <I2C_Slave_ISR_IT+0x1da>
 80027e8:	e076      	b.n	80028d8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02f      	beq.n	8002854 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02a      	beq.n	8002854 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d018      	beq.n	800283a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d14b      	bne.n	80028dc <I2C_Slave_ISR_IT+0x1de>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800284a:	d047      	beq.n	80028dc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f97b 	bl	8002b48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002852:	e043      	b.n	80028dc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002868:	6939      	ldr	r1, [r7, #16]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f8e8 	bl	8002a40 <I2C_ITAddrCplt>
 8002870:	e035      	b.n	80028de <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d030      	beq.n	80028de <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02b      	beq.n	80028de <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d018      	beq.n	80028c2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028c0:	e00d      	b.n	80028de <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c8:	d002      	beq.n	80028d0 <I2C_Slave_ISR_IT+0x1d2>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f939 	bl	8002b48 <I2C_ITSlaveSeqCplt>
 80028d6:	e002      	b.n	80028de <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80028dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	460b      	mov	r3, r1
 8002904:	813b      	strh	r3, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	8979      	ldrh	r1, [r7, #10]
 8002910:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <I2C_RequestMemoryWrite+0xa4>)
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fe45 	bl	80035a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fcd6 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02c      	b.n	800298c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
 8002942:	e015      	b.n	8002970 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	69b9      	ldr	r1, [r7, #24]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fcbc 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e012      	b.n	800298c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fc51 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	80002000 	.word	0x80002000

08002998 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	460b      	mov	r3, r1
 80029ac:	813b      	strh	r3, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <I2C_RequestMemoryRead+0xa4>)
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2300      	movs	r3, #0
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fdf2 	bl	80035a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fc83 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e02c      	b.n	8002a32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80029e8:	e015      	b.n	8002a16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ea:	893b      	ldrh	r3, [r7, #8]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fc69 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e012      	b.n	8002a32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	@ 0x40
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fbfe 	bl	8003222 <I2C_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	80002000 	.word	0x80002000

08002a40 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a56:	2b28      	cmp	r3, #40	@ 0x28
 8002a58:	d16a      	bne.n	8002b30 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a78:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a86:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a94:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d138      	bne.n	8002b10 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	09db      	lsrs	r3, r3, #7
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	89bb      	ldrh	r3, [r7, #12]
 8002aa6:	4053      	eors	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f003 0306 	and.w	r3, r3, #6
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11c      	bne.n	8002aec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d13b      	bne.n	8002b40 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ade:	89ba      	ldrh	r2, [r7, #12]
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fdde 	bl	80026a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002aea:	e029      	b.n	8002b40 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fd89 	bl	800360c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b02:	89ba      	ldrh	r2, [r7, #12]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fdcc 	bl	80026a6 <HAL_I2C_AddrCallback>
}
 8002b0e:	e017      	b.n	8002b40 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fd79 	bl	800360c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b22:	89ba      	ldrh	r2, [r7, #12]
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fdbc 	bl	80026a6 <HAL_I2C_AddrCallback>
}
 8002b2e:	e007      	b.n	8002b40 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00c      	b.n	8002b96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b29      	cmp	r3, #41	@ 0x29
 8002ba0:	d112      	bne.n	8002bc8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2228      	movs	r2, #40	@ 0x28
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2221      	movs	r2, #33	@ 0x21
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fd2a 	bl	800360c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fd5c 	bl	800267e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bc6:	e017      	b.n	8002bf8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bd2:	d111      	bne.n	8002bf8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2222      	movs	r2, #34	@ 0x22
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002be2:	2102      	movs	r1, #2
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fd11 	bl	800360c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fd4d 	bl	8002692 <HAL_I2C_SlaveRxCpltCallback>
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c22:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
 8002c2e:	2b21      	cmp	r3, #33	@ 0x21
 8002c30:	d002      	beq.n	8002c38 <I2C_ITSlaveCplt+0x38>
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	2b29      	cmp	r3, #41	@ 0x29
 8002c36:	d108      	bne.n	8002c4a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c38:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fce5 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2221      	movs	r2, #33	@ 0x21
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c48:	e019      	b.n	8002c7e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	2b22      	cmp	r3, #34	@ 0x22
 8002c4e:	d002      	beq.n	8002c56 <I2C_ITSlaveCplt+0x56>
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c54:	d108      	bne.n	8002c68 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c56:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fcd6 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2222      	movs	r2, #34	@ 0x22
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c66:	e00a      	b.n	8002c7e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	2b28      	cmp	r3, #40	@ 0x28
 8002c6c:	d107      	bne.n	8002c7e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002c6e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fcca 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b89      	ldr	r3, [pc, #548]	@ (8002ec0 <I2C_ITSlaveCplt+0x2c0>)
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa7d 	bl	800319e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d013      	beq.n	8002cd6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cbc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01f      	beq.n	8002d06 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd4:	e017      	b.n	8002d06 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00c      	beq.n	8002d52 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d049      	beq.n	8002e06 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d044      	beq.n	8002e06 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d128      	bne.n	8002dd8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b28      	cmp	r3, #40	@ 0x28
 8002d90:	d108      	bne.n	8002da4 <I2C_ITSlaveCplt+0x1a4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d98:	d104      	bne.n	8002da4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f893 	bl	8002ec8 <I2C_ITListenCplt>
 8002da2:	e030      	b.n	8002e06 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b29      	cmp	r3, #41	@ 0x29
 8002dae:	d10e      	bne.n	8002dce <I2C_ITSlaveCplt+0x1ce>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002db6:	d00a      	beq.n	8002dce <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9ec 	bl	800319e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff febe 	bl	8002b48 <I2C_ITSlaveSeqCplt>
 8002dcc:	e01b      	b.n	8002e06 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	61da      	str	r2, [r3, #28]
 8002dd6:	e016      	b.n	8002e06 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <I2C_ITSlaveCplt+0x1fa>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df8:	d105      	bne.n	8002e06 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8b5 	bl	8002f70 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8a4 	bl	8002f70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b28      	cmp	r3, #40	@ 0x28
 8002e32:	d141      	bne.n	8002eb8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f846 	bl	8002ec8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e3c:	e03c      	b.n	8002eb8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e46:	d014      	beq.n	8002e72 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fe7d 	bl	8002b48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <I2C_ITSlaveCplt+0x2c4>)
 8002e52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fc29 	bl	80026c2 <HAL_I2C_ListenCpltCallback>
}
 8002e70:	e022      	b.n	8002eb8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b22      	cmp	r3, #34	@ 0x22
 8002e7c:	d10e      	bne.n	8002e9c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fbfc 	bl	8002692 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e9a:	e00d      	b.n	8002eb8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fbe3 	bl	800267e <HAL_I2C_SlaveTxCpltCallback>
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fe00e800 	.word	0xfe00e800
 8002ec4:	ffff0000 	.word	0xffff0000

08002ec8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	@ (8002f6c <I2C_ITListenCplt+0xa4>)
 8002ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d022      	beq.n	8002f44 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb5f 	bl	800360c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fbaf 	bl	80026c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	ffff0000 	.word	0xffff0000

08002f70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f80:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8003144 <I2C_ITError+0x1d4>)
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b28      	cmp	r3, #40	@ 0x28
 8002fa6:	d005      	beq.n	8002fb4 <I2C_ITError+0x44>
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b29      	cmp	r3, #41	@ 0x29
 8002fac:	d002      	beq.n	8002fb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fb2:	d10b      	bne.n	8002fcc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fb28 	bl	800360c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2228      	movs	r2, #40	@ 0x28
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a60      	ldr	r2, [pc, #384]	@ (8003148 <I2C_ITError+0x1d8>)
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fca:	e030      	b.n	800302e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fcc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fb1b 	bl	800360c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8e1 	bl	800319e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b60      	cmp	r3, #96	@ 0x60
 8002fe6:	d01f      	beq.n	8003028 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d114      	bne.n	8003028 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d109      	bne.n	8003020 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d039      	beq.n	80030b0 <I2C_ITError+0x140>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b11      	cmp	r3, #17
 8003040:	d002      	beq.n	8003048 <I2C_ITError+0xd8>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b21      	cmp	r3, #33	@ 0x21
 8003046:	d133      	bne.n	80030b0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003056:	d107      	bne.n	8003068 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003066:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fd03 	bl	8001a78 <HAL_DMA_GetState>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d017      	beq.n	80030a8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	4a33      	ldr	r2, [pc, #204]	@ (800314c <I2C_ITError+0x1dc>)
 800307e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fb47 	bl	8001720 <HAL_DMA_Abort_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04d      	beq.n	8003134 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030a2:	4610      	mov	r0, r2
 80030a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030a6:	e045      	b.n	8003134 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f851 	bl	8003150 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030ae:	e041      	b.n	8003134 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d039      	beq.n	800312c <I2C_ITError+0x1bc>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b12      	cmp	r3, #18
 80030bc:	d002      	beq.n	80030c4 <I2C_ITError+0x154>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b22      	cmp	r3, #34	@ 0x22
 80030c2:	d133      	bne.n	800312c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d2:	d107      	bne.n	80030e4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fcc5 	bl	8001a78 <HAL_DMA_GetState>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d017      	beq.n	8003124 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <I2C_ITError+0x1dc>)
 80030fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fb09 	bl	8001720 <HAL_DMA_Abort_IT>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d011      	beq.n	8003138 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800311e:	4610      	mov	r0, r2
 8003120:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003122:	e009      	b.n	8003138 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f813 	bl	8003150 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800312a:	e005      	b.n	8003138 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f80f 	bl	8003150 <I2C_TreatErrorCallback>
  }
}
 8003132:	e002      	b.n	800313a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003134:	bf00      	nop
 8003136:	e000      	b.n	800313a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003138:	bf00      	nop
}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	080026ff 	.word	0x080026ff
 800314c:	080031e7 	.word	0x080031e7

08003150 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b60      	cmp	r3, #96	@ 0x60
 8003162:	d10e      	bne.n	8003182 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fab5 	bl	80026ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003180:	e009      	b.n	8003196 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff faa0 	bl	80026d6 <HAL_I2C_ErrorCallback>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d103      	bne.n	80031bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d007      	beq.n	80031da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	619a      	str	r2, [r3, #24]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	2200      	movs	r2, #0
 8003202:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff ff9b 	bl	8003150 <I2C_TreatErrorCallback>
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003232:	e03b      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f8d5 	bl	80033e8 <I2C_IsErrorOccurred>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e041      	b.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d02d      	beq.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fd fffe 	bl	8001250 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d122      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d113      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e00f      	b.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4013      	ands	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d0b4      	beq.n	8003234 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e0:	e033      	b.n	800334a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f87e 	bl	80033e8 <I2C_IsErrorOccurred>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e031      	b.n	800335a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d025      	beq.n	800334a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fd ffa7 	bl	8001250 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d013      	beq.n	800334a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e007      	b.n	800335a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d1c4      	bne.n	80032e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800336e:	e02f      	b.n	80033d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f837 	bl	80033e8 <I2C_IsErrorOccurred>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e02d      	b.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003384:	f7fd ff64 	bl	8001250 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11a      	bne.n	80033d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d013      	beq.n	80033d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d1c8      	bne.n	8003370 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d068      	beq.n	80034e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2210      	movs	r2, #16
 800341a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800341c:	e049      	b.n	80034b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d045      	beq.n	80034b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fd ff13 	bl	8001250 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_IsErrorOccurred+0x54>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d13a      	bne.n	80034b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800344e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800345e:	d121      	bne.n	80034a4 <I2C_IsErrorOccurred+0xbc>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003466:	d01d      	beq.n	80034a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b20      	cmp	r3, #32
 800346c:	d01a      	beq.n	80034a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800347c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800347e:	f7fd fee7 	bl	8001250 <HAL_GetTick>
 8003482:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003484:	e00e      	b.n	80034a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003486:	f7fd fee3 	bl	8001250 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b19      	cmp	r3, #25
 8003492:	d907      	bls.n	80034a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f043 0320 	orr.w	r3, r3, #32
 800349a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034a2:	e006      	b.n	80034b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d1e9      	bne.n	8003486 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d003      	beq.n	80034c8 <I2C_IsErrorOccurred+0xe0>
 80034c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0aa      	beq.n	800341e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2220      	movs	r2, #32
 80034d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800354c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01c      	beq.n	8003596 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fe1e 	bl	800319e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <I2C_IsErrorOccurred+0x1bc>)
 800356e:	400b      	ands	r3, r1
 8003570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800359a:	4618      	mov	r0, r3
 800359c:	3728      	adds	r7, #40	@ 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	fe00e800 	.word	0xfe00e800

080035a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	4613      	mov	r3, r2
 80035b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c0:	7a7b      	ldrb	r3, [r7, #9]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	0d5b      	lsrs	r3, r3, #21
 80035e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <I2C_TransferConfig+0x60>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	43db      	mvns	r3, r3
 80035ec:	ea02 0103 	and.w	r1, r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	03ff63ff 	.word	0x03ff63ff

0800360c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00f      	beq.n	8003646 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800362c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800363a:	2b28      	cmp	r3, #40	@ 0x28
 800363c:	d003      	beq.n	8003646 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003644:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003656:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003664:	2b28      	cmp	r3, #40	@ 0x28
 8003666:	d003      	beq.n	8003670 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800366e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003674:	2b00      	cmp	r3, #0
 8003676:	da03      	bge.n	8003680 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800367e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	2b10      	cmp	r3, #16
 8003684:	d103      	bne.n	800368e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800368c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	2b20      	cmp	r3, #32
 8003692:	d103      	bne.n	800369c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f043 0320 	orr.w	r3, r3, #32
 800369a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	2b40      	cmp	r3, #64	@ 0x40
 80036a0:	d103      	bne.n	80036aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d138      	bne.n	8003750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e032      	b.n	8003752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	@ 0x24
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800371a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d139      	bne.n	80037e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800377e:	2302      	movs	r3, #2
 8003780:	e033      	b.n	80037ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2224      	movs	r2, #36	@ 0x24
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e29b      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8087 	beq.w	800392a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800381c:	4b96      	ldr	r3, [pc, #600]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00c      	beq.n	8003842 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003828:	4b93      	ldr	r3, [pc, #588]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d112      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
 8003834:	4b90      	ldr	r3, [pc, #576]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003842:	4b8d      	ldr	r3, [pc, #564]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06c      	beq.n	8003928 <HAL_RCC_OscConfig+0x130>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d168      	bne.n	8003928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e275      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x7a>
 8003864:	4b84      	ldr	r3, [pc, #528]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a83      	ldr	r2, [pc, #524]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x9c>
 800387a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b7c      	ldr	r3, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 800389e:	4b76      	ldr	r3, [pc, #472]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a72      	ldr	r2, [pc, #456]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 80038b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fcba 	bl	8001250 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fcb6 	bl	8001250 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e229      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fca6 	bl	8001250 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fca2 	bl	8001250 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e215      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b57      	ldr	r3, [pc, #348]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x110>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d069      	beq.n	8003a0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b4d      	ldr	r3, [pc, #308]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
 800394e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1e9      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	493d      	ldr	r1, [pc, #244]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e040      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d023      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fc58 	bl	8001250 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fd fc54 	bl	8001250 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1c7      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4929      	ldr	r1, [pc, #164]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d8:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a26      	ldr	r2, [pc, #152]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fc34 	bl	8001250 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fd fc30 	bl	8001250 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1a3      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d038      	beq.n	8003a88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fc11 	bl	8001250 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fd fc0d 	bl	8001250 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e180      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x23a>
 8003a50:	e01a      	b.n	8003a88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fbf7 	bl	8001250 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fd fbf3 	bl	8001250 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d903      	bls.n	8003a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e166      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
 8003a78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b92      	ldr	r3, [pc, #584]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a4 	beq.w	8003bde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b89      	ldr	r3, [pc, #548]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a88      	ldr	r2, [pc, #544]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b86      	ldr	r3, [pc, #536]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	4b83      	ldr	r3, [pc, #524]	@ (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aca:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7f      	ldr	r2, [pc, #508]	@ (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fbbb 	bl	8001250 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fd fbb7 	bl	8001250 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	@ 0x64
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e12a      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x31a>
 8003b04:	4b70      	ldr	r3, [pc, #448]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e02d      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x33c>
 8003b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b26:	4b68      	ldr	r3, [pc, #416]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a67      	ldr	r2, [pc, #412]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e01c      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x35e>
 8003b3c:	4b62      	ldr	r3, [pc, #392]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a61      	ldr	r2, [pc, #388]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b48:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b54:	e00b      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b56:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a58      	ldr	r2, [pc, #352]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d015      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fb6b 	bl	8001250 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fb67 	bl	8001250 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b4c      	ldr	r3, [pc, #304]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ee      	beq.n	8003b7e <HAL_RCC_OscConfig+0x386>
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fb55 	bl	8001250 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fd fb51 	bl	8001250 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0c2      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80ae 	beq.w	8003d44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be8:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d06d      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d14b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfc:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a31      	ldr	r2, [pc, #196]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fd fb22 	bl	8001250 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fd fb1e 	bl	8001250 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e091      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b29      	ldr	r3, [pc, #164]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	491b      	ldr	r1, [pc, #108]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd faf0 	bl	8001250 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd faec 	bl	8001250 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e05f      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x47c>
 8003c92:	e057      	b.n	8003d44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fad6 	bl	8001250 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fad2 	bl	8001250 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e045      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4b0>
 8003cc6:	e03d      	b.n	8003d44 <HAL_RCC_OscConfig+0x54c>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <HAL_RCC_OscConfig+0x558>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d030      	beq.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d129      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d122      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d119      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d10f      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d0      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b67      	ldr	r3, [pc, #412]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	4965      	ldr	r1, [pc, #404]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d040      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d115      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e073      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3d      	ldr	r3, [pc, #244]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4936      	ldr	r1, [pc, #216]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e48:	f7fd fa02 	bl	8001250 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fd f9fe 	bl	8001250 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e053      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2d      	ldr	r3, [pc, #180]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b27      	ldr	r3, [pc, #156]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d210      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 020f 	bic.w	r2, r3, #15
 8003e8e:	4922      	ldr	r1, [pc, #136]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	@ (8003f20 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <HAL_RCC_ClockConfig+0x1d0>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_ClockConfig+0x1d4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd f95e 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08006f28 	.word	0x08006f28
 8003f24:	20000004 	.word	0x20000004
 8003f28:	20000008 	.word	0x20000008

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b090      	sub	sp, #64	@ 0x40
 8003f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f44:	4b59      	ldr	r3, [pc, #356]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	f200 80a1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f5e:	e09b      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f64:	e09b      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b53      	ldr	r3, [pc, #332]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f6a:	e098      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f76:	4b4d      	ldr	r3, [pc, #308]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b4a      	ldr	r3, [pc, #296]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f94:	2100      	movs	r1, #0
 8003f96:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f98:	fb03 f201 	mul.w	r2, r3, r1
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a43      	ldr	r2, [pc, #268]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fa6:	fba0 1202 	umull	r1, r2, r0, r2
 8003faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fac:	460a      	mov	r2, r1
 8003fae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fc6:	f7fc f98b 	bl	80002e0 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4613      	mov	r3, r2
 8003fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd2:	e053      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b35      	ldr	r3, [pc, #212]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	617a      	str	r2, [r7, #20]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	0159      	lsls	r1, r3, #5
 8003ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffc:	0150      	lsls	r0, r2, #5
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	ebb2 080a 	subs.w	r8, r2, sl
 8004006:	eb63 090b 	sbc.w	r9, r3, fp
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004016:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800401a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800401e:	ebb2 0408 	subs.w	r4, r2, r8
 8004022:	eb63 0509 	sbc.w	r5, r3, r9
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	00eb      	lsls	r3, r5, #3
 8004030:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004034:	00e2      	lsls	r2, r4, #3
 8004036:	4614      	mov	r4, r2
 8004038:	461d      	mov	r5, r3
 800403a:	eb14 030a 	adds.w	r3, r4, sl
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	eb45 030b 	adc.w	r3, r5, fp
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004066:	2200      	movs	r2, #0
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004070:	f7fc f936 	bl	80002e0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800408c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3740      	adds	r7, #64	@ 0x40
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	017d7840 	.word	0x017d7840

080040b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08006f38 	.word	0x08006f38

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	08006f38 	.word	0x08006f38

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004148:	4b69      	ldr	r3, [pc, #420]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a68      	ldr	r2, [pc, #416]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	4b66      	ldr	r3, [pc, #408]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415c:	4964      	ldr	r1, [pc, #400]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d017      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417a:	4b5d      	ldr	r3, [pc, #372]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004180:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004188:	4959      	ldr	r1, [pc, #356]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b6:	4b4e      	ldr	r3, [pc, #312]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	494a      	ldr	r1, [pc, #296]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 808b 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b3a      	ldr	r3, [pc, #232]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	4a39      	ldr	r2, [pc, #228]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004210:	4b37      	ldr	r3, [pc, #220]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800421c:	4b35      	ldr	r3, [pc, #212]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a34      	ldr	r2, [pc, #208]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fd f812 	bl	8001250 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fd f80e 	bl	8001250 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	@ 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e38f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424e:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d035      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d02e      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426c:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004276:	4b1e      	ldr	r3, [pc, #120]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a1d      	ldr	r2, [pc, #116]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004294:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d114      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc ffd6 	bl	8001250 <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fc ffd2 	bl	8001250 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e351      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	4b0c      	ldr	r3, [pc, #48]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042d6:	d111      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	4901      	ldr	r1, [pc, #4]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	e00b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40007000 	.word	0x40007000
 80042f8:	0ffffcff 	.word	0x0ffffcff
 80042fc:	4bac      	ldr	r3, [pc, #688]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4aab      	ldr	r2, [pc, #684]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	4ba9      	ldr	r3, [pc, #676]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	49a6      	ldr	r1, [pc, #664]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	4313      	orrs	r3, r2
 8004318:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004326:	4ba2      	ldr	r3, [pc, #648]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432c:	4aa0      	ldr	r2, [pc, #640]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004332:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004336:	4b9e      	ldr	r3, [pc, #632]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004338:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	499b      	ldr	r1, [pc, #620]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004354:	4b96      	ldr	r3, [pc, #600]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004362:	4993      	ldr	r1, [pc, #588]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004376:	4b8e      	ldr	r3, [pc, #568]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004384:	498a      	ldr	r1, [pc, #552]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004398:	4b85      	ldr	r3, [pc, #532]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a6:	4982      	ldr	r1, [pc, #520]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ba:	4b7d      	ldr	r3, [pc, #500]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4979      	ldr	r1, [pc, #484]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043dc:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	4971      	ldr	r1, [pc, #452]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fe:	4b6c      	ldr	r3, [pc, #432]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004404:	f023 020c 	bic.w	r2, r3, #12
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440c:	4968      	ldr	r1, [pc, #416]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004420:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004426:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	4960      	ldr	r1, [pc, #384]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004442:	4b5b      	ldr	r3, [pc, #364]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	4957      	ldr	r1, [pc, #348]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004464:	4b52      	ldr	r3, [pc, #328]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	494f      	ldr	r1, [pc, #316]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004486:	4b4a      	ldr	r3, [pc, #296]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4946      	ldr	r1, [pc, #280]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044a8:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	493e      	ldr	r1, [pc, #248]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ca:	4b39      	ldr	r3, [pc, #228]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	4935      	ldr	r1, [pc, #212]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ec:	4b30      	ldr	r3, [pc, #192]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044fa:	492d      	ldr	r1, [pc, #180]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800450e:	4b28      	ldr	r3, [pc, #160]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451c:	4924      	ldr	r1, [pc, #144]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454e:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455c:	4914      	ldr	r1, [pc, #80]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004570:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004580:	490b      	ldr	r1, [pc, #44]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a4:	4902      	ldr	r1, [pc, #8]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045ac:	e002      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045c0:	4b8a      	ldr	r3, [pc, #552]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	4986      	ldr	r1, [pc, #536]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045e4:	4b81      	ldr	r3, [pc, #516]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f4:	497d      	ldr	r1, [pc, #500]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d006      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80d6 	beq.w	80047bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004610:	4b76      	ldr	r3, [pc, #472]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a75      	ldr	r2, [pc, #468]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fc fe18 	bl	8001250 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004624:	f7fc fe14 	bl	8001250 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e195      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004636:	4b6d      	ldr	r3, [pc, #436]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d021      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004656:	4b65      	ldr	r3, [pc, #404]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004664:	4b61      	ldr	r3, [pc, #388]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466a:	0e1b      	lsrs	r3, r3, #24
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	019a      	lsls	r2, r3, #6
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	071b      	lsls	r3, r3, #28
 800468a:	4958      	ldr	r1, [pc, #352]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02e      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046bc:	d129      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046be:	4b4b      	ldr	r3, [pc, #300]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046cc:	4b47      	ldr	r3, [pc, #284]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	493e      	ldr	r1, [pc, #248]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046fa:	4b3c      	ldr	r3, [pc, #240]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004700:	f023 021f 	bic.w	r2, r3, #31
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	3b01      	subs	r3, #1
 800470a:	4938      	ldr	r1, [pc, #224]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01d      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800471e:	4b33      	ldr	r3, [pc, #204]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800472c:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004732:	0f1b      	lsrs	r3, r3, #28
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	019a      	lsls	r2, r3, #6
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	4926      	ldr	r1, [pc, #152]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	491a      	ldr	r1, [pc, #104]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004790:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fc fd5b 	bl	8001250 <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800479e:	f7fc fd57 	bl	8001250 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	@ 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0d8      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 80ce 	bne.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fc fd3e 	bl	8001250 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d8:	f7fc fd3a 	bl	8001250 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	@ 0x64
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0bb      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f0:	4b5e      	ldr	r3, [pc, #376]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047fc:	d0ec      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02e      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d12a      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004834:	4b4d      	ldr	r3, [pc, #308]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4944      	ldr	r1, [pc, #272]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004862:	4b42      	ldr	r3, [pc, #264]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004868:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	493d      	ldr	r1, [pc, #244]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800488c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004890:	d11d      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004892:	4b36      	ldr	r3, [pc, #216]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048a0:	4b32      	ldr	r3, [pc, #200]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	0f1b      	lsrs	r3, r3, #28
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	019a      	lsls	r2, r3, #6
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	4929      	ldr	r1, [pc, #164]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	0e1b      	lsrs	r3, r3, #24
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048e8:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	4917      	ldr	r1, [pc, #92]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004916:	4b15      	ldr	r3, [pc, #84]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800491c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4911      	ldr	r1, [pc, #68]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800492c:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0e      	ldr	r2, [pc, #56]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fc fc8a 	bl	8001250 <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004940:	f7fc fc86 	bl	8001250 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	@ 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e007      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800495a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800495e:	d1ef      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e049      	b.n	8004a16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fa06 	bl	8000da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 f94a 	bl	8004c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0ff      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b14      	cmp	r3, #20
 8004a4a:	f200 80f0 	bhi.w	8004c2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004aa9 	.word	0x08004aa9
 8004a58:	08004c2f 	.word	0x08004c2f
 8004a5c:	08004c2f 	.word	0x08004c2f
 8004a60:	08004c2f 	.word	0x08004c2f
 8004a64:	08004ae9 	.word	0x08004ae9
 8004a68:	08004c2f 	.word	0x08004c2f
 8004a6c:	08004c2f 	.word	0x08004c2f
 8004a70:	08004c2f 	.word	0x08004c2f
 8004a74:	08004b2b 	.word	0x08004b2b
 8004a78:	08004c2f 	.word	0x08004c2f
 8004a7c:	08004c2f 	.word	0x08004c2f
 8004a80:	08004c2f 	.word	0x08004c2f
 8004a84:	08004b6b 	.word	0x08004b6b
 8004a88:	08004c2f 	.word	0x08004c2f
 8004a8c:	08004c2f 	.word	0x08004c2f
 8004a90:	08004c2f 	.word	0x08004c2f
 8004a94:	08004bad 	.word	0x08004bad
 8004a98:	08004c2f 	.word	0x08004c2f
 8004a9c:	08004c2f 	.word	0x08004c2f
 8004aa0:	08004c2f 	.word	0x08004c2f
 8004aa4:	08004bed 	.word	0x08004bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f976 	bl	8004da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0204 	bic.w	r2, r2, #4
 8004ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	619a      	str	r2, [r3, #24]
      break;
 8004ae6:	e0a5      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9c8 	bl	8004e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]
      break;
 8004b28:	e084      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa1f 	bl	8004f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0208 	orr.w	r2, r2, #8
 8004b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0204 	bic.w	r2, r2, #4
 8004b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
      break;
 8004b68:	e064      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa75 	bl	8005060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
      break;
 8004baa:	e043      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 faac 	bl	8005110 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0208 	orr.w	r2, r2, #8
 8004bc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bea:	e023      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fade 	bl	80051b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c2c:	e002      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop

08004c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	@ (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a43      	ldr	r2, [pc, #268]	@ (8004d78 <TIM_Base_SetConfig+0x130>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a42      	ldr	r2, [pc, #264]	@ (8004d7c <TIM_Base_SetConfig+0x134>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a41      	ldr	r2, [pc, #260]	@ (8004d80 <TIM_Base_SetConfig+0x138>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	@ (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a35      	ldr	r2, [pc, #212]	@ (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d02b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d027      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a32      	ldr	r2, [pc, #200]	@ (8004d78 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d023      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a31      	ldr	r2, [pc, #196]	@ (8004d7c <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01f      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	@ (8004d80 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d017      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d88 <TIM_Base_SetConfig+0x140>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <TIM_Base_SetConfig+0x144>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004d90 <TIM_Base_SetConfig+0x148>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d94 <TIM_Base_SetConfig+0x14c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	@ (8004d98 <TIM_Base_SetConfig+0x150>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <TIM_Base_SetConfig+0x154>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a10      	ldr	r2, [pc, #64]	@ (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0xf8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	@ (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d103      	bne.n	8004d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]
  }
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f023 0201 	bic.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4b2b      	ldr	r3, [pc, #172]	@ (8004e78 <TIM_OC1_SetConfig+0xd8>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0302 	bic.w	r3, r3, #2
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC1_SetConfig+0x64>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <TIM_OC1_SetConfig+0xe0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_OC1_SetConfig+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <TIM_OC1_SetConfig+0xe0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	fffeff8f 	.word	0xfffeff8f
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400

08004e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0210 	bic.w	r2, r3, #16
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <TIM_OC2_SetConfig+0xe4>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0320 	bic.w	r3, r3, #32
 8004ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a23      	ldr	r2, [pc, #140]	@ (8004f6c <TIM_OC2_SetConfig+0xe8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC2_SetConfig+0x68>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a22      	ldr	r2, [pc, #136]	@ (8004f70 <TIM_OC2_SetConfig+0xec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10d      	bne.n	8004f08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC2_SetConfig+0xe8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_OC2_SetConfig+0x94>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC2_SetConfig+0xec>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d113      	bne.n	8004f40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	feff8fff 	.word	0xfeff8fff
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005054 <TIM_OC3_SetConfig+0xe0>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	@ (8005058 <TIM_OC3_SetConfig+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC3_SetConfig+0x66>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a21      	ldr	r2, [pc, #132]	@ (800505c <TIM_OC3_SetConfig+0xe8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10d      	bne.n	8004ff6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_OC3_SetConfig+0x92>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <TIM_OC3_SetConfig+0xe8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d113      	bne.n	800502e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800500c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	fffeff8f 	.word	0xfffeff8f
 8005058:	40010000 	.word	0x40010000
 800505c:	40010400 	.word	0x40010400

08005060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <TIM_OC4_SetConfig+0xa4>)
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <TIM_OC4_SetConfig+0xa8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC4_SetConfig+0x68>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a12      	ldr	r2, [pc, #72]	@ (800510c <TIM_OC4_SetConfig+0xac>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d109      	bne.n	80050dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	feff8fff 	.word	0xfeff8fff
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400

08005110 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <TIM_OC5_SetConfig+0x98>)
 800513c:	4013      	ands	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <TIM_OC5_SetConfig+0x9c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC5_SetConfig+0x5e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <TIM_OC5_SetConfig+0xa0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d109      	bne.n	8005182 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	fffeff8f 	.word	0xfffeff8f
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40010400 	.word	0x40010400

080051b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <TIM_OC6_SetConfig+0x9c>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	051b      	lsls	r3, r3, #20
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <TIM_OC6_SetConfig+0xa0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC6_SetConfig+0x60>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a12      	ldr	r2, [pc, #72]	@ (8005258 <TIM_OC6_SetConfig+0xa4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d109      	bne.n	8005228 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	feff8fff 	.word	0xfeff8fff
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400

0800525c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e06d      	b.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a30      	ldr	r2, [pc, #192]	@ (800535c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d108      	bne.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a20      	ldr	r2, [pc, #128]	@ (800535c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e6:	d01d      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1a      	ldr	r2, [pc, #104]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a15      	ldr	r2, [pc, #84]	@ (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a15      	ldr	r2, [pc, #84]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800532a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40001800 	.word	0x40001800

08005378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e040      	b.n	800540c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fd58 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	@ 0x24
 80053a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fb16 	bl	80059f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8af 	bl	8005528 <UART_SetConfig>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e01b      	b.n	800540c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb95 	bl	8005b34 <UART_CheckIdleState>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	@ 0x28
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005428:	2b20      	cmp	r3, #32
 800542a:	d177      	bne.n	800551c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_UART_Transmit+0x24>
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e070      	b.n	800551e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2221      	movs	r2, #33	@ 0x21
 8005448:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800544a:	f7fb ff01 	bl	8001250 <HAL_GetTick>
 800544e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d108      	bne.n	800547c <HAL_UART_Transmit+0x68>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e003      	b.n	8005484 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005484:	e02f      	b.n	80054e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fbf7 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e03b      	b.n	800551e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	3302      	adds	r3, #2
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e007      	b.n	80054d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3301      	adds	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1c9      	bne.n	8005486 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	@ 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fbc1 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e005      	b.n	800551e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4ba6      	ldr	r3, [pc, #664]	@ (80057ec <UART_SetConfig+0x2c4>)
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	430b      	orrs	r3, r1
 800555e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a94      	ldr	r2, [pc, #592]	@ (80057f0 <UART_SetConfig+0x2c8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d120      	bne.n	80055e6 <UART_SetConfig+0xbe>
 80055a4:	4b93      	ldr	r3, [pc, #588]	@ (80057f4 <UART_SetConfig+0x2cc>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d816      	bhi.n	80055e0 <UART_SetConfig+0xb8>
 80055b2:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <UART_SetConfig+0x90>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055d5 	.word	0x080055d5
 80055c0:	080055cf 	.word	0x080055cf
 80055c4:	080055db 	.word	0x080055db
 80055c8:	2301      	movs	r3, #1
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e150      	b.n	8005870 <UART_SetConfig+0x348>
 80055ce:	2302      	movs	r3, #2
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e14d      	b.n	8005870 <UART_SetConfig+0x348>
 80055d4:	2304      	movs	r3, #4
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e14a      	b.n	8005870 <UART_SetConfig+0x348>
 80055da:	2308      	movs	r3, #8
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e147      	b.n	8005870 <UART_SetConfig+0x348>
 80055e0:	2310      	movs	r3, #16
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e144      	b.n	8005870 <UART_SetConfig+0x348>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a83      	ldr	r2, [pc, #524]	@ (80057f8 <UART_SetConfig+0x2d0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d132      	bne.n	8005656 <UART_SetConfig+0x12e>
 80055f0:	4b80      	ldr	r3, [pc, #512]	@ (80057f4 <UART_SetConfig+0x2cc>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d828      	bhi.n	8005650 <UART_SetConfig+0x128>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <UART_SetConfig+0xdc>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005639 	.word	0x08005639
 8005608:	08005651 	.word	0x08005651
 800560c:	08005651 	.word	0x08005651
 8005610:	08005651 	.word	0x08005651
 8005614:	08005645 	.word	0x08005645
 8005618:	08005651 	.word	0x08005651
 800561c:	08005651 	.word	0x08005651
 8005620:	08005651 	.word	0x08005651
 8005624:	0800563f 	.word	0x0800563f
 8005628:	08005651 	.word	0x08005651
 800562c:	08005651 	.word	0x08005651
 8005630:	08005651 	.word	0x08005651
 8005634:	0800564b 	.word	0x0800564b
 8005638:	2300      	movs	r3, #0
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e118      	b.n	8005870 <UART_SetConfig+0x348>
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e115      	b.n	8005870 <UART_SetConfig+0x348>
 8005644:	2304      	movs	r3, #4
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e112      	b.n	8005870 <UART_SetConfig+0x348>
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e10f      	b.n	8005870 <UART_SetConfig+0x348>
 8005650:	2310      	movs	r3, #16
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e10c      	b.n	8005870 <UART_SetConfig+0x348>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a68      	ldr	r2, [pc, #416]	@ (80057fc <UART_SetConfig+0x2d4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d120      	bne.n	80056a2 <UART_SetConfig+0x17a>
 8005660:	4b64      	ldr	r3, [pc, #400]	@ (80057f4 <UART_SetConfig+0x2cc>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800566a:	2b30      	cmp	r3, #48	@ 0x30
 800566c:	d013      	beq.n	8005696 <UART_SetConfig+0x16e>
 800566e:	2b30      	cmp	r3, #48	@ 0x30
 8005670:	d814      	bhi.n	800569c <UART_SetConfig+0x174>
 8005672:	2b20      	cmp	r3, #32
 8005674:	d009      	beq.n	800568a <UART_SetConfig+0x162>
 8005676:	2b20      	cmp	r3, #32
 8005678:	d810      	bhi.n	800569c <UART_SetConfig+0x174>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <UART_SetConfig+0x15c>
 800567e:	2b10      	cmp	r3, #16
 8005680:	d006      	beq.n	8005690 <UART_SetConfig+0x168>
 8005682:	e00b      	b.n	800569c <UART_SetConfig+0x174>
 8005684:	2300      	movs	r3, #0
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e0f2      	b.n	8005870 <UART_SetConfig+0x348>
 800568a:	2302      	movs	r3, #2
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e0ef      	b.n	8005870 <UART_SetConfig+0x348>
 8005690:	2304      	movs	r3, #4
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e0ec      	b.n	8005870 <UART_SetConfig+0x348>
 8005696:	2308      	movs	r3, #8
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e0e9      	b.n	8005870 <UART_SetConfig+0x348>
 800569c:	2310      	movs	r3, #16
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e0e6      	b.n	8005870 <UART_SetConfig+0x348>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a56      	ldr	r2, [pc, #344]	@ (8005800 <UART_SetConfig+0x2d8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d120      	bne.n	80056ee <UART_SetConfig+0x1c6>
 80056ac:	4b51      	ldr	r3, [pc, #324]	@ (80057f4 <UART_SetConfig+0x2cc>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b8:	d013      	beq.n	80056e2 <UART_SetConfig+0x1ba>
 80056ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80056bc:	d814      	bhi.n	80056e8 <UART_SetConfig+0x1c0>
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d009      	beq.n	80056d6 <UART_SetConfig+0x1ae>
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d810      	bhi.n	80056e8 <UART_SetConfig+0x1c0>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <UART_SetConfig+0x1a8>
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d006      	beq.n	80056dc <UART_SetConfig+0x1b4>
 80056ce:	e00b      	b.n	80056e8 <UART_SetConfig+0x1c0>
 80056d0:	2300      	movs	r3, #0
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e0cc      	b.n	8005870 <UART_SetConfig+0x348>
 80056d6:	2302      	movs	r3, #2
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e0c9      	b.n	8005870 <UART_SetConfig+0x348>
 80056dc:	2304      	movs	r3, #4
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e0c6      	b.n	8005870 <UART_SetConfig+0x348>
 80056e2:	2308      	movs	r3, #8
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e0c3      	b.n	8005870 <UART_SetConfig+0x348>
 80056e8:	2310      	movs	r3, #16
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e0c0      	b.n	8005870 <UART_SetConfig+0x348>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a44      	ldr	r2, [pc, #272]	@ (8005804 <UART_SetConfig+0x2dc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d125      	bne.n	8005744 <UART_SetConfig+0x21c>
 80056f8:	4b3e      	ldr	r3, [pc, #248]	@ (80057f4 <UART_SetConfig+0x2cc>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005706:	d017      	beq.n	8005738 <UART_SetConfig+0x210>
 8005708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570c:	d817      	bhi.n	800573e <UART_SetConfig+0x216>
 800570e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005712:	d00b      	beq.n	800572c <UART_SetConfig+0x204>
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d811      	bhi.n	800573e <UART_SetConfig+0x216>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <UART_SetConfig+0x1fe>
 800571e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005722:	d006      	beq.n	8005732 <UART_SetConfig+0x20a>
 8005724:	e00b      	b.n	800573e <UART_SetConfig+0x216>
 8005726:	2300      	movs	r3, #0
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e0a1      	b.n	8005870 <UART_SetConfig+0x348>
 800572c:	2302      	movs	r3, #2
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e09e      	b.n	8005870 <UART_SetConfig+0x348>
 8005732:	2304      	movs	r3, #4
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e09b      	b.n	8005870 <UART_SetConfig+0x348>
 8005738:	2308      	movs	r3, #8
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e098      	b.n	8005870 <UART_SetConfig+0x348>
 800573e:	2310      	movs	r3, #16
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e095      	b.n	8005870 <UART_SetConfig+0x348>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2f      	ldr	r2, [pc, #188]	@ (8005808 <UART_SetConfig+0x2e0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d125      	bne.n	800579a <UART_SetConfig+0x272>
 800574e:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <UART_SetConfig+0x2cc>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800575c:	d017      	beq.n	800578e <UART_SetConfig+0x266>
 800575e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005762:	d817      	bhi.n	8005794 <UART_SetConfig+0x26c>
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005768:	d00b      	beq.n	8005782 <UART_SetConfig+0x25a>
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576e:	d811      	bhi.n	8005794 <UART_SetConfig+0x26c>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <UART_SetConfig+0x254>
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005778:	d006      	beq.n	8005788 <UART_SetConfig+0x260>
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x26c>
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e076      	b.n	8005870 <UART_SetConfig+0x348>
 8005782:	2302      	movs	r3, #2
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e073      	b.n	8005870 <UART_SetConfig+0x348>
 8005788:	2304      	movs	r3, #4
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e070      	b.n	8005870 <UART_SetConfig+0x348>
 800578e:	2308      	movs	r3, #8
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e06d      	b.n	8005870 <UART_SetConfig+0x348>
 8005794:	2310      	movs	r3, #16
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e06a      	b.n	8005870 <UART_SetConfig+0x348>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	@ (800580c <UART_SetConfig+0x2e4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d138      	bne.n	8005816 <UART_SetConfig+0x2ee>
 80057a4:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <UART_SetConfig+0x2cc>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80057ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057b2:	d017      	beq.n	80057e4 <UART_SetConfig+0x2bc>
 80057b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057b8:	d82a      	bhi.n	8005810 <UART_SetConfig+0x2e8>
 80057ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057be:	d00b      	beq.n	80057d8 <UART_SetConfig+0x2b0>
 80057c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c4:	d824      	bhi.n	8005810 <UART_SetConfig+0x2e8>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <UART_SetConfig+0x2aa>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ce:	d006      	beq.n	80057de <UART_SetConfig+0x2b6>
 80057d0:	e01e      	b.n	8005810 <UART_SetConfig+0x2e8>
 80057d2:	2300      	movs	r3, #0
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e04b      	b.n	8005870 <UART_SetConfig+0x348>
 80057d8:	2302      	movs	r3, #2
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e048      	b.n	8005870 <UART_SetConfig+0x348>
 80057de:	2304      	movs	r3, #4
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e045      	b.n	8005870 <UART_SetConfig+0x348>
 80057e4:	2308      	movs	r3, #8
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e042      	b.n	8005870 <UART_SetConfig+0x348>
 80057ea:	bf00      	nop
 80057ec:	efff69f3 	.word	0xefff69f3
 80057f0:	40011000 	.word	0x40011000
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40004400 	.word	0x40004400
 80057fc:	40004800 	.word	0x40004800
 8005800:	40004c00 	.word	0x40004c00
 8005804:	40005000 	.word	0x40005000
 8005808:	40011400 	.word	0x40011400
 800580c:	40007800 	.word	0x40007800
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e02c      	b.n	8005870 <UART_SetConfig+0x348>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a72      	ldr	r2, [pc, #456]	@ (80059e4 <UART_SetConfig+0x4bc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d125      	bne.n	800586c <UART_SetConfig+0x344>
 8005820:	4b71      	ldr	r3, [pc, #452]	@ (80059e8 <UART_SetConfig+0x4c0>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800582a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800582e:	d017      	beq.n	8005860 <UART_SetConfig+0x338>
 8005830:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005834:	d817      	bhi.n	8005866 <UART_SetConfig+0x33e>
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583a:	d00b      	beq.n	8005854 <UART_SetConfig+0x32c>
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005840:	d811      	bhi.n	8005866 <UART_SetConfig+0x33e>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <UART_SetConfig+0x326>
 8005846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800584a:	d006      	beq.n	800585a <UART_SetConfig+0x332>
 800584c:	e00b      	b.n	8005866 <UART_SetConfig+0x33e>
 800584e:	2300      	movs	r3, #0
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e00d      	b.n	8005870 <UART_SetConfig+0x348>
 8005854:	2302      	movs	r3, #2
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e00a      	b.n	8005870 <UART_SetConfig+0x348>
 800585a:	2304      	movs	r3, #4
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e007      	b.n	8005870 <UART_SetConfig+0x348>
 8005860:	2308      	movs	r3, #8
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e004      	b.n	8005870 <UART_SetConfig+0x348>
 8005866:	2310      	movs	r3, #16
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e001      	b.n	8005870 <UART_SetConfig+0x348>
 800586c:	2310      	movs	r3, #16
 800586e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005878:	d15b      	bne.n	8005932 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800587a:	7ffb      	ldrb	r3, [r7, #31]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d828      	bhi.n	80058d2 <UART_SetConfig+0x3aa>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <UART_SetConfig+0x360>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058d3 	.word	0x080058d3
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058d3 	.word	0x080058d3
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	080058d3 	.word	0x080058d3
 80058a8:	080058cb 	.word	0x080058cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fe fc10 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 80058b0:	61b8      	str	r0, [r7, #24]
        break;
 80058b2:	e013      	b.n	80058dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b4:	f7fe fc20 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80058b8:	61b8      	str	r0, [r7, #24]
        break;
 80058ba:	e00f      	b.n	80058dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b4b      	ldr	r3, [pc, #300]	@ (80059ec <UART_SetConfig+0x4c4>)
 80058be:	61bb      	str	r3, [r7, #24]
        break;
 80058c0:	e00c      	b.n	80058dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c2:	f7fe fb33 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 80058c6:	61b8      	str	r0, [r7, #24]
        break;
 80058c8:	e008      	b.n	80058dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ce:	61bb      	str	r3, [r7, #24]
        break;
 80058d0:	e004      	b.n	80058dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	77bb      	strb	r3, [r7, #30]
        break;
 80058da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d074      	beq.n	80059cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	005a      	lsls	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	441a      	add	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	d916      	bls.n	800592c <UART_SetConfig+0x404>
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005904:	d212      	bcs.n	800592c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f023 030f 	bic.w	r3, r3, #15
 800590e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	b29b      	uxth	r3, r3
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	b29a      	uxth	r2, r3
 800591c:	89fb      	ldrh	r3, [r7, #14]
 800591e:	4313      	orrs	r3, r2
 8005920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	89fa      	ldrh	r2, [r7, #14]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	e04f      	b.n	80059cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	77bb      	strb	r3, [r7, #30]
 8005930:	e04c      	b.n	80059cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005932:	7ffb      	ldrb	r3, [r7, #31]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d828      	bhi.n	800598a <UART_SetConfig+0x462>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <UART_SetConfig+0x418>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005975 	.word	0x08005975
 800594c:	0800598b 	.word	0x0800598b
 8005950:	0800597b 	.word	0x0800597b
 8005954:	0800598b 	.word	0x0800598b
 8005958:	0800598b 	.word	0x0800598b
 800595c:	0800598b 	.word	0x0800598b
 8005960:	08005983 	.word	0x08005983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005964:	f7fe fbb4 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8005968:	61b8      	str	r0, [r7, #24]
        break;
 800596a:	e013      	b.n	8005994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fe fbc4 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8005970:	61b8      	str	r0, [r7, #24]
        break;
 8005972:	e00f      	b.n	8005994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <UART_SetConfig+0x4c4>)
 8005976:	61bb      	str	r3, [r7, #24]
        break;
 8005978:	e00c      	b.n	8005994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597a:	f7fe fad7 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 800597e:	61b8      	str	r0, [r7, #24]
        break;
 8005980:	e008      	b.n	8005994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005986:	61bb      	str	r3, [r7, #24]
        break;
 8005988:	e004      	b.n	8005994 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	77bb      	strb	r3, [r7, #30]
        break;
 8005992:	bf00      	nop
    }

    if (pclk != 0U)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085a      	lsrs	r2, r3, #1
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b0f      	cmp	r3, #15
 80059b2:	d909      	bls.n	80059c8 <UART_SetConfig+0x4a0>
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ba:	d205      	bcs.n	80059c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e001      	b.n	80059cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40007c00 	.word	0x40007c00
 80059e8:	40023800 	.word	0x40023800
 80059ec:	00f42400 	.word	0x00f42400

080059f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d10a      	bne.n	8005b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b098      	sub	sp, #96	@ 0x60
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b44:	f7fb fb84 	bl	8001250 <HAL_GetTick>
 8005b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d12e      	bne.n	8005bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f88c 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d021      	beq.n	8005bb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e062      	b.n	8005c7c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d149      	bne.n	8005c58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f856 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d03c      	beq.n	8005c58 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	623b      	str	r3, [r7, #32]
   return(result);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c30:	61fa      	str	r2, [r7, #28]
 8005c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	69b9      	ldr	r1, [r7, #24]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e011      	b.n	8005c7c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3758      	adds	r7, #88	@ 0x58
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c94:	e04f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d04b      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fb fad7 	bl	8001250 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e04e      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d037      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b80      	cmp	r3, #128	@ 0x80
 8005cca:	d034      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d031      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d110      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f838 	bl	8005d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e029      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d10:	d111      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f81e 	bl	8005d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e00f      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	bf0c      	ite	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	2300      	movne	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d0a0      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b095      	sub	sp, #84	@ 0x54
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d118      	bne.n	8005e06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6979      	ldr	r1, [r7, #20]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e6      	bne.n	8005dd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e1a:	bf00      	nop
 8005e1c:	3754      	adds	r7, #84	@ 0x54
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <std>:
 8005e28:	2300      	movs	r3, #0
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e36:	6083      	str	r3, [r0, #8]
 8005e38:	8181      	strh	r1, [r0, #12]
 8005e3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e3c:	81c2      	strh	r2, [r0, #14]
 8005e3e:	6183      	str	r3, [r0, #24]
 8005e40:	4619      	mov	r1, r3
 8005e42:	2208      	movs	r2, #8
 8005e44:	305c      	adds	r0, #92	@ 0x5c
 8005e46:	f000 f9f9 	bl	800623c <memset>
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <std+0x58>)
 8005e4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <std+0x5c>)
 8005e50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <std+0x60>)
 8005e54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e56:	4b0d      	ldr	r3, [pc, #52]	@ (8005e8c <std+0x64>)
 8005e58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <std+0x68>)
 8005e5c:	6224      	str	r4, [r4, #32]
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	d006      	beq.n	8005e70 <std+0x48>
 8005e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e66:	4294      	cmp	r4, r2
 8005e68:	d002      	beq.n	8005e70 <std+0x48>
 8005e6a:	33d0      	adds	r3, #208	@ 0xd0
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d105      	bne.n	8005e7c <std+0x54>
 8005e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e78:	f000 ba58 	b.w	800632c <__retarget_lock_init_recursive>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	bf00      	nop
 8005e80:	0800608d 	.word	0x0800608d
 8005e84:	080060af 	.word	0x080060af
 8005e88:	080060e7 	.word	0x080060e7
 8005e8c:	0800610b 	.word	0x0800610b
 8005e90:	20000278 	.word	0x20000278

08005e94 <stdio_exit_handler>:
 8005e94:	4a02      	ldr	r2, [pc, #8]	@ (8005ea0 <stdio_exit_handler+0xc>)
 8005e96:	4903      	ldr	r1, [pc, #12]	@ (8005ea4 <stdio_exit_handler+0x10>)
 8005e98:	4803      	ldr	r0, [pc, #12]	@ (8005ea8 <stdio_exit_handler+0x14>)
 8005e9a:	f000 b869 	b.w	8005f70 <_fwalk_sglue>
 8005e9e:	bf00      	nop
 8005ea0:	20000010 	.word	0x20000010
 8005ea4:	08006bcd 	.word	0x08006bcd
 8005ea8:	20000020 	.word	0x20000020

08005eac <cleanup_stdio>:
 8005eac:	6841      	ldr	r1, [r0, #4]
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <cleanup_stdio+0x34>)
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	d001      	beq.n	8005ebc <cleanup_stdio+0x10>
 8005eb8:	f000 fe88 	bl	8006bcc <_fflush_r>
 8005ebc:	68a1      	ldr	r1, [r4, #8]
 8005ebe:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <cleanup_stdio+0x38>)
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d002      	beq.n	8005eca <cleanup_stdio+0x1e>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 fe81 	bl	8006bcc <_fflush_r>
 8005eca:	68e1      	ldr	r1, [r4, #12]
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <cleanup_stdio+0x3c>)
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	d004      	beq.n	8005edc <cleanup_stdio+0x30>
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 be78 	b.w	8006bcc <_fflush_r>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000278 	.word	0x20000278
 8005ee4:	200002e0 	.word	0x200002e0
 8005ee8:	20000348 	.word	0x20000348

08005eec <global_stdio_init.part.0>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <global_stdio_init.part.0+0x30>)
 8005ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8005f20 <global_stdio_init.part.0+0x34>)
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <global_stdio_init.part.0+0x38>)
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2104      	movs	r1, #4
 8005efc:	f7ff ff94 	bl	8005e28 <std>
 8005f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f04:	2201      	movs	r2, #1
 8005f06:	2109      	movs	r1, #9
 8005f08:	f7ff ff8e 	bl	8005e28 <std>
 8005f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f10:	2202      	movs	r2, #2
 8005f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f16:	2112      	movs	r1, #18
 8005f18:	f7ff bf86 	b.w	8005e28 <std>
 8005f1c:	200003b0 	.word	0x200003b0
 8005f20:	20000278 	.word	0x20000278
 8005f24:	08005e95 	.word	0x08005e95

08005f28 <__sfp_lock_acquire>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__sfp_lock_acquire+0x8>)
 8005f2a:	f000 ba00 	b.w	800632e <__retarget_lock_acquire_recursive>
 8005f2e:	bf00      	nop
 8005f30:	200003b9 	.word	0x200003b9

08005f34 <__sfp_lock_release>:
 8005f34:	4801      	ldr	r0, [pc, #4]	@ (8005f3c <__sfp_lock_release+0x8>)
 8005f36:	f000 b9fb 	b.w	8006330 <__retarget_lock_release_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	200003b9 	.word	0x200003b9

08005f40 <__sinit>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	4604      	mov	r4, r0
 8005f44:	f7ff fff0 	bl	8005f28 <__sfp_lock_acquire>
 8005f48:	6a23      	ldr	r3, [r4, #32]
 8005f4a:	b11b      	cbz	r3, 8005f54 <__sinit+0x14>
 8005f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f50:	f7ff bff0 	b.w	8005f34 <__sfp_lock_release>
 8005f54:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <__sinit+0x28>)
 8005f56:	6223      	str	r3, [r4, #32]
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <__sinit+0x2c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f5      	bne.n	8005f4c <__sinit+0xc>
 8005f60:	f7ff ffc4 	bl	8005eec <global_stdio_init.part.0>
 8005f64:	e7f2      	b.n	8005f4c <__sinit+0xc>
 8005f66:	bf00      	nop
 8005f68:	08005ead 	.word	0x08005ead
 8005f6c:	200003b0 	.word	0x200003b0

08005f70 <_fwalk_sglue>:
 8005f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f74:	4607      	mov	r7, r0
 8005f76:	4688      	mov	r8, r1
 8005f78:	4614      	mov	r4, r2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f80:	f1b9 0901 	subs.w	r9, r9, #1
 8005f84:	d505      	bpl.n	8005f92 <_fwalk_sglue+0x22>
 8005f86:	6824      	ldr	r4, [r4, #0]
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	d1f7      	bne.n	8005f7c <_fwalk_sglue+0xc>
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d907      	bls.n	8005fa8 <_fwalk_sglue+0x38>
 8005f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	d003      	beq.n	8005fa8 <_fwalk_sglue+0x38>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	47c0      	blx	r8
 8005fa6:	4306      	orrs	r6, r0
 8005fa8:	3568      	adds	r5, #104	@ 0x68
 8005faa:	e7e9      	b.n	8005f80 <_fwalk_sglue+0x10>

08005fac <iprintf>:
 8005fac:	b40f      	push	{r0, r1, r2, r3}
 8005fae:	b507      	push	{r0, r1, r2, lr}
 8005fb0:	4906      	ldr	r1, [pc, #24]	@ (8005fcc <iprintf+0x20>)
 8005fb2:	ab04      	add	r3, sp, #16
 8005fb4:	6808      	ldr	r0, [r1, #0]
 8005fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fba:	6881      	ldr	r1, [r0, #8]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f000 fadb 	bl	8006578 <_vfiprintf_r>
 8005fc2:	b003      	add	sp, #12
 8005fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr
 8005fcc:	2000001c 	.word	0x2000001c

08005fd0 <_puts_r>:
 8005fd0:	6a03      	ldr	r3, [r0, #32]
 8005fd2:	b570      	push	{r4, r5, r6, lr}
 8005fd4:	6884      	ldr	r4, [r0, #8]
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	460e      	mov	r6, r1
 8005fda:	b90b      	cbnz	r3, 8005fe0 <_puts_r+0x10>
 8005fdc:	f7ff ffb0 	bl	8005f40 <__sinit>
 8005fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe2:	07db      	lsls	r3, r3, #31
 8005fe4:	d405      	bmi.n	8005ff2 <_puts_r+0x22>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	0598      	lsls	r0, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_puts_r+0x22>
 8005fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fee:	f000 f99e 	bl	800632e <__retarget_lock_acquire_recursive>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	0719      	lsls	r1, r3, #28
 8005ff6:	d502      	bpl.n	8005ffe <_puts_r+0x2e>
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d135      	bne.n	800606a <_puts_r+0x9a>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f8c5 	bl	8006190 <__swsetup_r>
 8006006:	b380      	cbz	r0, 800606a <_puts_r+0x9a>
 8006008:	f04f 35ff 	mov.w	r5, #4294967295
 800600c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800600e:	07da      	lsls	r2, r3, #31
 8006010:	d405      	bmi.n	800601e <_puts_r+0x4e>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	059b      	lsls	r3, r3, #22
 8006016:	d402      	bmi.n	800601e <_puts_r+0x4e>
 8006018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800601a:	f000 f989 	bl	8006330 <__retarget_lock_release_recursive>
 800601e:	4628      	mov	r0, r5
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	2b00      	cmp	r3, #0
 8006024:	da04      	bge.n	8006030 <_puts_r+0x60>
 8006026:	69a2      	ldr	r2, [r4, #24]
 8006028:	429a      	cmp	r2, r3
 800602a:	dc17      	bgt.n	800605c <_puts_r+0x8c>
 800602c:	290a      	cmp	r1, #10
 800602e:	d015      	beq.n	800605c <_puts_r+0x8c>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	6022      	str	r2, [r4, #0]
 8006036:	7019      	strb	r1, [r3, #0]
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800603e:	3b01      	subs	r3, #1
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	2900      	cmp	r1, #0
 8006044:	d1ed      	bne.n	8006022 <_puts_r+0x52>
 8006046:	2b00      	cmp	r3, #0
 8006048:	da11      	bge.n	800606e <_puts_r+0x9e>
 800604a:	4622      	mov	r2, r4
 800604c:	210a      	movs	r1, #10
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f85f 	bl	8006112 <__swbuf_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d0d7      	beq.n	8006008 <_puts_r+0x38>
 8006058:	250a      	movs	r5, #10
 800605a:	e7d7      	b.n	800600c <_puts_r+0x3c>
 800605c:	4622      	mov	r2, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f857 	bl	8006112 <__swbuf_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d1e7      	bne.n	8006038 <_puts_r+0x68>
 8006068:	e7ce      	b.n	8006008 <_puts_r+0x38>
 800606a:	3e01      	subs	r6, #1
 800606c:	e7e4      	b.n	8006038 <_puts_r+0x68>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	6022      	str	r2, [r4, #0]
 8006074:	220a      	movs	r2, #10
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e7ee      	b.n	8006058 <_puts_r+0x88>
	...

0800607c <puts>:
 800607c:	4b02      	ldr	r3, [pc, #8]	@ (8006088 <puts+0xc>)
 800607e:	4601      	mov	r1, r0
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f7ff bfa5 	b.w	8005fd0 <_puts_r>
 8006086:	bf00      	nop
 8006088:	2000001c 	.word	0x2000001c

0800608c <__sread>:
 800608c:	b510      	push	{r4, lr}
 800608e:	460c      	mov	r4, r1
 8006090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006094:	f000 f8fc 	bl	8006290 <_read_r>
 8006098:	2800      	cmp	r0, #0
 800609a:	bfab      	itete	ge
 800609c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800609e:	89a3      	ldrhlt	r3, [r4, #12]
 80060a0:	181b      	addge	r3, r3, r0
 80060a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060a6:	bfac      	ite	ge
 80060a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060aa:	81a3      	strhlt	r3, [r4, #12]
 80060ac:	bd10      	pop	{r4, pc}

080060ae <__swrite>:
 80060ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	461f      	mov	r7, r3
 80060b4:	898b      	ldrh	r3, [r1, #12]
 80060b6:	05db      	lsls	r3, r3, #23
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	4616      	mov	r6, r2
 80060be:	d505      	bpl.n	80060cc <__swrite+0x1e>
 80060c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c4:	2302      	movs	r3, #2
 80060c6:	2200      	movs	r2, #0
 80060c8:	f000 f8d0 	bl	800626c <_lseek_r>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	4632      	mov	r2, r6
 80060da:	463b      	mov	r3, r7
 80060dc:	4628      	mov	r0, r5
 80060de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e2:	f000 b8e7 	b.w	80062b4 <_write_r>

080060e6 <__sseek>:
 80060e6:	b510      	push	{r4, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ee:	f000 f8bd 	bl	800626c <_lseek_r>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	bf15      	itete	ne
 80060f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006102:	81a3      	strheq	r3, [r4, #12]
 8006104:	bf18      	it	ne
 8006106:	81a3      	strhne	r3, [r4, #12]
 8006108:	bd10      	pop	{r4, pc}

0800610a <__sclose>:
 800610a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610e:	f000 b89d 	b.w	800624c <_close_r>

08006112 <__swbuf_r>:
 8006112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006114:	460e      	mov	r6, r1
 8006116:	4614      	mov	r4, r2
 8006118:	4605      	mov	r5, r0
 800611a:	b118      	cbz	r0, 8006124 <__swbuf_r+0x12>
 800611c:	6a03      	ldr	r3, [r0, #32]
 800611e:	b90b      	cbnz	r3, 8006124 <__swbuf_r+0x12>
 8006120:	f7ff ff0e 	bl	8005f40 <__sinit>
 8006124:	69a3      	ldr	r3, [r4, #24]
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	071a      	lsls	r2, r3, #28
 800612c:	d501      	bpl.n	8006132 <__swbuf_r+0x20>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	b943      	cbnz	r3, 8006144 <__swbuf_r+0x32>
 8006132:	4621      	mov	r1, r4
 8006134:	4628      	mov	r0, r5
 8006136:	f000 f82b 	bl	8006190 <__swsetup_r>
 800613a:	b118      	cbz	r0, 8006144 <__swbuf_r+0x32>
 800613c:	f04f 37ff 	mov.w	r7, #4294967295
 8006140:	4638      	mov	r0, r7
 8006142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	6922      	ldr	r2, [r4, #16]
 8006148:	1a98      	subs	r0, r3, r2
 800614a:	6963      	ldr	r3, [r4, #20]
 800614c:	b2f6      	uxtb	r6, r6
 800614e:	4283      	cmp	r3, r0
 8006150:	4637      	mov	r7, r6
 8006152:	dc05      	bgt.n	8006160 <__swbuf_r+0x4e>
 8006154:	4621      	mov	r1, r4
 8006156:	4628      	mov	r0, r5
 8006158:	f000 fd38 	bl	8006bcc <_fflush_r>
 800615c:	2800      	cmp	r0, #0
 800615e:	d1ed      	bne.n	800613c <__swbuf_r+0x2a>
 8006160:	68a3      	ldr	r3, [r4, #8]
 8006162:	3b01      	subs	r3, #1
 8006164:	60a3      	str	r3, [r4, #8]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	701e      	strb	r6, [r3, #0]
 800616e:	6962      	ldr	r2, [r4, #20]
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	429a      	cmp	r2, r3
 8006174:	d004      	beq.n	8006180 <__swbuf_r+0x6e>
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	07db      	lsls	r3, r3, #31
 800617a:	d5e1      	bpl.n	8006140 <__swbuf_r+0x2e>
 800617c:	2e0a      	cmp	r6, #10
 800617e:	d1df      	bne.n	8006140 <__swbuf_r+0x2e>
 8006180:	4621      	mov	r1, r4
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fd22 	bl	8006bcc <_fflush_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	d0d9      	beq.n	8006140 <__swbuf_r+0x2e>
 800618c:	e7d6      	b.n	800613c <__swbuf_r+0x2a>
	...

08006190 <__swsetup_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <__swsetup_r+0xa8>)
 8006194:	4605      	mov	r5, r0
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	460c      	mov	r4, r1
 800619a:	b118      	cbz	r0, 80061a4 <__swsetup_r+0x14>
 800619c:	6a03      	ldr	r3, [r0, #32]
 800619e:	b90b      	cbnz	r3, 80061a4 <__swsetup_r+0x14>
 80061a0:	f7ff fece 	bl	8005f40 <__sinit>
 80061a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d422      	bmi.n	80061f2 <__swsetup_r+0x62>
 80061ac:	06da      	lsls	r2, r3, #27
 80061ae:	d407      	bmi.n	80061c0 <__swsetup_r+0x30>
 80061b0:	2209      	movs	r2, #9
 80061b2:	602a      	str	r2, [r5, #0]
 80061b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	f04f 30ff 	mov.w	r0, #4294967295
 80061be:	e033      	b.n	8006228 <__swsetup_r+0x98>
 80061c0:	0758      	lsls	r0, r3, #29
 80061c2:	d512      	bpl.n	80061ea <__swsetup_r+0x5a>
 80061c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061c6:	b141      	cbz	r1, 80061da <__swsetup_r+0x4a>
 80061c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <__swsetup_r+0x46>
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f8af 	bl	8006334 <_free_r>
 80061d6:	2300      	movs	r3, #0
 80061d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	2300      	movs	r3, #0
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	b94b      	cbnz	r3, 800620a <__swsetup_r+0x7a>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006200:	d003      	beq.n	800620a <__swsetup_r+0x7a>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 fd2f 	bl	8006c68 <__smakebuf_r>
 800620a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620e:	f013 0201 	ands.w	r2, r3, #1
 8006212:	d00a      	beq.n	800622a <__swsetup_r+0x9a>
 8006214:	2200      	movs	r2, #0
 8006216:	60a2      	str	r2, [r4, #8]
 8006218:	6962      	ldr	r2, [r4, #20]
 800621a:	4252      	negs	r2, r2
 800621c:	61a2      	str	r2, [r4, #24]
 800621e:	6922      	ldr	r2, [r4, #16]
 8006220:	b942      	cbnz	r2, 8006234 <__swsetup_r+0xa4>
 8006222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006226:	d1c5      	bne.n	80061b4 <__swsetup_r+0x24>
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	0799      	lsls	r1, r3, #30
 800622c:	bf58      	it	pl
 800622e:	6962      	ldrpl	r2, [r4, #20]
 8006230:	60a2      	str	r2, [r4, #8]
 8006232:	e7f4      	b.n	800621e <__swsetup_r+0x8e>
 8006234:	2000      	movs	r0, #0
 8006236:	e7f7      	b.n	8006228 <__swsetup_r+0x98>
 8006238:	2000001c 	.word	0x2000001c

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <_close_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_close_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fa fef1 	bl	800103e <_close>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_close_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_close_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	200003b4 	.word	0x200003b4

0800626c <_lseek_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	@ (800628c <_lseek_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fa ff06 	bl	800108c <_lseek>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_lseek_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_lseek_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	200003b4 	.word	0x200003b4

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_read_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fa fe94 	bl	8000fcc <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	200003b4 	.word	0x200003b4

080062b4 <_write_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	@ (80062d4 <_write_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fa fe9f 	bl	8001006 <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_write_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_write_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	200003b4 	.word	0x200003b4

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	@ (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2000001c 	.word	0x2000001c

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4d0d      	ldr	r5, [pc, #52]	@ (800631c <__libc_init_array+0x38>)
 80062e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006320 <__libc_init_array+0x3c>)
 80062ea:	1b64      	subs	r4, r4, r5
 80062ec:	10a4      	asrs	r4, r4, #2
 80062ee:	2600      	movs	r6, #0
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006324 <__libc_init_array+0x40>)
 80062f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006328 <__libc_init_array+0x44>)
 80062f8:	f000 fd24 	bl	8006d44 <_init>
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	2600      	movs	r6, #0
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	08006f84 	.word	0x08006f84
 8006320:	08006f84 	.word	0x08006f84
 8006324:	08006f84 	.word	0x08006f84
 8006328:	08006f88 	.word	0x08006f88

0800632c <__retarget_lock_init_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_acquire_recursive>:
 800632e:	4770      	bx	lr

08006330 <__retarget_lock_release_recursive>:
 8006330:	4770      	bx	lr
	...

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d041      	beq.n	80063c0 <_free_r+0x8c>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 f8e0 	bl	800650c <__malloc_lock>
 800634c:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <_free_r+0x90>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	b933      	cbnz	r3, 8006360 <_free_r+0x2c>
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	6014      	str	r4, [r2, #0]
 8006356:	4628      	mov	r0, r5
 8006358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635c:	f000 b8dc 	b.w	8006518 <__malloc_unlock>
 8006360:	42a3      	cmp	r3, r4
 8006362:	d908      	bls.n	8006376 <_free_r+0x42>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	1821      	adds	r1, r4, r0
 8006368:	428b      	cmp	r3, r1
 800636a:	bf01      	itttt	eq
 800636c:	6819      	ldreq	r1, [r3, #0]
 800636e:	685b      	ldreq	r3, [r3, #4]
 8006370:	1809      	addeq	r1, r1, r0
 8006372:	6021      	streq	r1, [r4, #0]
 8006374:	e7ed      	b.n	8006352 <_free_r+0x1e>
 8006376:	461a      	mov	r2, r3
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	b10b      	cbz	r3, 8006380 <_free_r+0x4c>
 800637c:	42a3      	cmp	r3, r4
 800637e:	d9fa      	bls.n	8006376 <_free_r+0x42>
 8006380:	6811      	ldr	r1, [r2, #0]
 8006382:	1850      	adds	r0, r2, r1
 8006384:	42a0      	cmp	r0, r4
 8006386:	d10b      	bne.n	80063a0 <_free_r+0x6c>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	4401      	add	r1, r0
 800638c:	1850      	adds	r0, r2, r1
 800638e:	4283      	cmp	r3, r0
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	d1e0      	bne.n	8006356 <_free_r+0x22>
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	6053      	str	r3, [r2, #4]
 800639a:	4408      	add	r0, r1
 800639c:	6010      	str	r0, [r2, #0]
 800639e:	e7da      	b.n	8006356 <_free_r+0x22>
 80063a0:	d902      	bls.n	80063a8 <_free_r+0x74>
 80063a2:	230c      	movs	r3, #12
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	e7d6      	b.n	8006356 <_free_r+0x22>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf04      	itt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	6063      	str	r3, [r4, #4]
 80063b6:	bf04      	itt	eq
 80063b8:	1809      	addeq	r1, r1, r0
 80063ba:	6021      	streq	r1, [r4, #0]
 80063bc:	6054      	str	r4, [r2, #4]
 80063be:	e7ca      	b.n	8006356 <_free_r+0x22>
 80063c0:	bd38      	pop	{r3, r4, r5, pc}
 80063c2:	bf00      	nop
 80063c4:	200003c0 	.word	0x200003c0

080063c8 <sbrk_aligned>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006408 <sbrk_aligned+0x40>)
 80063cc:	460c      	mov	r4, r1
 80063ce:	6831      	ldr	r1, [r6, #0]
 80063d0:	4605      	mov	r5, r0
 80063d2:	b911      	cbnz	r1, 80063da <sbrk_aligned+0x12>
 80063d4:	f000 fca6 	bl	8006d24 <_sbrk_r>
 80063d8:	6030      	str	r0, [r6, #0]
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fca1 	bl	8006d24 <_sbrk_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d103      	bne.n	80063ee <sbrk_aligned+0x26>
 80063e6:	f04f 34ff 	mov.w	r4, #4294967295
 80063ea:	4620      	mov	r0, r4
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	1cc4      	adds	r4, r0, #3
 80063f0:	f024 0403 	bic.w	r4, r4, #3
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d0f8      	beq.n	80063ea <sbrk_aligned+0x22>
 80063f8:	1a21      	subs	r1, r4, r0
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fc92 	bl	8006d24 <_sbrk_r>
 8006400:	3001      	adds	r0, #1
 8006402:	d1f2      	bne.n	80063ea <sbrk_aligned+0x22>
 8006404:	e7ef      	b.n	80063e6 <sbrk_aligned+0x1e>
 8006406:	bf00      	nop
 8006408:	200003bc 	.word	0x200003bc

0800640c <_malloc_r>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	1ccd      	adds	r5, r1, #3
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	2d00      	cmp	r5, #0
 8006420:	4606      	mov	r6, r0
 8006422:	db01      	blt.n	8006428 <_malloc_r+0x1c>
 8006424:	42a9      	cmp	r1, r5
 8006426:	d904      	bls.n	8006432 <_malloc_r+0x26>
 8006428:	230c      	movs	r3, #12
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	2000      	movs	r0, #0
 800642e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006508 <_malloc_r+0xfc>
 8006436:	f000 f869 	bl	800650c <__malloc_lock>
 800643a:	f8d8 3000 	ldr.w	r3, [r8]
 800643e:	461c      	mov	r4, r3
 8006440:	bb44      	cbnz	r4, 8006494 <_malloc_r+0x88>
 8006442:	4629      	mov	r1, r5
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ffbf 	bl	80063c8 <sbrk_aligned>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	4604      	mov	r4, r0
 800644e:	d158      	bne.n	8006502 <_malloc_r+0xf6>
 8006450:	f8d8 4000 	ldr.w	r4, [r8]
 8006454:	4627      	mov	r7, r4
 8006456:	2f00      	cmp	r7, #0
 8006458:	d143      	bne.n	80064e2 <_malloc_r+0xd6>
 800645a:	2c00      	cmp	r4, #0
 800645c:	d04b      	beq.n	80064f6 <_malloc_r+0xea>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	4639      	mov	r1, r7
 8006462:	4630      	mov	r0, r6
 8006464:	eb04 0903 	add.w	r9, r4, r3
 8006468:	f000 fc5c 	bl	8006d24 <_sbrk_r>
 800646c:	4581      	cmp	r9, r0
 800646e:	d142      	bne.n	80064f6 <_malloc_r+0xea>
 8006470:	6821      	ldr	r1, [r4, #0]
 8006472:	1a6d      	subs	r5, r5, r1
 8006474:	4629      	mov	r1, r5
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ffa6 	bl	80063c8 <sbrk_aligned>
 800647c:	3001      	adds	r0, #1
 800647e:	d03a      	beq.n	80064f6 <_malloc_r+0xea>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	442b      	add	r3, r5
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	f8d8 3000 	ldr.w	r3, [r8]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	bb62      	cbnz	r2, 80064e8 <_malloc_r+0xdc>
 800648e:	f8c8 7000 	str.w	r7, [r8]
 8006492:	e00f      	b.n	80064b4 <_malloc_r+0xa8>
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	1b52      	subs	r2, r2, r5
 8006498:	d420      	bmi.n	80064dc <_malloc_r+0xd0>
 800649a:	2a0b      	cmp	r2, #11
 800649c:	d917      	bls.n	80064ce <_malloc_r+0xc2>
 800649e:	1961      	adds	r1, r4, r5
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	6025      	str	r5, [r4, #0]
 80064a4:	bf18      	it	ne
 80064a6:	6059      	strne	r1, [r3, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	bf08      	it	eq
 80064ac:	f8c8 1000 	streq.w	r1, [r8]
 80064b0:	5162      	str	r2, [r4, r5]
 80064b2:	604b      	str	r3, [r1, #4]
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f82f 	bl	8006518 <__malloc_unlock>
 80064ba:	f104 000b 	add.w	r0, r4, #11
 80064be:	1d23      	adds	r3, r4, #4
 80064c0:	f020 0007 	bic.w	r0, r0, #7
 80064c4:	1ac2      	subs	r2, r0, r3
 80064c6:	bf1c      	itt	ne
 80064c8:	1a1b      	subne	r3, r3, r0
 80064ca:	50a3      	strne	r3, [r4, r2]
 80064cc:	e7af      	b.n	800642e <_malloc_r+0x22>
 80064ce:	6862      	ldr	r2, [r4, #4]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	bf0c      	ite	eq
 80064d4:	f8c8 2000 	streq.w	r2, [r8]
 80064d8:	605a      	strne	r2, [r3, #4]
 80064da:	e7eb      	b.n	80064b4 <_malloc_r+0xa8>
 80064dc:	4623      	mov	r3, r4
 80064de:	6864      	ldr	r4, [r4, #4]
 80064e0:	e7ae      	b.n	8006440 <_malloc_r+0x34>
 80064e2:	463c      	mov	r4, r7
 80064e4:	687f      	ldr	r7, [r7, #4]
 80064e6:	e7b6      	b.n	8006456 <_malloc_r+0x4a>
 80064e8:	461a      	mov	r2, r3
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d1fb      	bne.n	80064e8 <_malloc_r+0xdc>
 80064f0:	2300      	movs	r3, #0
 80064f2:	6053      	str	r3, [r2, #4]
 80064f4:	e7de      	b.n	80064b4 <_malloc_r+0xa8>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 f80c 	bl	8006518 <__malloc_unlock>
 8006500:	e794      	b.n	800642c <_malloc_r+0x20>
 8006502:	6005      	str	r5, [r0, #0]
 8006504:	e7d6      	b.n	80064b4 <_malloc_r+0xa8>
 8006506:	bf00      	nop
 8006508:	200003c0 	.word	0x200003c0

0800650c <__malloc_lock>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__malloc_lock+0x8>)
 800650e:	f7ff bf0e 	b.w	800632e <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	200003b8 	.word	0x200003b8

08006518 <__malloc_unlock>:
 8006518:	4801      	ldr	r0, [pc, #4]	@ (8006520 <__malloc_unlock+0x8>)
 800651a:	f7ff bf09 	b.w	8006330 <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	200003b8 	.word	0x200003b8

08006524 <__sfputc_r>:
 8006524:	6893      	ldr	r3, [r2, #8]
 8006526:	3b01      	subs	r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	b410      	push	{r4}
 800652c:	6093      	str	r3, [r2, #8]
 800652e:	da08      	bge.n	8006542 <__sfputc_r+0x1e>
 8006530:	6994      	ldr	r4, [r2, #24]
 8006532:	42a3      	cmp	r3, r4
 8006534:	db01      	blt.n	800653a <__sfputc_r+0x16>
 8006536:	290a      	cmp	r1, #10
 8006538:	d103      	bne.n	8006542 <__sfputc_r+0x1e>
 800653a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800653e:	f7ff bde8 	b.w	8006112 <__swbuf_r>
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	1c58      	adds	r0, r3, #1
 8006546:	6010      	str	r0, [r2, #0]
 8006548:	7019      	strb	r1, [r3, #0]
 800654a:	4608      	mov	r0, r1
 800654c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006550:	4770      	bx	lr

08006552 <__sfputs_r>:
 8006552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	4614      	mov	r4, r2
 800655a:	18d5      	adds	r5, r2, r3
 800655c:	42ac      	cmp	r4, r5
 800655e:	d101      	bne.n	8006564 <__sfputs_r+0x12>
 8006560:	2000      	movs	r0, #0
 8006562:	e007      	b.n	8006574 <__sfputs_r+0x22>
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	463a      	mov	r2, r7
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ffda 	bl	8006524 <__sfputc_r>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d1f3      	bne.n	800655c <__sfputs_r+0xa>
 8006574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006578 <_vfiprintf_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	460d      	mov	r5, r1
 800657e:	b09d      	sub	sp, #116	@ 0x74
 8006580:	4614      	mov	r4, r2
 8006582:	4698      	mov	r8, r3
 8006584:	4606      	mov	r6, r0
 8006586:	b118      	cbz	r0, 8006590 <_vfiprintf_r+0x18>
 8006588:	6a03      	ldr	r3, [r0, #32]
 800658a:	b90b      	cbnz	r3, 8006590 <_vfiprintf_r+0x18>
 800658c:	f7ff fcd8 	bl	8005f40 <__sinit>
 8006590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006592:	07d9      	lsls	r1, r3, #31
 8006594:	d405      	bmi.n	80065a2 <_vfiprintf_r+0x2a>
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	059a      	lsls	r2, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_vfiprintf_r+0x2a>
 800659c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800659e:	f7ff fec6 	bl	800632e <__retarget_lock_acquire_recursive>
 80065a2:	89ab      	ldrh	r3, [r5, #12]
 80065a4:	071b      	lsls	r3, r3, #28
 80065a6:	d501      	bpl.n	80065ac <_vfiprintf_r+0x34>
 80065a8:	692b      	ldr	r3, [r5, #16]
 80065aa:	b99b      	cbnz	r3, 80065d4 <_vfiprintf_r+0x5c>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff fdee 	bl	8006190 <__swsetup_r>
 80065b4:	b170      	cbz	r0, 80065d4 <_vfiprintf_r+0x5c>
 80065b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065b8:	07dc      	lsls	r4, r3, #31
 80065ba:	d504      	bpl.n	80065c6 <_vfiprintf_r+0x4e>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	b01d      	add	sp, #116	@ 0x74
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	0598      	lsls	r0, r3, #22
 80065ca:	d4f7      	bmi.n	80065bc <_vfiprintf_r+0x44>
 80065cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ce:	f7ff feaf 	bl	8006330 <__retarget_lock_release_recursive>
 80065d2:	e7f3      	b.n	80065bc <_vfiprintf_r+0x44>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d8:	2320      	movs	r3, #32
 80065da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065de:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e2:	2330      	movs	r3, #48	@ 0x30
 80065e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006794 <_vfiprintf_r+0x21c>
 80065e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065ec:	f04f 0901 	mov.w	r9, #1
 80065f0:	4623      	mov	r3, r4
 80065f2:	469a      	mov	sl, r3
 80065f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f8:	b10a      	cbz	r2, 80065fe <_vfiprintf_r+0x86>
 80065fa:	2a25      	cmp	r2, #37	@ 0x25
 80065fc:	d1f9      	bne.n	80065f2 <_vfiprintf_r+0x7a>
 80065fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006602:	d00b      	beq.n	800661c <_vfiprintf_r+0xa4>
 8006604:	465b      	mov	r3, fp
 8006606:	4622      	mov	r2, r4
 8006608:	4629      	mov	r1, r5
 800660a:	4630      	mov	r0, r6
 800660c:	f7ff ffa1 	bl	8006552 <__sfputs_r>
 8006610:	3001      	adds	r0, #1
 8006612:	f000 80a7 	beq.w	8006764 <_vfiprintf_r+0x1ec>
 8006616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006618:	445a      	add	r2, fp
 800661a:	9209      	str	r2, [sp, #36]	@ 0x24
 800661c:	f89a 3000 	ldrb.w	r3, [sl]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 809f 	beq.w	8006764 <_vfiprintf_r+0x1ec>
 8006626:	2300      	movs	r3, #0
 8006628:	f04f 32ff 	mov.w	r2, #4294967295
 800662c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006630:	f10a 0a01 	add.w	sl, sl, #1
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800663c:	931a      	str	r3, [sp, #104]	@ 0x68
 800663e:	4654      	mov	r4, sl
 8006640:	2205      	movs	r2, #5
 8006642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006646:	4853      	ldr	r0, [pc, #332]	@ (8006794 <_vfiprintf_r+0x21c>)
 8006648:	f7f9 fdfa 	bl	8000240 <memchr>
 800664c:	9a04      	ldr	r2, [sp, #16]
 800664e:	b9d8      	cbnz	r0, 8006688 <_vfiprintf_r+0x110>
 8006650:	06d1      	lsls	r1, r2, #27
 8006652:	bf44      	itt	mi
 8006654:	2320      	movmi	r3, #32
 8006656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800665a:	0713      	lsls	r3, r2, #28
 800665c:	bf44      	itt	mi
 800665e:	232b      	movmi	r3, #43	@ 0x2b
 8006660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006664:	f89a 3000 	ldrb.w	r3, [sl]
 8006668:	2b2a      	cmp	r3, #42	@ 0x2a
 800666a:	d015      	beq.n	8006698 <_vfiprintf_r+0x120>
 800666c:	9a07      	ldr	r2, [sp, #28]
 800666e:	4654      	mov	r4, sl
 8006670:	2000      	movs	r0, #0
 8006672:	f04f 0c0a 	mov.w	ip, #10
 8006676:	4621      	mov	r1, r4
 8006678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800667c:	3b30      	subs	r3, #48	@ 0x30
 800667e:	2b09      	cmp	r3, #9
 8006680:	d94b      	bls.n	800671a <_vfiprintf_r+0x1a2>
 8006682:	b1b0      	cbz	r0, 80066b2 <_vfiprintf_r+0x13a>
 8006684:	9207      	str	r2, [sp, #28]
 8006686:	e014      	b.n	80066b2 <_vfiprintf_r+0x13a>
 8006688:	eba0 0308 	sub.w	r3, r0, r8
 800668c:	fa09 f303 	lsl.w	r3, r9, r3
 8006690:	4313      	orrs	r3, r2
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	46a2      	mov	sl, r4
 8006696:	e7d2      	b.n	800663e <_vfiprintf_r+0xc6>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	1d19      	adds	r1, r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	9103      	str	r1, [sp, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfbb      	ittet	lt
 80066a4:	425b      	neglt	r3, r3
 80066a6:	f042 0202 	orrlt.w	r2, r2, #2
 80066aa:	9307      	strge	r3, [sp, #28]
 80066ac:	9307      	strlt	r3, [sp, #28]
 80066ae:	bfb8      	it	lt
 80066b0:	9204      	strlt	r2, [sp, #16]
 80066b2:	7823      	ldrb	r3, [r4, #0]
 80066b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80066b6:	d10a      	bne.n	80066ce <_vfiprintf_r+0x156>
 80066b8:	7863      	ldrb	r3, [r4, #1]
 80066ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80066bc:	d132      	bne.n	8006724 <_vfiprintf_r+0x1ac>
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	1d1a      	adds	r2, r3, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	9203      	str	r2, [sp, #12]
 80066c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066ca:	3402      	adds	r4, #2
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067a4 <_vfiprintf_r+0x22c>
 80066d2:	7821      	ldrb	r1, [r4, #0]
 80066d4:	2203      	movs	r2, #3
 80066d6:	4650      	mov	r0, sl
 80066d8:	f7f9 fdb2 	bl	8000240 <memchr>
 80066dc:	b138      	cbz	r0, 80066ee <_vfiprintf_r+0x176>
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	eba0 000a 	sub.w	r0, r0, sl
 80066e4:	2240      	movs	r2, #64	@ 0x40
 80066e6:	4082      	lsls	r2, r0
 80066e8:	4313      	orrs	r3, r2
 80066ea:	3401      	adds	r4, #1
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f2:	4829      	ldr	r0, [pc, #164]	@ (8006798 <_vfiprintf_r+0x220>)
 80066f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066f8:	2206      	movs	r2, #6
 80066fa:	f7f9 fda1 	bl	8000240 <memchr>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d03f      	beq.n	8006782 <_vfiprintf_r+0x20a>
 8006702:	4b26      	ldr	r3, [pc, #152]	@ (800679c <_vfiprintf_r+0x224>)
 8006704:	bb1b      	cbnz	r3, 800674e <_vfiprintf_r+0x1d6>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	3307      	adds	r3, #7
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	3308      	adds	r3, #8
 8006710:	9303      	str	r3, [sp, #12]
 8006712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006714:	443b      	add	r3, r7
 8006716:	9309      	str	r3, [sp, #36]	@ 0x24
 8006718:	e76a      	b.n	80065f0 <_vfiprintf_r+0x78>
 800671a:	fb0c 3202 	mla	r2, ip, r2, r3
 800671e:	460c      	mov	r4, r1
 8006720:	2001      	movs	r0, #1
 8006722:	e7a8      	b.n	8006676 <_vfiprintf_r+0xfe>
 8006724:	2300      	movs	r3, #0
 8006726:	3401      	adds	r4, #1
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	4619      	mov	r1, r3
 800672c:	f04f 0c0a 	mov.w	ip, #10
 8006730:	4620      	mov	r0, r4
 8006732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006736:	3a30      	subs	r2, #48	@ 0x30
 8006738:	2a09      	cmp	r2, #9
 800673a:	d903      	bls.n	8006744 <_vfiprintf_r+0x1cc>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0c6      	beq.n	80066ce <_vfiprintf_r+0x156>
 8006740:	9105      	str	r1, [sp, #20]
 8006742:	e7c4      	b.n	80066ce <_vfiprintf_r+0x156>
 8006744:	fb0c 2101 	mla	r1, ip, r1, r2
 8006748:	4604      	mov	r4, r0
 800674a:	2301      	movs	r3, #1
 800674c:	e7f0      	b.n	8006730 <_vfiprintf_r+0x1b8>
 800674e:	ab03      	add	r3, sp, #12
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	462a      	mov	r2, r5
 8006754:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <_vfiprintf_r+0x228>)
 8006756:	a904      	add	r1, sp, #16
 8006758:	4630      	mov	r0, r6
 800675a:	f3af 8000 	nop.w
 800675e:	4607      	mov	r7, r0
 8006760:	1c78      	adds	r0, r7, #1
 8006762:	d1d6      	bne.n	8006712 <_vfiprintf_r+0x19a>
 8006764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	d405      	bmi.n	8006776 <_vfiprintf_r+0x1fe>
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	059a      	lsls	r2, r3, #22
 800676e:	d402      	bmi.n	8006776 <_vfiprintf_r+0x1fe>
 8006770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006772:	f7ff fddd 	bl	8006330 <__retarget_lock_release_recursive>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	f53f af1f 	bmi.w	80065bc <_vfiprintf_r+0x44>
 800677e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006780:	e71e      	b.n	80065c0 <_vfiprintf_r+0x48>
 8006782:	ab03      	add	r3, sp, #12
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	462a      	mov	r2, r5
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <_vfiprintf_r+0x228>)
 800678a:	a904      	add	r1, sp, #16
 800678c:	4630      	mov	r0, r6
 800678e:	f000 f879 	bl	8006884 <_printf_i>
 8006792:	e7e4      	b.n	800675e <_vfiprintf_r+0x1e6>
 8006794:	08006f48 	.word	0x08006f48
 8006798:	08006f52 	.word	0x08006f52
 800679c:	00000000 	.word	0x00000000
 80067a0:	08006553 	.word	0x08006553
 80067a4:	08006f4e 	.word	0x08006f4e

080067a8 <_printf_common>:
 80067a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	4616      	mov	r6, r2
 80067ae:	4698      	mov	r8, r3
 80067b0:	688a      	ldr	r2, [r1, #8]
 80067b2:	690b      	ldr	r3, [r1, #16]
 80067b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bfb8      	it	lt
 80067bc:	4613      	movlt	r3, r2
 80067be:	6033      	str	r3, [r6, #0]
 80067c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067c4:	4607      	mov	r7, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	b10a      	cbz	r2, 80067ce <_printf_common+0x26>
 80067ca:	3301      	adds	r3, #1
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	0699      	lsls	r1, r3, #26
 80067d2:	bf42      	ittt	mi
 80067d4:	6833      	ldrmi	r3, [r6, #0]
 80067d6:	3302      	addmi	r3, #2
 80067d8:	6033      	strmi	r3, [r6, #0]
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	f015 0506 	ands.w	r5, r5, #6
 80067e0:	d106      	bne.n	80067f0 <_printf_common+0x48>
 80067e2:	f104 0a19 	add.w	sl, r4, #25
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	6832      	ldr	r2, [r6, #0]
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	dc26      	bgt.n	800683e <_printf_common+0x96>
 80067f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	3b00      	subs	r3, #0
 80067f8:	bf18      	it	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	0692      	lsls	r2, r2, #26
 80067fe:	d42b      	bmi.n	8006858 <_printf_common+0xb0>
 8006800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006804:	4641      	mov	r1, r8
 8006806:	4638      	mov	r0, r7
 8006808:	47c8      	blx	r9
 800680a:	3001      	adds	r0, #1
 800680c:	d01e      	beq.n	800684c <_printf_common+0xa4>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6922      	ldr	r2, [r4, #16]
 8006812:	f003 0306 	and.w	r3, r3, #6
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf02      	ittt	eq
 800681a:	68e5      	ldreq	r5, [r4, #12]
 800681c:	6833      	ldreq	r3, [r6, #0]
 800681e:	1aed      	subeq	r5, r5, r3
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	bf0c      	ite	eq
 8006824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006828:	2500      	movne	r5, #0
 800682a:	4293      	cmp	r3, r2
 800682c:	bfc4      	itt	gt
 800682e:	1a9b      	subgt	r3, r3, r2
 8006830:	18ed      	addgt	r5, r5, r3
 8006832:	2600      	movs	r6, #0
 8006834:	341a      	adds	r4, #26
 8006836:	42b5      	cmp	r5, r6
 8006838:	d11a      	bne.n	8006870 <_printf_common+0xc8>
 800683a:	2000      	movs	r0, #0
 800683c:	e008      	b.n	8006850 <_printf_common+0xa8>
 800683e:	2301      	movs	r3, #1
 8006840:	4652      	mov	r2, sl
 8006842:	4641      	mov	r1, r8
 8006844:	4638      	mov	r0, r7
 8006846:	47c8      	blx	r9
 8006848:	3001      	adds	r0, #1
 800684a:	d103      	bne.n	8006854 <_printf_common+0xac>
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006854:	3501      	adds	r5, #1
 8006856:	e7c6      	b.n	80067e6 <_printf_common+0x3e>
 8006858:	18e1      	adds	r1, r4, r3
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	2030      	movs	r0, #48	@ 0x30
 800685e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006862:	4422      	add	r2, r4
 8006864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800686c:	3302      	adds	r3, #2
 800686e:	e7c7      	b.n	8006800 <_printf_common+0x58>
 8006870:	2301      	movs	r3, #1
 8006872:	4622      	mov	r2, r4
 8006874:	4641      	mov	r1, r8
 8006876:	4638      	mov	r0, r7
 8006878:	47c8      	blx	r9
 800687a:	3001      	adds	r0, #1
 800687c:	d0e6      	beq.n	800684c <_printf_common+0xa4>
 800687e:	3601      	adds	r6, #1
 8006880:	e7d9      	b.n	8006836 <_printf_common+0x8e>
	...

08006884 <_printf_i>:
 8006884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	7e0f      	ldrb	r7, [r1, #24]
 800688a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800688c:	2f78      	cmp	r7, #120	@ 0x78
 800688e:	4691      	mov	r9, r2
 8006890:	4680      	mov	r8, r0
 8006892:	460c      	mov	r4, r1
 8006894:	469a      	mov	sl, r3
 8006896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800689a:	d807      	bhi.n	80068ac <_printf_i+0x28>
 800689c:	2f62      	cmp	r7, #98	@ 0x62
 800689e:	d80a      	bhi.n	80068b6 <_printf_i+0x32>
 80068a0:	2f00      	cmp	r7, #0
 80068a2:	f000 80d2 	beq.w	8006a4a <_printf_i+0x1c6>
 80068a6:	2f58      	cmp	r7, #88	@ 0x58
 80068a8:	f000 80b9 	beq.w	8006a1e <_printf_i+0x19a>
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068b4:	e03a      	b.n	800692c <_printf_i+0xa8>
 80068b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ba:	2b15      	cmp	r3, #21
 80068bc:	d8f6      	bhi.n	80068ac <_printf_i+0x28>
 80068be:	a101      	add	r1, pc, #4	@ (adr r1, 80068c4 <_printf_i+0x40>)
 80068c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068c4:	0800691d 	.word	0x0800691d
 80068c8:	08006931 	.word	0x08006931
 80068cc:	080068ad 	.word	0x080068ad
 80068d0:	080068ad 	.word	0x080068ad
 80068d4:	080068ad 	.word	0x080068ad
 80068d8:	080068ad 	.word	0x080068ad
 80068dc:	08006931 	.word	0x08006931
 80068e0:	080068ad 	.word	0x080068ad
 80068e4:	080068ad 	.word	0x080068ad
 80068e8:	080068ad 	.word	0x080068ad
 80068ec:	080068ad 	.word	0x080068ad
 80068f0:	08006a31 	.word	0x08006a31
 80068f4:	0800695b 	.word	0x0800695b
 80068f8:	080069eb 	.word	0x080069eb
 80068fc:	080068ad 	.word	0x080068ad
 8006900:	080068ad 	.word	0x080068ad
 8006904:	08006a53 	.word	0x08006a53
 8006908:	080068ad 	.word	0x080068ad
 800690c:	0800695b 	.word	0x0800695b
 8006910:	080068ad 	.word	0x080068ad
 8006914:	080068ad 	.word	0x080068ad
 8006918:	080069f3 	.word	0x080069f3
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6032      	str	r2, [r6, #0]
 8006924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800692c:	2301      	movs	r3, #1
 800692e:	e09d      	b.n	8006a6c <_printf_i+0x1e8>
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	6031      	str	r1, [r6, #0]
 8006938:	0606      	lsls	r6, r0, #24
 800693a:	d501      	bpl.n	8006940 <_printf_i+0xbc>
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	e003      	b.n	8006948 <_printf_i+0xc4>
 8006940:	0645      	lsls	r5, r0, #25
 8006942:	d5fb      	bpl.n	800693c <_printf_i+0xb8>
 8006944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006948:	2d00      	cmp	r5, #0
 800694a:	da03      	bge.n	8006954 <_printf_i+0xd0>
 800694c:	232d      	movs	r3, #45	@ 0x2d
 800694e:	426d      	negs	r5, r5
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006954:	4859      	ldr	r0, [pc, #356]	@ (8006abc <_printf_i+0x238>)
 8006956:	230a      	movs	r3, #10
 8006958:	e011      	b.n	800697e <_printf_i+0xfa>
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	0608      	lsls	r0, r1, #24
 8006960:	f853 5b04 	ldr.w	r5, [r3], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0xe8>
 8006966:	0649      	lsls	r1, r1, #25
 8006968:	bf48      	it	mi
 800696a:	b2ad      	uxthmi	r5, r5
 800696c:	2f6f      	cmp	r7, #111	@ 0x6f
 800696e:	4853      	ldr	r0, [pc, #332]	@ (8006abc <_printf_i+0x238>)
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	bf14      	ite	ne
 8006974:	230a      	movne	r3, #10
 8006976:	2308      	moveq	r3, #8
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	60a6      	str	r6, [r4, #8]
 8006982:	2e00      	cmp	r6, #0
 8006984:	bfa2      	ittt	ge
 8006986:	6821      	ldrge	r1, [r4, #0]
 8006988:	f021 0104 	bicge.w	r1, r1, #4
 800698c:	6021      	strge	r1, [r4, #0]
 800698e:	b90d      	cbnz	r5, 8006994 <_printf_i+0x110>
 8006990:	2e00      	cmp	r6, #0
 8006992:	d04b      	beq.n	8006a2c <_printf_i+0x1a8>
 8006994:	4616      	mov	r6, r2
 8006996:	fbb5 f1f3 	udiv	r1, r5, r3
 800699a:	fb03 5711 	mls	r7, r3, r1, r5
 800699e:	5dc7      	ldrb	r7, [r0, r7]
 80069a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a4:	462f      	mov	r7, r5
 80069a6:	42bb      	cmp	r3, r7
 80069a8:	460d      	mov	r5, r1
 80069aa:	d9f4      	bls.n	8006996 <_printf_i+0x112>
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d10b      	bne.n	80069c8 <_printf_i+0x144>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	07df      	lsls	r7, r3, #31
 80069b4:	d508      	bpl.n	80069c8 <_printf_i+0x144>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	6861      	ldr	r1, [r4, #4]
 80069ba:	4299      	cmp	r1, r3
 80069bc:	bfde      	ittt	le
 80069be:	2330      	movle	r3, #48	@ 0x30
 80069c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069c8:	1b92      	subs	r2, r2, r6
 80069ca:	6122      	str	r2, [r4, #16]
 80069cc:	f8cd a000 	str.w	sl, [sp]
 80069d0:	464b      	mov	r3, r9
 80069d2:	aa03      	add	r2, sp, #12
 80069d4:	4621      	mov	r1, r4
 80069d6:	4640      	mov	r0, r8
 80069d8:	f7ff fee6 	bl	80067a8 <_printf_common>
 80069dc:	3001      	adds	r0, #1
 80069de:	d14a      	bne.n	8006a76 <_printf_i+0x1f2>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	b004      	add	sp, #16
 80069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	4833      	ldr	r0, [pc, #204]	@ (8006ac0 <_printf_i+0x23c>)
 80069f4:	2778      	movs	r7, #120	@ 0x78
 80069f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	6831      	ldr	r1, [r6, #0]
 80069fe:	061f      	lsls	r7, r3, #24
 8006a00:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a04:	d402      	bmi.n	8006a0c <_printf_i+0x188>
 8006a06:	065f      	lsls	r7, r3, #25
 8006a08:	bf48      	it	mi
 8006a0a:	b2ad      	uxthmi	r5, r5
 8006a0c:	6031      	str	r1, [r6, #0]
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	bf44      	itt	mi
 8006a12:	f043 0320 	orrmi.w	r3, r3, #32
 8006a16:	6023      	strmi	r3, [r4, #0]
 8006a18:	b11d      	cbz	r5, 8006a22 <_printf_i+0x19e>
 8006a1a:	2310      	movs	r3, #16
 8006a1c:	e7ac      	b.n	8006978 <_printf_i+0xf4>
 8006a1e:	4827      	ldr	r0, [pc, #156]	@ (8006abc <_printf_i+0x238>)
 8006a20:	e7e9      	b.n	80069f6 <_printf_i+0x172>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	f023 0320 	bic.w	r3, r3, #32
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	e7f6      	b.n	8006a1a <_printf_i+0x196>
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	e7bd      	b.n	80069ac <_printf_i+0x128>
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	6825      	ldr	r5, [r4, #0]
 8006a34:	6961      	ldr	r1, [r4, #20]
 8006a36:	1d18      	adds	r0, r3, #4
 8006a38:	6030      	str	r0, [r6, #0]
 8006a3a:	062e      	lsls	r6, r5, #24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0x1c0>
 8006a40:	6019      	str	r1, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <_printf_i+0x1c6>
 8006a44:	0668      	lsls	r0, r5, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0x1bc>
 8006a48:	8019      	strh	r1, [r3, #0]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	4616      	mov	r6, r2
 8006a50:	e7bc      	b.n	80069cc <_printf_i+0x148>
 8006a52:	6833      	ldr	r3, [r6, #0]
 8006a54:	1d1a      	adds	r2, r3, #4
 8006a56:	6032      	str	r2, [r6, #0]
 8006a58:	681e      	ldr	r6, [r3, #0]
 8006a5a:	6862      	ldr	r2, [r4, #4]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7f9 fbee 	bl	8000240 <memchr>
 8006a64:	b108      	cbz	r0, 8006a6a <_printf_i+0x1e6>
 8006a66:	1b80      	subs	r0, r0, r6
 8006a68:	6060      	str	r0, [r4, #4]
 8006a6a:	6863      	ldr	r3, [r4, #4]
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a74:	e7aa      	b.n	80069cc <_printf_i+0x148>
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	47d0      	blx	sl
 8006a80:	3001      	adds	r0, #1
 8006a82:	d0ad      	beq.n	80069e0 <_printf_i+0x15c>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	079b      	lsls	r3, r3, #30
 8006a88:	d413      	bmi.n	8006ab2 <_printf_i+0x22e>
 8006a8a:	68e0      	ldr	r0, [r4, #12]
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	4298      	cmp	r0, r3
 8006a90:	bfb8      	it	lt
 8006a92:	4618      	movlt	r0, r3
 8006a94:	e7a6      	b.n	80069e4 <_printf_i+0x160>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	47d0      	blx	sl
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d09d      	beq.n	80069e0 <_printf_i+0x15c>
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	9903      	ldr	r1, [sp, #12]
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dcf2      	bgt.n	8006a96 <_printf_i+0x212>
 8006ab0:	e7eb      	b.n	8006a8a <_printf_i+0x206>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	f104 0619 	add.w	r6, r4, #25
 8006ab8:	e7f5      	b.n	8006aa6 <_printf_i+0x222>
 8006aba:	bf00      	nop
 8006abc:	08006f59 	.word	0x08006f59
 8006ac0:	08006f6a 	.word	0x08006f6a

08006ac4 <__sflush_r>:
 8006ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006acc:	0716      	lsls	r6, r2, #28
 8006ace:	4605      	mov	r5, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	d454      	bmi.n	8006b7e <__sflush_r+0xba>
 8006ad4:	684b      	ldr	r3, [r1, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dc02      	bgt.n	8006ae0 <__sflush_r+0x1c>
 8006ada:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dd48      	ble.n	8006b72 <__sflush_r+0xae>
 8006ae0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	d045      	beq.n	8006b72 <__sflush_r+0xae>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006aec:	682f      	ldr	r7, [r5, #0]
 8006aee:	6a21      	ldr	r1, [r4, #32]
 8006af0:	602b      	str	r3, [r5, #0]
 8006af2:	d030      	beq.n	8006b56 <__sflush_r+0x92>
 8006af4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	0759      	lsls	r1, r3, #29
 8006afa:	d505      	bpl.n	8006b08 <__sflush_r+0x44>
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b02:	b10b      	cbz	r3, 8006b08 <__sflush_r+0x44>
 8006b04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	2300      	movs	r3, #0
 8006b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b0c:	6a21      	ldr	r1, [r4, #32]
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b0      	blx	r6
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	d106      	bne.n	8006b26 <__sflush_r+0x62>
 8006b18:	6829      	ldr	r1, [r5, #0]
 8006b1a:	291d      	cmp	r1, #29
 8006b1c:	d82b      	bhi.n	8006b76 <__sflush_r+0xb2>
 8006b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc8 <__sflush_r+0x104>)
 8006b20:	410a      	asrs	r2, r1
 8006b22:	07d6      	lsls	r6, r2, #31
 8006b24:	d427      	bmi.n	8006b76 <__sflush_r+0xb2>
 8006b26:	2200      	movs	r2, #0
 8006b28:	6062      	str	r2, [r4, #4]
 8006b2a:	04d9      	lsls	r1, r3, #19
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	6022      	str	r2, [r4, #0]
 8006b30:	d504      	bpl.n	8006b3c <__sflush_r+0x78>
 8006b32:	1c42      	adds	r2, r0, #1
 8006b34:	d101      	bne.n	8006b3a <__sflush_r+0x76>
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	b903      	cbnz	r3, 8006b3c <__sflush_r+0x78>
 8006b3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b3e:	602f      	str	r7, [r5, #0]
 8006b40:	b1b9      	cbz	r1, 8006b72 <__sflush_r+0xae>
 8006b42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b46:	4299      	cmp	r1, r3
 8006b48:	d002      	beq.n	8006b50 <__sflush_r+0x8c>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7ff fbf2 	bl	8006334 <_free_r>
 8006b50:	2300      	movs	r3, #0
 8006b52:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b54:	e00d      	b.n	8006b72 <__sflush_r+0xae>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b0      	blx	r6
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	1c50      	adds	r0, r2, #1
 8006b60:	d1c9      	bne.n	8006af6 <__sflush_r+0x32>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0c6      	beq.n	8006af6 <__sflush_r+0x32>
 8006b68:	2b1d      	cmp	r3, #29
 8006b6a:	d001      	beq.n	8006b70 <__sflush_r+0xac>
 8006b6c:	2b16      	cmp	r3, #22
 8006b6e:	d11e      	bne.n	8006bae <__sflush_r+0xea>
 8006b70:	602f      	str	r7, [r5, #0]
 8006b72:	2000      	movs	r0, #0
 8006b74:	e022      	b.n	8006bbc <__sflush_r+0xf8>
 8006b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	e01b      	b.n	8006bb6 <__sflush_r+0xf2>
 8006b7e:	690f      	ldr	r7, [r1, #16]
 8006b80:	2f00      	cmp	r7, #0
 8006b82:	d0f6      	beq.n	8006b72 <__sflush_r+0xae>
 8006b84:	0793      	lsls	r3, r2, #30
 8006b86:	680e      	ldr	r6, [r1, #0]
 8006b88:	bf08      	it	eq
 8006b8a:	694b      	ldreq	r3, [r1, #20]
 8006b8c:	600f      	str	r7, [r1, #0]
 8006b8e:	bf18      	it	ne
 8006b90:	2300      	movne	r3, #0
 8006b92:	eba6 0807 	sub.w	r8, r6, r7
 8006b96:	608b      	str	r3, [r1, #8]
 8006b98:	f1b8 0f00 	cmp.w	r8, #0
 8006b9c:	dde9      	ble.n	8006b72 <__sflush_r+0xae>
 8006b9e:	6a21      	ldr	r1, [r4, #32]
 8006ba0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ba2:	4643      	mov	r3, r8
 8006ba4:	463a      	mov	r2, r7
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b0      	blx	r6
 8006baa:	2800      	cmp	r0, #0
 8006bac:	dc08      	bgt.n	8006bc0 <__sflush_r+0xfc>
 8006bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc0:	4407      	add	r7, r0
 8006bc2:	eba8 0800 	sub.w	r8, r8, r0
 8006bc6:	e7e7      	b.n	8006b98 <__sflush_r+0xd4>
 8006bc8:	dfbffffe 	.word	0xdfbffffe

08006bcc <_fflush_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	b913      	cbnz	r3, 8006bdc <_fflush_r+0x10>
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	4628      	mov	r0, r5
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	b118      	cbz	r0, 8006be6 <_fflush_r+0x1a>
 8006bde:	6a03      	ldr	r3, [r0, #32]
 8006be0:	b90b      	cbnz	r3, 8006be6 <_fflush_r+0x1a>
 8006be2:	f7ff f9ad 	bl	8005f40 <__sinit>
 8006be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f3      	beq.n	8006bd6 <_fflush_r+0xa>
 8006bee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bf0:	07d0      	lsls	r0, r2, #31
 8006bf2:	d404      	bmi.n	8006bfe <_fflush_r+0x32>
 8006bf4:	0599      	lsls	r1, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_fflush_r+0x32>
 8006bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfa:	f7ff fb98 	bl	800632e <__retarget_lock_acquire_recursive>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	4621      	mov	r1, r4
 8006c02:	f7ff ff5f 	bl	8006ac4 <__sflush_r>
 8006c06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c08:	07da      	lsls	r2, r3, #31
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	d4e4      	bmi.n	8006bd8 <_fflush_r+0xc>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	059b      	lsls	r3, r3, #22
 8006c12:	d4e1      	bmi.n	8006bd8 <_fflush_r+0xc>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f7ff fb8b 	bl	8006330 <__retarget_lock_release_recursive>
 8006c1a:	e7dd      	b.n	8006bd8 <_fflush_r+0xc>

08006c1c <__swhatbuf_r>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	460c      	mov	r4, r1
 8006c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c24:	2900      	cmp	r1, #0
 8006c26:	b096      	sub	sp, #88	@ 0x58
 8006c28:	4615      	mov	r5, r2
 8006c2a:	461e      	mov	r6, r3
 8006c2c:	da0d      	bge.n	8006c4a <__swhatbuf_r+0x2e>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c34:	f04f 0100 	mov.w	r1, #0
 8006c38:	bf14      	ite	ne
 8006c3a:	2340      	movne	r3, #64	@ 0x40
 8006c3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c40:	2000      	movs	r0, #0
 8006c42:	6031      	str	r1, [r6, #0]
 8006c44:	602b      	str	r3, [r5, #0]
 8006c46:	b016      	add	sp, #88	@ 0x58
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	466a      	mov	r2, sp
 8006c4c:	f000 f848 	bl	8006ce0 <_fstat_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	dbec      	blt.n	8006c2e <__swhatbuf_r+0x12>
 8006c54:	9901      	ldr	r1, [sp, #4]
 8006c56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c5e:	4259      	negs	r1, r3
 8006c60:	4159      	adcs	r1, r3
 8006c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c66:	e7eb      	b.n	8006c40 <__swhatbuf_r+0x24>

08006c68 <__smakebuf_r>:
 8006c68:	898b      	ldrh	r3, [r1, #12]
 8006c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c6c:	079d      	lsls	r5, r3, #30
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	d507      	bpl.n	8006c84 <__smakebuf_r+0x1c>
 8006c74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	6163      	str	r3, [r4, #20]
 8006c80:	b003      	add	sp, #12
 8006c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c84:	ab01      	add	r3, sp, #4
 8006c86:	466a      	mov	r2, sp
 8006c88:	f7ff ffc8 	bl	8006c1c <__swhatbuf_r>
 8006c8c:	9f00      	ldr	r7, [sp, #0]
 8006c8e:	4605      	mov	r5, r0
 8006c90:	4639      	mov	r1, r7
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff fbba 	bl	800640c <_malloc_r>
 8006c98:	b948      	cbnz	r0, 8006cae <__smakebuf_r+0x46>
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	059a      	lsls	r2, r3, #22
 8006ca0:	d4ee      	bmi.n	8006c80 <__smakebuf_r+0x18>
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	f043 0302 	orr.w	r3, r3, #2
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	e7e2      	b.n	8006c74 <__smakebuf_r+0xc>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	6020      	str	r0, [r4, #0]
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cbe:	b15b      	cbz	r3, 8006cd8 <__smakebuf_r+0x70>
 8006cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 f81d 	bl	8006d04 <_isatty_r>
 8006cca:	b128      	cbz	r0, 8006cd8 <__smakebuf_r+0x70>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	f023 0303 	bic.w	r3, r3, #3
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	431d      	orrs	r5, r3
 8006cdc:	81a5      	strh	r5, [r4, #12]
 8006cde:	e7cf      	b.n	8006c80 <__smakebuf_r+0x18>

08006ce0 <_fstat_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d07      	ldr	r5, [pc, #28]	@ (8006d00 <_fstat_r+0x20>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	602b      	str	r3, [r5, #0]
 8006cee:	f7fa f9b2 	bl	8001056 <_fstat>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d102      	bne.n	8006cfc <_fstat_r+0x1c>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	b103      	cbz	r3, 8006cfc <_fstat_r+0x1c>
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	200003b4 	.word	0x200003b4

08006d04 <_isatty_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d06      	ldr	r5, [pc, #24]	@ (8006d20 <_isatty_r+0x1c>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fa f9b1 	bl	8001076 <_isatty>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_isatty_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_isatty_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	200003b4 	.word	0x200003b4

08006d24 <_sbrk_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d06      	ldr	r5, [pc, #24]	@ (8006d40 <_sbrk_r+0x1c>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fa f9cc 	bl	80010cc <_sbrk>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_sbrk_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_sbrk_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	200003b4 	.word	0x200003b4

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
