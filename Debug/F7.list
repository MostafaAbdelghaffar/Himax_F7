
F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad0  08005ad0  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad0  08005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad8  08005ad8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005ae0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000006c  08005b4c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005b4c  00007340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef19  00000000  00000000  0000709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002345  00000000  00000000  00015fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000182f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6d  00000000  00000000  000191b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002892c  00000000  00000000  00019d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012883  00000000  00000000  00042651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97be  00000000  00000000  00054ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  0014e6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00152ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000006c 	.word	0x2000006c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a90 	.word	0x08005a90

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000070 	.word	0x20000070
 8000234:	08005a90 	.word	0x08005a90

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HM01B0_WriteRegister>:

#include "hm01b0.h"

// Function to write a value to a specific register
HAL_StatusTypeDef HM01B0_WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t reg_addr, uint8_t reg_value)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
 8000534:	4613      	mov	r3, r2
 8000536:	707b      	strb	r3, [r7, #1]

	uint8_t data[3] = {reg_addr >> 8, reg_addr & 0xFF, reg_value};
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	0a1b      	lsrs	r3, r3, #8
 800053c:	b29b      	uxth	r3, r3
 800053e:	b2db      	uxtb	r3, r3
 8000540:	733b      	strb	r3, [r7, #12]
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	787b      	ldrb	r3, [r7, #1]
 800054a:	73bb      	strb	r3, [r7, #14]
//    data[0] = reg_addr >> 8; // MSB of register address
//    data[1] = reg_addr & 0xFF;        // LSB of register address
//    data[2] = reg_value;               // Register value

    // Transmit the register address and value using I2C
    return HAL_I2C_Master_Transmit(hi2c, HIMAX_I2C_ADDR, data, sizeof(data), HAL_MAX_DELAY);
 800054c:	f107 020c 	add.w	r2, r7, #12
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2303      	movs	r3, #3
 8000558:	2124      	movs	r1, #36	@ 0x24
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f001 fd3c 	bl	8001fd8 <HAL_I2C_Master_Transmit>
 8000560:	4603      	mov	r3, r0

}
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <HM01B0_ReadRegister>:

// Function to read a value from a specific register

HAL_StatusTypeDef HM01B0_ReadRegister(I2C_HandleTypeDef *hi2c, uint16_t reg_addr, uint8_t* reg_value)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b088      	sub	sp, #32
 800056e:	af02      	add	r7, sp, #8
 8000570:	60f8      	str	r0, [r7, #12]
 8000572:	460b      	mov	r3, r1
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	817b      	strh	r3, [r7, #10]

    uint8_t addr[2]; // Array to hold the register address
    addr[0] = (reg_addr >> 8) & 0xFF; // MSB of register address
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	b29b      	uxth	r3, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	753b      	strb	r3, [r7, #20]
    addr[1] = reg_addr & 0xFF;        // LSB of register address
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	757b      	strb	r3, [r7, #21]

    // Transmit the register address
    if (HAL_I2C_Master_Transmit(hi2c, HIMAX_I2C_ADDR, addr, sizeof(addr), HAL_MAX_DELAY) != HAL_OK) {
 8000588:	f107 0214 	add.w	r2, r7, #20
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	2124      	movs	r1, #36	@ 0x24
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f001 fd1e 	bl	8001fd8 <HAL_I2C_Master_Transmit>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <HM01B0_ReadRegister+0x3c>
        return HAL_ERROR; // Error in transmission
 80005a2:	2301      	movs	r3, #1
 80005a4:	e009      	b.n	80005ba <HM01B0_ReadRegister+0x50>
    }

    // Receive the register value
    return HAL_I2C_Master_Receive(hi2c, HIMAX_I2C_ADDR, reg_value, 1, HAL_MAX_DELAY);
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	2124      	movs	r1, #36	@ 0x24
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f001 fe28 	bl	8002208 <HAL_I2C_Master_Receive>
 80005b8:	4603      	mov	r3, r0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <Blue_blink>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Blue_blink(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	  HAL_Delay(1000); // Delay for 1 second
 80005c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005cc:	f000 fd9c 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Blue_Pin); // Toggle the LED
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	4806      	ldr	r0, [pc, #24]	@ (80005ec <Blue_blink+0x28>)
 80005d4:	f001 fc25 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); // Delay for 1 second
 80005d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005dc:	f000 fd94 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Blue_Pin); // Toggle the LED
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	4802      	ldr	r0, [pc, #8]	@ (80005ec <Blue_blink+0x28>)
 80005e4:	f001 fc1d 	bl	8001e22 <HAL_GPIO_TogglePin>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020400 	.word	0x40020400

080005f0 <Green_blink>:
void Green_blink(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	  HAL_Delay(100); // Delay for 1 second
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f000 fd87 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Green_Pin); // Toggle the LED
 80005fa:	2101      	movs	r1, #1
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <Green_blink+0x24>)
 80005fe:	f001 fc10 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(100); // Delay for 1 second
 8000602:	2064      	movs	r0, #100	@ 0x64
 8000604:	f000 fd80 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Green_Pin); // Toggle the LED
 8000608:	2101      	movs	r1, #1
 800060a:	4802      	ldr	r0, [pc, #8]	@ (8000614 <Green_blink+0x24>)
 800060c:	f001 fc09 	bl	8001e22 <HAL_GPIO_TogglePin>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020400 	.word	0x40020400

08000618 <Blink_once>:



void Blink_once(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	  HAL_Delay(500); // Delay for 1 second
 800061c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000620:	f000 fd72 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <Blink_once+0x2c>)
 800062a:	f001 fbfa 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(500); // Delay for 1 second
 800062e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000632:	f000 fd69 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	4802      	ldr	r0, [pc, #8]	@ (8000644 <Blink_once+0x2c>)
 800063c:	f001 fbf1 	bl	8001e22 <HAL_GPIO_TogglePin>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020400 	.word	0x40020400

08000648 <Blink_twice>:


void Blink_twice(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	  HAL_Delay(1000); // Delay for 1 second
 800064c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000650:	f000 fd5a 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	480f      	ldr	r0, [pc, #60]	@ (8000698 <Blink_twice+0x50>)
 800065a:	f001 fbe2 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); // Delay for 1 second
 800065e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000662:	f000 fd51 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066a:	480b      	ldr	r0, [pc, #44]	@ (8000698 <Blink_twice+0x50>)
 800066c:	f001 fbd9 	bl	8001e22 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000); // Delay for 1 second
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f000 fd48 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000678:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067c:	4806      	ldr	r0, [pc, #24]	@ (8000698 <Blink_twice+0x50>)
 800067e:	f001 fbd0 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); // Delay for 1 second
 8000682:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000686:	f000 fd3f 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 800068a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068e:	4802      	ldr	r0, [pc, #8]	@ (8000698 <Blink_twice+0x50>)
 8000690:	f001 fbc7 	bl	8001e22 <HAL_GPIO_TogglePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020400 	.word	0x40020400

0800069c <HM01B0_Test>:

void HM01B0_Test(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	uint8_t value_to_write = 0x03;
 80006a2:	2303      	movs	r3, #3
 80006a4:	71fb      	strb	r3, [r7, #7]
	if (HM01B0_WriteRegister(&hi2c2, reg_address, value_to_write) != HAL_OK) {
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <HM01B0_Test+0x80>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4619      	mov	r1, r3
 80006ae:	481c      	ldr	r0, [pc, #112]	@ (8000720 <HM01B0_Test+0x84>)
 80006b0:	f7ff ff3a 	bl	8000528 <HM01B0_WriteRegister>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d009      	beq.n	80006ce <HM01B0_Test+0x32>
		Green_blink();
 80006ba:	f7ff ff99 	bl	80005f0 <Green_blink>
		Green_blink();
 80006be:	f7ff ff97 	bl	80005f0 <Green_blink>
		count = count + 5;
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <HM01B0_Test+0x88>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3305      	adds	r3, #5
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <HM01B0_Test+0x88>)
 80006cc:	701a      	strb	r2, [r3, #0]

	}
	if (HM01B0_ReadRegister(&hi2c2, reg_address, &reg_value) != HAL_OK) {
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HM01B0_Test+0x80>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <HM01B0_Test+0x8c>)
 80006d4:	4619      	mov	r1, r3
 80006d6:	4812      	ldr	r0, [pc, #72]	@ (8000720 <HM01B0_Test+0x84>)
 80006d8:	f7ff ff47 	bl	800056a <HM01B0_ReadRegister>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00a      	beq.n	80006f8 <HM01B0_Test+0x5c>
	    printf("Read failed!\n");
 80006e2:	4812      	ldr	r0, [pc, #72]	@ (800072c <HM01B0_Test+0x90>)
 80006e4:	f004 fe40 	bl	8005368 <puts>
	    Blue_blink();
 80006e8:	f7ff ff6c 	bl	80005c4 <Blue_blink>
	    count = count + 100;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <HM01B0_Test+0x88>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3364      	adds	r3, #100	@ 0x64
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <HM01B0_Test+0x88>)
 80006f6:	701a      	strb	r2, [r3, #0]
	}


	// Optionally, process the read value
	if (reg_value == value_to_write) {
 80006f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <HM01B0_Test+0x8c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d102      	bne.n	8000708 <HM01B0_Test+0x6c>
		// Successful read
		//HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Indicate success by toggling an LED
		Blink_twice(); // if successful
 8000702:	f7ff ffa1 	bl	8000648 <Blink_twice>
 8000706:	e001      	b.n	800070c <HM01B0_Test+0x70>
	} else {
		// Read value did not match written value
		Blink_once(); //if unsuccessful
 8000708:	f7ff ff86 	bl	8000618 <Blink_once>
	}

	HAL_Delay(500); // Delay for readability
 800070c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000710:	f000 fcfa 	bl	8001108 <HAL_Delay>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000088 	.word	0x20000088
 8000724:	200001e9 	.word	0x200001e9
 8000728:	200001e8 	.word	0x200001e8
 800072c:	08005aa8 	.word	0x08005aa8

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000734:	f000 f9c4 	bl	8000ac0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 fc89 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f810 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f928 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f000 f900 	bl	8000948 <MX_DMA_Init>
  MX_I2C2_Init();
 8000748:	f000 f866 	bl	8000818 <MX_I2C2_Init>
  MX_TIM2_Init();
 800074c:	f000 f8a4 	bl	8000898 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f000 fcd9 	bl	8001108 <HAL_Delay>
	  HM01B0_Test();
 8000756:	f7ff ffa1 	bl	800069c <HM01B0_Test>
	  HAL_Delay(100);
 800075a:	bf00      	nop
 800075c:	e7f8      	b.n	8000750 <main+0x20>
	...

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	@ 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 feda 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <SystemClock_Config+0xb0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xb0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xb0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <SystemClock_Config+0xb4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000814 <SystemClock_Config+0xb4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <SystemClock_Config+0xb4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 ff27 	bl	8003620 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f99e 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f9c0 	bl	8003b7c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000802:	f000 f989 	bl	8000b18 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_I2C2_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <MX_I2C2_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_I2C2_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	@ (8000894 <MX_I2C2_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_I2C2_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000852:	480e      	ldr	r0, [pc, #56]	@ (800088c <MX_I2C2_Init+0x74>)
 8000854:	f001 fb24 	bl	8001ea0 <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 f95b 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <MX_I2C2_Init+0x74>)
 8000866:	f002 fe43 	bl	80034f0 <HAL_I2CEx_ConfigAnalogFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 f952 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_I2C2_Init+0x74>)
 8000878:	f002 fe85 	bl	8003586 <HAL_I2CEx_ConfigDigitalFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f949 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000088 	.word	0x20000088
 8000890:	40005800 	.word	0x40005800
 8000894:	00303d5b 	.word	0x00303d5b

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008bc:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <MX_TIM2_Init+0xac>)
 80008e4:	f003 ff24 	bl	8004730 <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008ee:	f000 f913 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_TIM2_Init+0xac>)
 8000902:	f004 fb8b 	bl	800501c <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800090c:	f000 f904 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	220c      	movs	r2, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM2_Init+0xac>)
 8000928:	f003 ff5a 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000932:	f000 f8f1 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000936:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM2_Init+0xac>)
 8000938:	f000 fa16 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000019c 	.word	0x2000019c

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_DMA_Init+0x48>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <MX_DMA_Init+0x48>)
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_DMA_Init+0x48>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200d      	movs	r0, #13
 800096c:	f000 fccb 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000970:	200d      	movs	r0, #13
 8000972:	f000 fce4 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200f      	movs	r0, #15
 800097c:	f000 fcc3 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000980:	200f      	movs	r0, #15
 8000982:	f000 fcdc 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b41      	ldr	r3, [pc, #260]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a40      	ldr	r2, [pc, #256]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b38      	ldr	r3, [pc, #224]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a34      	ldr	r2, [pc, #208]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b32      	ldr	r3, [pc, #200]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a28      	ldr	r2, [pc, #160]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <MX_GPIO_Init+0x11c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a28:	4822      	ldr	r0, [pc, #136]	@ (8000ab4 <MX_GPIO_Init+0x120>)
 8000a2a:	f001 f9e1 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Green_Pin LD3_Red_Pin LD2_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Green_Pin|LD3_Red_Pin|LD2_Blue_Pin;
 8000a2e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <MX_GPIO_Init+0x120>)
 8000a48:	f001 f826 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : HREF_Pin PCLK_Pin */
  GPIO_InitStruct.Pin = HREF_Pin|PCLK_Pin;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4816      	ldr	r0, [pc, #88]	@ (8000ab8 <MX_GPIO_Init+0x124>)
 8000a60:	f001 f81a 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VSync_Pin */
  GPIO_InitStruct.Pin = VSync_Pin;
 8000a64:	2304      	movs	r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VSync_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4810      	ldr	r0, [pc, #64]	@ (8000abc <MX_GPIO_Init+0x128>)
 8000a7a:	f001 f80d 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8000a7e:	23f0      	movs	r3, #240	@ 0xf0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480a      	ldr	r0, [pc, #40]	@ (8000abc <MX_GPIO_Init+0x128>)
 8000a92:	f001 f801 	bl	8001a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2008      	movs	r0, #8
 8000a9c:	f000 fc33 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aa0:	2008      	movs	r0, #8
 8000aa2:	f000 fc4c 	bl	800133e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	40020c00 	.word	0x40020c00

08000ac0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ad2:	f000 fc4f 	bl	8001374 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ae2:	231f      	movs	r3, #31
 8000ae4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ae6:	2387      	movs	r3, #135	@ 0x87
 8000ae8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aee:	2300      	movs	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b02:	463b      	mov	r3, r7
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fc6d 	bl	80013e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f000 fc4a 	bl	80013a4 <HAL_MPU_Enable>

}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(1000); // Delay for 1 second
 8000b20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b24:	f000 faf0 	bl	8001108 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Red_Pin); // Toggle the LED
 8000b28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <Error_Handler+0x20>)
 8000b2e:	f001 f978 	bl	8001e22 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); // Delay for 1 second
 8000b32:	bf00      	nop
 8000b34:	e7f4      	b.n	8000b20 <Error_Handler+0x8>
 8000b36:	bf00      	nop
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0ae      	sub	sp, #184	@ 0xb8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2290      	movs	r2, #144	@ 0x90
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 fcbf 	bl	8005528 <memset>
  if(hi2c->Instance==I2C2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a58      	ldr	r2, [pc, #352]	@ (8000d10 <HAL_I2C_MspInit+0x18c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	f040 80a8 	bne.w	8000d06 <HAL_I2C_MspInit+0x182>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 f98b 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000bd0:	f7ff ffa2 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c04:	2304      	movs	r3, #4
 8000c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4841      	ldr	r0, [pc, #260]	@ (8000d18 <HAL_I2C_MspInit+0x194>)
 8000c12:	f000 ff41 	bl	8001a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <HAL_I2C_MspInit+0x190>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c30:	4a3b      	ldr	r2, [pc, #236]	@ (8000d20 <HAL_I2C_MspInit+0x19c>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3c:	4b37      	ldr	r3, [pc, #220]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c3e:	2240      	movs	r2, #64	@ 0x40
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c50:	4b32      	ldr	r3, [pc, #200]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000c6e:	482b      	ldr	r0, [pc, #172]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c70:	f000 fbf8 	bl	8001464 <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000c7a:	f7ff ff4d 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c82:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <HAL_I2C_MspInit+0x198>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000c8c:	4a26      	ldr	r2, [pc, #152]	@ (8000d28 <HAL_I2C_MspInit+0x1a4>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000c90:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000c92:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000cca:	4816      	ldr	r0, [pc, #88]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000ccc:	f000 fbca 	bl	8001464 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 8000cd6:	f7ff ff1f 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce0:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_I2C_MspInit+0x1a0>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2021      	movs	r0, #33	@ 0x21
 8000cec:	f000 fb0b 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cf0:	2021      	movs	r0, #33	@ 0x21
 8000cf2:	f000 fb24 	bl	800133e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2022      	movs	r0, #34	@ 0x22
 8000cfc:	f000 fb03 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d00:	2022      	movs	r0, #34	@ 0x22
 8000d02:	f000 fb1c 	bl	800133e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	37b8      	adds	r7, #184	@ 0xb8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40005800 	.word	0x40005800
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021400 	.word	0x40021400
 8000d1c:	200000dc 	.word	0x200000dc
 8000d20:	40026070 	.word	0x40026070
 8000d24:	2000013c 	.word	0x2000013c
 8000d28:	40026040 	.word	0x40026040

08000d2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d3c:	d10b      	bne.n	8000d56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_TIM_PWM_MspInit+0x38>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_TIM_PWM_MspInit+0x38>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_TIM_PWM_MspInit+0x38>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d11b      	bne.n	8000dc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <HAL_TIM_MspPostInit+0x64>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <HAL_TIM_MspPostInit+0x64>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_TIM_MspPostInit+0x64>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCLK_Pin;
 8000da2:	2308      	movs	r3, #8
 8000da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <HAL_TIM_MspPostInit+0x68>)
 8000dbe:	f000 fe6b 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 f94d 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VSync_Pin);
 8000e36:	2004      	movs	r0, #4
 8000e38:	f001 f80e 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <DMA1_Stream2_IRQHandler+0x10>)
 8000e46:	f000 fbdd 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000013c 	.word	0x2000013c

08000e54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA1_Stream4_IRQHandler+0x10>)
 8000e5a:	f000 fbd3 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000dc 	.word	0x200000dc

08000e68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <I2C2_EV_IRQHandler+0x10>)
 8000e6e:	f001 fac1 	bl	80023f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000088 	.word	0x20000088

08000e7c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <I2C2_ER_IRQHandler+0x10>)
 8000e82:	f001 fad1 	bl	8002428 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000088 	.word	0x20000088

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
  }
  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f004 fb12 	bl	80055c4 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20080000 	.word	0x20080000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200001ec 	.word	0x200001ec
 8000fd4:	20000340 	.word	0x20000340

08000fd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800102a:	f004 fad1 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fb7f 	bl	8000730 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001040:	08005ae0 	.word	0x08005ae0
  ldr r2, =_sbss
 8001044:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001048:	20000340 	.word	0x20000340

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>

0800104e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f94c 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001058:	200f      	movs	r0, #15
 800105a:	f000 f805 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fd6d 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f967 	bl	800135a <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f92f 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	200001f0 	.word	0x200001f0

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200001f0 	.word	0x200001f0

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000000c 	.word	0x2000000c

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <__NVIC_SetPriorityGrouping+0x40>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <__NVIC_SetPriorityGrouping+0x40>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	05fa0000 	.word	0x05fa0000

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff3e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff31 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001378:	f3bf 8f5f 	dmb	sy
}
 800137c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_MPU_Disable+0x28>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_MPU_Disable+0x28>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001388:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_MPU_Disable+0x2c>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	e000ed90 	.word	0xe000ed90

080013a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_MPU_Enable+0x38>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_MPU_Enable+0x3c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_MPU_Enable+0x3c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed90 	.word	0xe000ed90
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785a      	ldrb	r2, [r3, #1]
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4a19      	ldr	r2, [pc, #100]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001400:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7adb      	ldrb	r3, [r3, #11]
 8001412:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800141c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7b5b      	ldrb	r3, [r3, #13]
 8001422:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b9b      	ldrb	r3, [r3, #14]
 800142a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800142c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7bdb      	ldrb	r3, [r3, #15]
 8001432:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a5b      	ldrb	r3, [r3, #9]
 800143a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800143c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001444:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001450:	6113      	str	r3, [r2, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed90 	.word	0xe000ed90

08001464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff fe3e 	bl	80010f0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e099      	b.n	80015b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a0:	e00f      	b.n	80014c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a2:	f7ff fe25 	bl	80010f0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d908      	bls.n	80014c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e078      	b.n	80015b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e8      	bne.n	80014a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_DMA_Init+0x158>)
 80014dc:	4013      	ands	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	2b04      	cmp	r3, #4
 800151a:	d107      	bne.n	800152c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4313      	orrs	r3, r2
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f023 0307 	bic.w	r3, r3, #7
 8001542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	2b04      	cmp	r3, #4
 8001554:	d117      	bne.n	8001586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fa19 	bl	80019a0 <DMA_CheckFifoParam>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2240      	movs	r2, #64	@ 0x40
 8001578:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001582:	2301      	movs	r3, #1
 8001584:	e016      	b.n	80015b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9d0 	bl	8001934 <DMA_CalcBaseAndBitshift>
 8001594:	4603      	mov	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159c:	223f      	movs	r2, #63	@ 0x3f
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	e010803f 	.word	0xe010803f

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d004      	beq.n	80015de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00c      	b.n	80015f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001610:	4b8e      	ldr	r3, [pc, #568]	@ (800184c <HAL_DMA_IRQHandler+0x248>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a8e      	ldr	r2, [pc, #568]	@ (8001850 <HAL_DMA_IRQHandler+0x24c>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a9b      	lsrs	r3, r3, #10
 800161c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162e:	2208      	movs	r2, #8
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01a      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	2208      	movs	r2, #8
 800165e:	409a      	lsls	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001692:	2201      	movs	r2, #1
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	2204      	movs	r2, #4
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e0:	2210      	movs	r2, #16
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d043      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d03c      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fe:	2210      	movs	r2, #16
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d018      	beq.n	8001746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d108      	bne.n	8001734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
 8001732:	e01f      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01b      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e016      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0208 	bic.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001778:	2220      	movs	r2, #32
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808f 	beq.w	80018a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8087 	beq.w	80018a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2220      	movs	r2, #32
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d136      	bne.n	800181c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0216 	bic.w	r2, r2, #22
 80017bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_DMA_IRQHandler+0x1da>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0208 	bic.w	r2, r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	223f      	movs	r2, #63	@ 0x3f
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800180e:	2b00      	cmp	r3, #0
 8001810:	d07e      	beq.n	8001910 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
        }
        return;
 800181a:	e079      	b.n	8001910 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01d      	beq.n	8001866 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10d      	bne.n	8001854 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	2b00      	cmp	r3, #0
 800183e:	d031      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
 8001848:	e02c      	b.n	80018a4 <HAL_DMA_IRQHandler+0x2a0>
 800184a:	bf00      	nop
 800184c:	20000004 	.word	0x20000004
 8001850:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
 8001864:	e01e      	b.n	80018a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10f      	bne.n	8001894 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0210 	bic.w	r2, r2, #16
 8001882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d032      	beq.n	8001912 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d022      	beq.n	80018fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2205      	movs	r2, #5
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3301      	adds	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d307      	bcc.n	80018ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f2      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x2cc>
 80018ea:	e000      	b.n	80018ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
 800190e:	e000      	b.n	8001912 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001910:	bf00      	nop
    }
  }
}
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001926:	b2db      	uxtb	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3b10      	subs	r3, #16
 8001944:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <DMA_CalcBaseAndBitshift+0x60>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <DMA_CalcBaseAndBitshift+0x64>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d908      	bls.n	8001974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <DMA_CalcBaseAndBitshift+0x68>)
 800196a:	4013      	ands	r3, r2
 800196c:	1d1a      	adds	r2, r3, #4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	@ 0x58
 8001972:	e006      	b.n	8001982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <DMA_CalcBaseAndBitshift+0x68>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab
 8001998:	08005ac8 	.word	0x08005ac8
 800199c:	fffffc00 	.word	0xfffffc00

080019a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d11f      	bne.n	80019fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d856      	bhi.n	8001a6e <DMA_CheckFifoParam+0xce>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <DMA_CheckFifoParam+0x28>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019eb 	.word	0x080019eb
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	08001a6f 	.word	0x08001a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d046      	beq.n	8001a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e8:	e043      	b.n	8001a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019f2:	d140      	bne.n	8001a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f8:	e03d      	b.n	8001a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a02:	d121      	bne.n	8001a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d837      	bhi.n	8001a7a <DMA_CheckFifoParam+0xda>
 8001a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <DMA_CheckFifoParam+0x70>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a27 	.word	0x08001a27
 8001a18:	08001a21 	.word	0x08001a21
 8001a1c:	08001a39 	.word	0x08001a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      break;
 8001a24:	e030      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d025      	beq.n	8001a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a36:	e022      	b.n	8001a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a40:	d11f      	bne.n	8001a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a46:	e01c      	b.n	8001a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d903      	bls.n	8001a56 <DMA_CheckFifoParam+0xb6>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d003      	beq.n	8001a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a54:	e018      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5a:	e015      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6c:	e00b      	b.n	8001a86 <DMA_CheckFifoParam+0xe6>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e00a      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e008      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e006      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e004      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e002      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
    }
  } 
  
  return status; 
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e175      	b.n	8001da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8164 	bne.w	8001d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x56>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80be 	beq.w	8001d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a65      	ldr	r2, [pc, #404]	@ (8001dbc <HAL_GPIO_Init+0x324>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_GPIO_Init+0x324>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3a:	4a61      	ldr	r2, [pc, #388]	@ (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	@ (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d037      	beq.n	8001cd6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a57      	ldr	r2, [pc, #348]	@ (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a56      	ldr	r2, [pc, #344]	@ (8001dcc <HAL_GPIO_Init+0x334>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a55      	ldr	r2, [pc, #340]	@ (8001dd0 <HAL_GPIO_Init+0x338>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a54      	ldr	r2, [pc, #336]	@ (8001dd4 <HAL_GPIO_Init+0x33c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a53      	ldr	r2, [pc, #332]	@ (8001dd8 <HAL_GPIO_Init+0x340>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x22a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	@ (8001ddc <HAL_GPIO_Init+0x344>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a51      	ldr	r2, [pc, #324]	@ (8001de0 <HAL_GPIO_Init+0x348>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	@ (8001de4 <HAL_GPIO_Init+0x34c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8001de8 <HAL_GPIO_Init+0x350>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e012      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e010      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	@ (8001dc0 <HAL_GPIO_Init+0x328>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a34      	ldr	r2, [pc, #208]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <HAL_GPIO_Init+0x354>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae86 	bls.w	8001ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40021800 	.word	0x40021800
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40022400 	.word	0x40022400
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	400b      	ands	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f806 	bl	8001e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08b      	b.n	8001fca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fe5c 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d108      	bne.n	8001f42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e007      	b.n	8001f52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_I2C_Init+0x134>)
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69d9      	ldr	r1, [r3, #28]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	02008000 	.word	0x02008000

08001fd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	f040 80fd 	bne.w	80021f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_I2C_Master_Transmit+0x30>
 8002004:	2302      	movs	r3, #2
 8002006:	e0f6      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002010:	f7ff f86e 	bl	80010f0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2319      	movs	r3, #25
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 ff85 	bl	8002f32 <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0e1      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2221      	movs	r2, #33	@ 0x21
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2210      	movs	r2, #16
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	893a      	ldrh	r2, [r7, #8]
 8002052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2bff      	cmp	r3, #255	@ 0xff
 8002062:	d906      	bls.n	8002072 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800206a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e007      	b.n	8002082 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800207c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002080:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HAL_I2C_Master_Transmit+0x228>)
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f001 f97f 	bl	80033d0 <I2C_TransferConfig>
 80020d2:	e066      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	8979      	ldrh	r1, [r7, #10]
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <HAL_I2C_Master_Transmit+0x228>)
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f001 f974 	bl	80033d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020e8:	e05b      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 ff78 	bl	8002fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07b      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d034      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x1ca>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d130      	bne.n	80021a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	2200      	movs	r2, #0
 8002148:	2180      	movs	r1, #128	@ 0x80
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fef1 	bl	8002f32 <I2C_WaitOnFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e04d      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	2bff      	cmp	r3, #255	@ 0xff
 8002162:	d90e      	bls.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	22ff      	movs	r2, #255	@ 0xff
 8002168:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216e:	b2da      	uxtb	r2, r3
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	2300      	movs	r3, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f001 f928 	bl	80033d0 <I2C_TransferConfig>
 8002180:	e00f      	b.n	80021a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	8979      	ldrh	r1, [r7, #10]
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f001 f917 	bl	80033d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d19e      	bne.n	80020ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	6a39      	ldr	r1, [r7, #32]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 ff5e 	bl	8003072 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01a      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2220      	movs	r2, #32
 80021c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_I2C_Master_Transmit+0x22c>)
 80021d4:	400b      	ands	r3, r1
 80021d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	80002000 	.word	0x80002000
 8002204:	fe00e800 	.word	0xfe00e800

08002208 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	460b      	mov	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
 8002218:	4613      	mov	r3, r2
 800221a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b20      	cmp	r3, #32
 8002226:	f040 80db 	bne.w	80023e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2C_Master_Receive+0x30>
 8002234:	2302      	movs	r3, #2
 8002236:	e0d4      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002240:	f7fe ff56 	bl	80010f0 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2319      	movs	r3, #25
 800224c:	2201      	movs	r2, #1
 800224e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fe6d 	bl	8002f32 <I2C_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0bf      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2222      	movs	r2, #34	@ 0x22
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2210      	movs	r2, #16
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	2bff      	cmp	r3, #255	@ 0xff
 8002292:	d90e      	bls.n	80022b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	4b52      	ldr	r3, [pc, #328]	@ (80023ec <HAL_I2C_Master_Receive+0x1e4>)
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f001 f890 	bl	80033d0 <I2C_TransferConfig>
 80022b0:	e06d      	b.n	800238e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	4b49      	ldr	r3, [pc, #292]	@ (80023ec <HAL_I2C_Master_Receive+0x1e4>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f001 f87f 	bl	80033d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80022d2:	e05c      	b.n	800238e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6a39      	ldr	r1, [r7, #32]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 ff0d 	bl	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e07c      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d034      	beq.n	800238e <HAL_I2C_Master_Receive+0x186>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d130      	bne.n	800238e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2200      	movs	r2, #0
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fdfb 	bl	8002f32 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e04d      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	2bff      	cmp	r3, #255	@ 0xff
 800234e:	d90e      	bls.n	800236e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	22ff      	movs	r2, #255	@ 0xff
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f001 f832 	bl	80033d0 <I2C_TransferConfig>
 800236c:	e00f      	b.n	800238e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f001 f821 	bl	80033d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d19d      	bne.n	80022d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6a39      	ldr	r1, [r7, #32]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fe68 	bl	8003072 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e01a      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2220      	movs	r2, #32
 80023b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_I2C_Master_Receive+0x1e8>)
 80023c0:	400b      	ands	r3, r1
 80023c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e000      	b.n	80023e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	80002400 	.word	0x80002400
 80023f0:	fe00e800 	.word	0xfe00e800

080023f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
  }
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00f      	beq.n	800246a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002468:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00f      	beq.n	8002494 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f043 0208 	orr.w	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002492:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00f      	beq.n	80024be <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 030b 	and.w	r3, r3, #11
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fbd5 	bl	8002c80 <I2C_ITError>
  }
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
 8002512:	4613      	mov	r3, r2
 8002514:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <I2C_Slave_ISR_IT+0x24>
 800257e:	2302      	movs	r3, #2
 8002580:	e0e2      	b.n	8002748 <I2C_Slave_ISR_IT+0x1ea>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800259e:	6939      	ldr	r1, [r7, #16]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f9b5 	bl	8002910 <I2C_ITSlaveCplt>
 80025a6:	e0ca      	b.n	800273e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04b      	beq.n	800264a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d046      	beq.n	800264a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d128      	bne.n	8002618 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b28      	cmp	r3, #40	@ 0x28
 80025d0:	d108      	bne.n	80025e4 <I2C_Slave_ISR_IT+0x86>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025d8:	d104      	bne.n	80025e4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025da:	6939      	ldr	r1, [r7, #16]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fafb 	bl	8002bd8 <I2C_ITListenCplt>
 80025e2:	e031      	b.n	8002648 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b29      	cmp	r3, #41	@ 0x29
 80025ee:	d10e      	bne.n	800260e <I2C_Slave_ISR_IT+0xb0>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f6:	d00a      	beq.n	800260e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fc54 	bl	8002eae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f926 	bl	8002858 <I2C_ITSlaveSeqCplt>
 800260c:	e01c      	b.n	8002648 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2210      	movs	r2, #16
 8002614:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002616:	e08f      	b.n	8002738 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2210      	movs	r2, #16
 800261e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <I2C_Slave_ISR_IT+0xdc>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002638:	d17e      	bne.n	8002738 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4619      	mov	r1, r3
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fb1d 	bl	8002c80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002646:	e077      	b.n	8002738 <I2C_Slave_ISR_IT+0x1da>
 8002648:	e076      	b.n	8002738 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02f      	beq.n	80026b4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02a      	beq.n	80026b4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d14b      	bne.n	800273c <I2C_Slave_ISR_IT+0x1de>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026aa:	d047      	beq.n	800273c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f8d3 	bl	8002858 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80026b2:	e043      	b.n	800273c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80026c8:	6939      	ldr	r1, [r7, #16]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f840 	bl	8002750 <I2C_ITAddrCplt>
 80026d0:	e035      	b.n	800273e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d030      	beq.n	800273e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02b      	beq.n	800273e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d018      	beq.n	8002722 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002720:	e00d      	b.n	800273e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002728:	d002      	beq.n	8002730 <I2C_Slave_ISR_IT+0x1d2>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f891 	bl	8002858 <I2C_ITSlaveSeqCplt>
 8002736:	e002      	b.n	800273e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002738:	bf00      	nop
 800273a:	e000      	b.n	800273e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800273c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002766:	2b28      	cmp	r3, #40	@ 0x28
 8002768:	d16a      	bne.n	8002840 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b29b      	uxth	r3, r3
 8002784:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002788:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80027a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d138      	bne.n	8002820 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	09db      	lsrs	r3, r3, #7
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	89bb      	ldrh	r3, [r7, #12]
 80027b6:	4053      	eors	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f003 0306 	and.w	r3, r3, #6
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11c      	bne.n	80027fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d13b      	bne.n	8002850 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2208      	movs	r2, #8
 80027e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027ee:	89ba      	ldrh	r2, [r7, #12]
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fe86 	bl	8002506 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027fa:	e029      	b.n	8002850 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fe15 	bl	8003434 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002812:	89ba      	ldrh	r2, [r7, #12]
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fe74 	bl	8002506 <HAL_I2C_AddrCallback>
}
 800281e:	e017      	b.n	8002850 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fe05 	bl	8003434 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002832:	89ba      	ldrh	r2, [r7, #12]
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe64 	bl	8002506 <HAL_I2C_AddrCallback>
}
 800283e:	e007      	b.n	8002850 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2208      	movs	r2, #8
 8002846:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e00c      	b.n	80028a6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b29      	cmp	r3, #41	@ 0x29
 80028b0:	d112      	bne.n	80028d8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2228      	movs	r2, #40	@ 0x28
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2221      	movs	r2, #33	@ 0x21
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028c0:	2101      	movs	r1, #1
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fdb6 	bl	8003434 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fe04 	bl	80024de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028d6:	e017      	b.n	8002908 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80028e2:	d111      	bne.n	8002908 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2228      	movs	r2, #40	@ 0x28
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2222      	movs	r2, #34	@ 0x22
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028f2:	2102      	movs	r1, #2
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fd9d 	bl	8003434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff fdf5 	bl	80024f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002932:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2220      	movs	r2, #32
 800293a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	2b21      	cmp	r3, #33	@ 0x21
 8002940:	d002      	beq.n	8002948 <I2C_ITSlaveCplt+0x38>
 8002942:	7afb      	ldrb	r3, [r7, #11]
 8002944:	2b29      	cmp	r3, #41	@ 0x29
 8002946:	d108      	bne.n	800295a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002948:	f248 0101 	movw	r1, #32769	@ 0x8001
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fd71 	bl	8003434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2221      	movs	r2, #33	@ 0x21
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
 8002958:	e019      	b.n	800298e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	2b22      	cmp	r3, #34	@ 0x22
 800295e:	d002      	beq.n	8002966 <I2C_ITSlaveCplt+0x56>
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	2b2a      	cmp	r3, #42	@ 0x2a
 8002964:	d108      	bne.n	8002978 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002966:	f248 0102 	movw	r1, #32770	@ 0x8002
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fd62 	bl	8003434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2222      	movs	r2, #34	@ 0x22
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30
 8002976:	e00a      	b.n	800298e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002978:	7afb      	ldrb	r3, [r7, #11]
 800297a:	2b28      	cmp	r3, #40	@ 0x28
 800297c:	d107      	bne.n	800298e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800297e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fd56 	bl	8003434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800299c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b89      	ldr	r3, [pc, #548]	@ (8002bd0 <I2C_ITSlaveCplt+0x2c0>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa7d 	bl	8002eae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01f      	beq.n	8002a16 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e4:	e017      	b.n	8002a16 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d012      	beq.n	8002a16 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d049      	beq.n	8002b16 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d044      	beq.n	8002b16 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d128      	bne.n	8002ae8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b28      	cmp	r3, #40	@ 0x28
 8002aa0:	d108      	bne.n	8002ab4 <I2C_ITSlaveCplt+0x1a4>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aa8:	d104      	bne.n	8002ab4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f893 	bl	8002bd8 <I2C_ITListenCplt>
 8002ab2:	e030      	b.n	8002b16 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b29      	cmp	r3, #41	@ 0x29
 8002abe:	d10e      	bne.n	8002ade <I2C_ITSlaveCplt+0x1ce>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ac6:	d00a      	beq.n	8002ade <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2210      	movs	r2, #16
 8002ace:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f9ec 	bl	8002eae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff febe 	bl	8002858 <I2C_ITSlaveSeqCplt>
 8002adc:	e01b      	b.n	8002b16 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	61da      	str	r2, [r3, #28]
 8002ae6:	e016      	b.n	8002b16 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2210      	movs	r2, #16
 8002aee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <I2C_ITSlaveCplt+0x1fa>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b08:	d105      	bne.n	8002b16 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8b5 	bl	8002c80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8a4 	bl	8002c80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b28      	cmp	r3, #40	@ 0x28
 8002b42:	d141      	bne.n	8002bc8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b44:	6979      	ldr	r1, [r7, #20]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f846 	bl	8002bd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b4c:	e03c      	b.n	8002bc8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b56:	d014      	beq.n	8002b82 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fe7d 	bl	8002858 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <I2C_ITSlaveCplt+0x2c4>)
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fcd1 	bl	8002522 <HAL_I2C_ListenCpltCallback>
}
 8002b80:	e022      	b.n	8002bc8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b22      	cmp	r3, #34	@ 0x22
 8002b8c:	d10e      	bne.n	8002bac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fca4 	bl	80024f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002baa:	e00d      	b.n	8002bc8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fc8b 	bl	80024de <HAL_I2C_SlaveTxCpltCallback>
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	fe00e800 	.word	0xfe00e800
 8002bd4:	ffff0000 	.word	0xffff0000

08002bd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	@ (8002c7c <I2C_ITListenCplt+0xa4>)
 8002be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d022      	beq.n	8002c54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c54:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fbeb 	bl	8003434 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fc57 	bl	8002522 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	ffff0000 	.word	0xffff0000

08002c80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8002e54 <I2C_ITError+0x1d4>)
 8002c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b28      	cmp	r3, #40	@ 0x28
 8002cb6:	d005      	beq.n	8002cc4 <I2C_ITError+0x44>
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b29      	cmp	r3, #41	@ 0x29
 8002cbc:	d002      	beq.n	8002cc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cc2:	d10b      	bne.n	8002cdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fbb4 	bl	8003434 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2228      	movs	r2, #40	@ 0x28
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a60      	ldr	r2, [pc, #384]	@ (8002e58 <I2C_ITError+0x1d8>)
 8002cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cda:	e030      	b.n	8002d3e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cdc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fba7 	bl	8003434 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8e1 	bl	8002eae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b60      	cmp	r3, #96	@ 0x60
 8002cf6:	d01f      	beq.n	8002d38 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d114      	bne.n	8002d38 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d109      	bne.n	8002d30 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d039      	beq.n	8002dc0 <I2C_ITError+0x140>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b11      	cmp	r3, #17
 8002d50:	d002      	beq.n	8002d58 <I2C_ITError+0xd8>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b21      	cmp	r3, #33	@ 0x21
 8002d56:	d133      	bne.n	8002dc0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d66:	d107      	bne.n	8002d78 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fdcb 	bl	8001918 <HAL_DMA_GetState>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d017      	beq.n	8002db8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	4a33      	ldr	r2, [pc, #204]	@ (8002e5c <I2C_ITError+0x1dc>)
 8002d8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fc0f 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04d      	beq.n	8002e44 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002db2:	4610      	mov	r0, r2
 8002db4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002db6:	e045      	b.n	8002e44 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f851 	bl	8002e60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dbe:	e041      	b.n	8002e44 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d039      	beq.n	8002e3c <I2C_ITError+0x1bc>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d002      	beq.n	8002dd4 <I2C_ITError+0x154>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b22      	cmp	r3, #34	@ 0x22
 8002dd2:	d133      	bne.n	8002e3c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de2:	d107      	bne.n	8002df4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fd8d 	bl	8001918 <HAL_DMA_GetState>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d017      	beq.n	8002e34 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <I2C_ITError+0x1dc>)
 8002e0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fbd1 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d011      	beq.n	8002e48 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e32:	e009      	b.n	8002e48 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f813 	bl	8002e60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e3a:	e005      	b.n	8002e48 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f80f 	bl	8002e60 <I2C_TreatErrorCallback>
  }
}
 8002e42:	e002      	b.n	8002e4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	0800255f 	.word	0x0800255f
 8002e5c:	08002ef7 	.word	0x08002ef7

08002e60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b60      	cmp	r3, #96	@ 0x60
 8002e72:	d10e      	bne.n	8002e92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fb5d 	bl	800254a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e90:	e009      	b.n	8002ea6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fb48 	bl	8002536 <HAL_I2C_ErrorCallback>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d103      	bne.n	8002ecc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d007      	beq.n	8002eea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	619a      	str	r2, [r3, #24]
  }
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	2200      	movs	r2, #0
 8002f22:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff ff9b 	bl	8002e60 <I2C_TreatErrorCallback>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f42:	e03b      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	6839      	ldr	r1, [r7, #0]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f961 	bl	8003210 <I2C_IsErrorOccurred>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e041      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d02d      	beq.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe f8c6 	bl	80010f0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d122      	bne.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d113      	bne.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e00f      	b.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d0b4      	beq.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff0:	e033      	b.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f90a 	bl	8003210 <I2C_IsErrorOccurred>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e031      	b.n	800306a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d025      	beq.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe f86f 	bl	80010f0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11a      	bne.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d013      	beq.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e007      	b.n	800306a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d1c4      	bne.n	8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307e:	e02f      	b.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8c3 	bl	8003210 <I2C_IsErrorOccurred>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e02d      	b.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fe f82c 	bl	80010f0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11a      	bne.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d013      	beq.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d1c8      	bne.n	8003080 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003108:	e071      	b.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f87e 	bl	8003210 <I2C_IsErrorOccurred>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b20      	cmp	r3, #32
 800312a:	d13b      	bne.n	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d138      	bne.n	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d105      	bne.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b10      	cmp	r3, #16
 8003158:	d121      	bne.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2204      	movs	r2, #4
 8003166:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2220      	movs	r2, #32
 800316e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b24      	ldr	r3, [pc, #144]	@ (800320c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800317c:	400b      	ands	r3, r1
 800317e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
 800319c:	e002      	b.n	80031a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80031a4:	f7fd ffa4 	bl	80010f0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d119      	bne.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00f      	beq.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d002      	beq.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d083      	beq.n	800310a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d068      	beq.n	800330e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003244:	e049      	b.n	80032da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d045      	beq.n	80032da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fd ff4f 	bl	80010f0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_IsErrorOccurred+0x54>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13a      	bne.n	80032da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003286:	d121      	bne.n	80032cc <I2C_IsErrorOccurred+0xbc>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328e:	d01d      	beq.n	80032cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d01a      	beq.n	80032cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032a6:	f7fd ff23 	bl	80010f0 <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ac:	e00e      	b.n	80032cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ae:	f7fd ff1f 	bl	80010f0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b19      	cmp	r3, #25
 80032ba:	d907      	bls.n	80032cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032ca:	e006      	b.n	80032da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d1e9      	bne.n	80032ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d003      	beq.n	80032f0 <I2C_IsErrorOccurred+0xe0>
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0aa      	beq.n	8003246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2220      	movs	r2, #32
 80032fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fd92 	bl	8002eae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <I2C_IsErrorOccurred+0x1bc>)
 8003396:	400b      	ands	r3, r1
 8003398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	@ 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	fe00e800 	.word	0xfe00e800

080033d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	4613      	mov	r3, r2
 80033e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e8:	7a7b      	ldrb	r3, [r7, #9]
 80033ea:	041b      	lsls	r3, r3, #16
 80033ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	0d5b      	lsrs	r3, r3, #21
 800340a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <I2C_TransferConfig+0x60>)
 8003410:	430b      	orrs	r3, r1
 8003412:	43db      	mvns	r3, r3
 8003414:	ea02 0103 	and.w	r1, r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	03ff63ff 	.word	0x03ff63ff

08003434 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003454:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003462:	2b28      	cmp	r3, #40	@ 0x28
 8003464:	d003      	beq.n	800346e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800346c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00f      	beq.n	8003498 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800347e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800348c:	2b28      	cmp	r3, #40	@ 0x28
 800348e:	d003      	beq.n	8003498 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003496:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	da03      	bge.n	80034a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d103      	bne.n	80034b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d103      	bne.n	80034c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f043 0320 	orr.w	r3, r3, #32
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d103      	bne.n	80034d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	d138      	bne.n	8003578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003510:	2302      	movs	r3, #2
 8003512:	e032      	b.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	@ 0x24
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	d139      	bne.n	8003610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e033      	b.n	8003612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	@ 0x24
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e29b      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003644:	4b96      	ldr	r3, [pc, #600]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00c      	beq.n	800366a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003650:	4b93      	ldr	r3, [pc, #588]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d112      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
 800365c:	4b90      	ldr	r3, [pc, #576]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b8d      	ldr	r3, [pc, #564]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06c      	beq.n	8003750 <HAL_RCC_OscConfig+0x130>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d168      	bne.n	8003750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e275      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x7a>
 800368c:	4b84      	ldr	r3, [pc, #528]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a83      	ldr	r2, [pc, #524]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x9c>
 80036a2:	4b7f      	ldr	r3, [pc, #508]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7e      	ldr	r2, [pc, #504]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b7c      	ldr	r3, [pc, #496]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7b      	ldr	r2, [pc, #492]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036c6:	4b76      	ldr	r3, [pc, #472]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a72      	ldr	r2, [pc, #456]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd8>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6c      	ldr	r3, [pc, #432]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6b      	ldr	r2, [pc, #428]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fcf6 	bl	80010f0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003708:	f7fd fcf2 	bl	80010f0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e229      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b61      	ldr	r3, [pc, #388]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fce2 	bl	80010f0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fd fcde 	bl	80010f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e215      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b57      	ldr	r3, [pc, #348]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x110>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d069      	beq.n	8003832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375e:	4b50      	ldr	r3, [pc, #320]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b4d      	ldr	r3, [pc, #308]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x190>
 8003776:	4b4a      	ldr	r3, [pc, #296]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x17a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1e9      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	493d      	ldr	r1, [pc, #244]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e040      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a38      	ldr	r2, [pc, #224]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fc94 	bl	80010f0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fd fc90 	bl	80010f0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1c7      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b30      	ldr	r3, [pc, #192]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4929      	ldr	r1, [pc, #164]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
 80037fe:	e018      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003800:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a26      	ldr	r2, [pc, #152]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fc70 	bl	80010f0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fc6c 	bl	80010f0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1a3      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d038      	beq.n	80038b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d019      	beq.n	800387a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384a:	4a15      	ldr	r2, [pc, #84]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fd fc4d 	bl	80010f0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385a:	f7fd fc49 	bl	80010f0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e180      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x23a>
 8003878:	e01a      	b.n	80038b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387e:	4a08      	ldr	r2, [pc, #32]	@ (80038a0 <HAL_RCC_OscConfig+0x280>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fd fc33 	bl	80010f0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd fc2f 	bl	80010f0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d903      	bls.n	80038a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e166      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
 80038a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	4b92      	ldr	r3, [pc, #584]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a4 	beq.w	8003a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b8c      	ldr	r3, [pc, #560]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b89      	ldr	r3, [pc, #548]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	4a88      	ldr	r2, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d6:	4b86      	ldr	r3, [pc, #536]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e6:	4b83      	ldr	r3, [pc, #524]	@ (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038f2:	4b80      	ldr	r3, [pc, #512]	@ (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	@ (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fd fbf7 	bl	80010f0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fd fbf3 	bl	80010f0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	@ 0x64
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e12a      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x4d4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x31a>
 800392c:	4b70      	ldr	r3, [pc, #448]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a6f      	ldr	r2, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	e02d      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x33c>
 8003942:	4b6b      	ldr	r3, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a6a      	ldr	r2, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	4a67      	ldr	r2, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003954:	f023 0304 	bic.w	r3, r3, #4
 8003958:	6713      	str	r3, [r2, #112]	@ 0x70
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x35e>
 8003964:	4b62      	ldr	r3, [pc, #392]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003968:	4a61      	ldr	r2, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003970:	4b5f      	ldr	r3, [pc, #380]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003974:	4a5e      	ldr	r2, [pc, #376]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	@ 0x70
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
 800397e:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	4a5b      	ldr	r2, [pc, #364]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	@ 0x70
 800398a:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	4a58      	ldr	r2, [pc, #352]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd fba7 	bl	80010f0 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd fba3 	bl	80010f0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0d8      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b4c      	ldr	r3, [pc, #304]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCC_OscConfig+0x386>
 80039c8:	e014      	b.n	80039f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd fb91 	bl	80010f0 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fd fb8d 	bl	80010f0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0c2      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b3d      	ldr	r3, [pc, #244]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	4a3c      	ldr	r2, [pc, #240]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80ae 	beq.w	8003b6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a10:	4b37      	ldr	r3, [pc, #220]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d06d      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d14b      	bne.n	8003abc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a31      	ldr	r2, [pc, #196]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fb5e 	bl	80010f0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd fb5a 	bl	80010f0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e091      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	491b      	ldr	r1, [pc, #108]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd fb2c 	bl	80010f0 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd fb28 	bl	80010f0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e05f      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x47c>
 8003aba:	e057      	b.n	8003b6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fb12 	bl	80010f0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fb0e 	bl	80010f0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e045      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4b0>
 8003aee:	e03d      	b.n	8003b6c <HAL_RCC_OscConfig+0x54c>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_RCC_OscConfig+0x558>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d030      	beq.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d129      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d119      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10f      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d0      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b6a      	ldr	r3, [pc, #424]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d910      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b67      	ldr	r3, [pc, #412]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	4965      	ldr	r1, [pc, #404]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d040      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d115      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e073      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4936      	ldr	r1, [pc, #216]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd fa3e 	bl	80010f0 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd fa3a 	bl	80010f0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e053      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d210      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	4922      	ldr	r1, [pc, #136]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	@ (8003d48 <HAL_RCC_ClockConfig+0x1cc>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_RCC_ClockConfig+0x1d0>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_RCC_ClockConfig+0x1d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd f99a 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08005ab8 	.word	0x08005ab8
 8003d4c:	20000004 	.word	0x20000004
 8003d50:	20000008 	.word	0x20000008

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b090      	sub	sp, #64	@ 0x40
 8003d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d60:	2300      	movs	r3, #0
 8003d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d64:	2300      	movs	r3, #0
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6c:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x40>
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	f200 80a1 	bhi.w	8003ec0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x34>
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d86:	e09b      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d8c:	e09b      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x188>)
 8003d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d92:	e098      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4b4f      	ldr	r3, [pc, #316]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003daa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	2200      	movs	r2, #0
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x188>)
 8003dc0:	fb03 f201 	mul.w	r2, r3, r1
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a43      	ldr	r2, [pc, #268]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x188>)
 8003dce:	fba0 1202 	umull	r1, r2, r0, r2
 8003dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd4:	460a      	mov	r2, r1
 8003dd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	4413      	add	r3, r2
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	2200      	movs	r2, #0
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003dee:	f7fc fa23 	bl	8000238 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4613      	mov	r3, r2
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dfa:	e053      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfc:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	2200      	movs	r2, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	617a      	str	r2, [r7, #20]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e0e:	f04f 0b00 	mov.w	fp, #0
 8003e12:	4652      	mov	r2, sl
 8003e14:	465b      	mov	r3, fp
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e46:	ebb2 0408 	subs.w	r4, r2, r8
 8003e4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	00eb      	lsls	r3, r5, #3
 8003e58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e5c:	00e2      	lsls	r2, r4, #3
 8003e5e:	4614      	mov	r4, r2
 8003e60:	461d      	mov	r5, r3
 8003e62:	eb14 030a 	adds.w	r3, r4, sl
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	eb45 030b 	adc.w	r3, r5, fp
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	028b      	lsls	r3, r1, #10
 8003e7e:	4621      	mov	r1, r4
 8003e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e84:	4621      	mov	r1, r4
 8003e86:	028a      	lsls	r2, r1, #10
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	60fa      	str	r2, [r7, #12]
 8003e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e98:	f7fc f9ce 	bl	8000238 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003eb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3740      	adds	r7, #64	@ 0x40
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	00f42400 	.word	0x00f42400
 8003edc:	017d7840 	.word	0x017d7840

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d012      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f08:	4b69      	ldr	r3, [pc, #420]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a68      	ldr	r2, [pc, #416]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f12:	6093      	str	r3, [r2, #8]
 8003f14:	4b66      	ldr	r3, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	4964      	ldr	r1, [pc, #400]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d017      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	4959      	ldr	r1, [pc, #356]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f76:	4b4e      	ldr	r3, [pc, #312]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	494a      	ldr	r1, [pc, #296]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 808b 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	4a39      	ldr	r2, [pc, #228]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd0:	4b37      	ldr	r3, [pc, #220]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fdc:	4b35      	ldr	r3, [pc, #212]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a34      	ldr	r2, [pc, #208]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fd f882 	bl	80010f0 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd f87e 	bl	80010f0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e38f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004002:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004016:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d035      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	429a      	cmp	r2, r3
 800402a:	d02e      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402c:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004034:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004036:	4b1e      	ldr	r3, [pc, #120]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800404e:	4a18      	ldr	r2, [pc, #96]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004054:	4b16      	ldr	r3, [pc, #88]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d114      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd f846 	bl	80010f0 <HAL_GetTick>
 8004064:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd f842 	bl	80010f0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e351      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ee      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004096:	d111      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040a4:	4b04      	ldr	r3, [pc, #16]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040a6:	400b      	ands	r3, r1
 80040a8:	4901      	ldr	r1, [pc, #4]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40007000 	.word	0x40007000
 80040b8:	0ffffcff 	.word	0x0ffffcff
 80040bc:	4bac      	ldr	r3, [pc, #688]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4aab      	ldr	r2, [pc, #684]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	4ba9      	ldr	r3, [pc, #676]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	49a6      	ldr	r1, [pc, #664]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040e6:	4ba2      	ldr	r3, [pc, #648]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ec:	4aa0      	ldr	r2, [pc, #640]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	499b      	ldr	r1, [pc, #620]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004114:	4b96      	ldr	r3, [pc, #600]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004122:	4993      	ldr	r1, [pc, #588]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004136:	4b8e      	ldr	r3, [pc, #568]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004144:	498a      	ldr	r1, [pc, #552]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004158:	4b85      	ldr	r3, [pc, #532]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004166:	4982      	ldr	r1, [pc, #520]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800417a:	4b7d      	ldr	r3, [pc, #500]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004180:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004188:	4979      	ldr	r1, [pc, #484]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419c:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	4971      	ldr	r1, [pc, #452]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041be:	4b6c      	ldr	r3, [pc, #432]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f023 020c 	bic.w	r2, r3, #12
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	4968      	ldr	r1, [pc, #416]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e0:	4b63      	ldr	r3, [pc, #396]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ee:	4960      	ldr	r1, [pc, #384]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004202:	4b5b      	ldr	r3, [pc, #364]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004210:	4957      	ldr	r1, [pc, #348]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004224:	4b52      	ldr	r3, [pc, #328]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004232:	494f      	ldr	r1, [pc, #316]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004246:	4b4a      	ldr	r3, [pc, #296]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	4946      	ldr	r1, [pc, #280]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004268:	4b41      	ldr	r3, [pc, #260]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004276:	493e      	ldr	r1, [pc, #248]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800428a:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004290:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004298:	4935      	ldr	r1, [pc, #212]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042ac:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ba:	492d      	ldr	r1, [pc, #180]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d011      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042ce:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042dc:	4924      	ldr	r1, [pc, #144]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ec:	d101      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800430e:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004314:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	4914      	ldr	r1, [pc, #80]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004330:	4b0f      	ldr	r3, [pc, #60]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004340:	490b      	ldr	r1, [pc, #44]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004364:	4902      	ldr	r1, [pc, #8]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004380:	4b8a      	ldr	r3, [pc, #552]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004386:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	4986      	ldr	r1, [pc, #536]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043a4:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b4:	497d      	ldr	r1, [pc, #500]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d006      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80d6 	beq.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d0:	4b76      	ldr	r3, [pc, #472]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a75      	ldr	r2, [pc, #468]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fc fe88 	bl	80010f0 <HAL_GetTick>
 80043e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043e4:	f7fc fe84 	bl	80010f0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e195      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f6:	4b6d      	ldr	r3, [pc, #436]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d021      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004412:	2b00      	cmp	r3, #0
 8004414:	d11d      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004416:	4b65      	ldr	r3, [pc, #404]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004424:	4b61      	ldr	r3, [pc, #388]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800442a:	0e1b      	lsrs	r3, r3, #24
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	4958      	ldr	r1, [pc, #352]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004470:	2b00      	cmp	r3, #0
 8004472:	d02e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800447c:	d129      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800447e:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800448c:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004492:	0f1b      	lsrs	r3, r3, #28
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	019a      	lsls	r2, r3, #6
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	493e      	ldr	r1, [pc, #248]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044ba:	4b3c      	ldr	r3, [pc, #240]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	f023 021f 	bic.w	r2, r3, #31
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4938      	ldr	r1, [pc, #224]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01d      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044de:	4b33      	ldr	r3, [pc, #204]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e4:	0e1b      	lsrs	r3, r3, #24
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044ec:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f2:	0f1b      	lsrs	r3, r3, #28
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	019a      	lsls	r2, r3, #6
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	431a      	orrs	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	431a      	orrs	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	4926      	ldr	r1, [pc, #152]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d011      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	019a      	lsls	r2, r3, #6
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	491a      	ldr	r1, [pc, #104]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800454a:	4b18      	ldr	r3, [pc, #96]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004550:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fc fdcb 	bl	80010f0 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800455e:	f7fc fdc7 	bl	80010f0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	@ 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0d8      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004570:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b01      	cmp	r3, #1
 8004580:	f040 80ce 	bne.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fdae 	bl	80010f0 <HAL_GetTick>
 8004594:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004596:	e00b      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004598:	f7fc fdaa 	bl	80010f0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d904      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0bb      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b0:	4b5e      	ldr	r3, [pc, #376]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045bc:	d0ec      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12a      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045e6:	4b51      	ldr	r3, [pc, #324]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f4:	4b4d      	ldr	r3, [pc, #308]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	0f1b      	lsrs	r3, r3, #28
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	019a      	lsls	r2, r3, #6
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	4944      	ldr	r1, [pc, #272]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004622:	4b42      	ldr	r3, [pc, #264]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004628:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	493d      	ldr	r1, [pc, #244]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d022      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004650:	d11d      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004652:	4b36      	ldr	r3, [pc, #216]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004658:	0e1b      	lsrs	r3, r3, #24
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004660:	4b32      	ldr	r3, [pc, #200]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004666:	0f1b      	lsrs	r3, r3, #28
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	019a      	lsls	r2, r3, #6
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	4929      	ldr	r1, [pc, #164]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d028      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	0e1b      	lsrs	r3, r3, #24
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046a8:	4b20      	ldr	r3, [pc, #128]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	019a      	lsls	r2, r3, #6
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	431a      	orrs	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	071b      	lsls	r3, r3, #28
 80046ce:	4917      	ldr	r1, [pc, #92]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	4911      	ldr	r1, [pc, #68]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fc fcfa 	bl	80010f0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004700:	f7fc fcf6 	bl	80010f0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	@ 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e007      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800471a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800471e:	d1ef      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800

08004730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e049      	b.n	80047d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fae8 	bl	8000d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 f94a 	bl	8004a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ff      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b14      	cmp	r3, #20
 800480a:	f200 80f0 	bhi.w	80049ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004869 	.word	0x08004869
 8004818:	080049ef 	.word	0x080049ef
 800481c:	080049ef 	.word	0x080049ef
 8004820:	080049ef 	.word	0x080049ef
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080049ef 	.word	0x080049ef
 800482c:	080049ef 	.word	0x080049ef
 8004830:	080049ef 	.word	0x080049ef
 8004834:	080048eb 	.word	0x080048eb
 8004838:	080049ef 	.word	0x080049ef
 800483c:	080049ef 	.word	0x080049ef
 8004840:	080049ef 	.word	0x080049ef
 8004844:	0800492b 	.word	0x0800492b
 8004848:	080049ef 	.word	0x080049ef
 800484c:	080049ef 	.word	0x080049ef
 8004850:	080049ef 	.word	0x080049ef
 8004854:	0800496d 	.word	0x0800496d
 8004858:	080049ef 	.word	0x080049ef
 800485c:	080049ef 	.word	0x080049ef
 8004860:	080049ef 	.word	0x080049ef
 8004864:	080049ad 	.word	0x080049ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f976 	bl	8004b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0208 	orr.w	r2, r2, #8
 8004882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0204 	bic.w	r2, r2, #4
 8004892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	619a      	str	r2, [r3, #24]
      break;
 80048a6:	e0a5      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f9c8 	bl	8004c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
      break;
 80048e8:	e084      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa1f 	bl	8004d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0208 	orr.w	r2, r2, #8
 8004904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0204 	bic.w	r2, r2, #4
 8004914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	61da      	str	r2, [r3, #28]
      break;
 8004928:	e064      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fa75 	bl	8004e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	61da      	str	r2, [r3, #28]
      break;
 800496a:	e043      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 faac 	bl	8004ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0208 	orr.w	r2, r2, #8
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0204 	bic.w	r2, r2, #4
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049aa:	e023      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fade 	bl	8004f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049ec:	e002      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
      break;
 80049f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a46      	ldr	r2, [pc, #280]	@ (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	d00f      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a43      	ldr	r2, [pc, #268]	@ (8004b38 <TIM_Base_SetConfig+0x130>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a42      	ldr	r2, [pc, #264]	@ (8004b3c <TIM_Base_SetConfig+0x134>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a41      	ldr	r2, [pc, #260]	@ (8004b40 <TIM_Base_SetConfig+0x138>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a40      	ldr	r2, [pc, #256]	@ (8004b44 <TIM_Base_SetConfig+0x13c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d108      	bne.n	8004a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a35      	ldr	r2, [pc, #212]	@ (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d02b      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a68:	d027      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a32      	ldr	r2, [pc, #200]	@ (8004b38 <TIM_Base_SetConfig+0x130>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d023      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a31      	ldr	r2, [pc, #196]	@ (8004b3c <TIM_Base_SetConfig+0x134>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01f      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a30      	ldr	r2, [pc, #192]	@ (8004b40 <TIM_Base_SetConfig+0x138>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01b      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	@ (8004b44 <TIM_Base_SetConfig+0x13c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d017      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b48 <TIM_Base_SetConfig+0x140>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2d      	ldr	r2, [pc, #180]	@ (8004b4c <TIM_Base_SetConfig+0x144>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b50 <TIM_Base_SetConfig+0x148>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b54 <TIM_Base_SetConfig+0x14c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <TIM_Base_SetConfig+0x150>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <TIM_Base_SetConfig+0x154>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a10      	ldr	r2, [pc, #64]	@ (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0xf8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <TIM_Base_SetConfig+0x13c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d103      	bne.n	8004b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]
  }
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800
 8004b54:	40001800 	.word	0x40001800
 8004b58:	40001c00 	.word	0x40001c00
 8004b5c:	40002000 	.word	0x40002000

08004b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f023 0201 	bic.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <TIM_OC1_SetConfig+0xd8>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0302 	bic.w	r3, r3, #2
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	@ (8004c3c <TIM_OC1_SetConfig+0xdc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC1_SetConfig+0x64>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a20      	ldr	r2, [pc, #128]	@ (8004c40 <TIM_OC1_SetConfig+0xe0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10c      	bne.n	8004bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0308 	bic.w	r3, r3, #8
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <TIM_OC1_SetConfig+0xdc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC1_SetConfig+0x8e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <TIM_OC1_SetConfig+0xe0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d111      	bne.n	8004c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	fffeff8f 	.word	0xfffeff8f
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f023 0210 	bic.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d28 <TIM_OC2_SetConfig+0xe4>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0320 	bic.w	r3, r3, #32
 8004c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <TIM_OC2_SetConfig+0xe8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC2_SetConfig+0x68>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	@ (8004d30 <TIM_OC2_SetConfig+0xec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10d      	bne.n	8004cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <TIM_OC2_SetConfig+0xe8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC2_SetConfig+0x94>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <TIM_OC2_SetConfig+0xec>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d113      	bne.n	8004d00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	feff8fff 	.word	0xfeff8fff
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <TIM_OC3_SetConfig+0xe0>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a22      	ldr	r2, [pc, #136]	@ (8004e18 <TIM_OC3_SetConfig+0xe4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC3_SetConfig+0x66>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a21      	ldr	r2, [pc, #132]	@ (8004e1c <TIM_OC3_SetConfig+0xe8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10d      	bne.n	8004db6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <TIM_OC3_SetConfig+0xe4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_OC3_SetConfig+0x92>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <TIM_OC3_SetConfig+0xe8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d113      	bne.n	8004dee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	fffeff8f 	.word	0xfffeff8f
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec4 <TIM_OC4_SetConfig+0xa4>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <TIM_OC4_SetConfig+0xa8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC4_SetConfig+0x68>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <TIM_OC4_SetConfig+0xac>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	feff8fff 	.word	0xfeff8fff
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <TIM_OC5_SetConfig+0x98>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a12      	ldr	r2, [pc, #72]	@ (8004f6c <TIM_OC5_SetConfig+0x9c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC5_SetConfig+0x5e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a11      	ldr	r2, [pc, #68]	@ (8004f70 <TIM_OC5_SetConfig+0xa0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d109      	bne.n	8004f42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	fffeff8f 	.word	0xfffeff8f
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005010 <TIM_OC6_SetConfig+0x9c>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	051b      	lsls	r3, r3, #20
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a13      	ldr	r2, [pc, #76]	@ (8005014 <TIM_OC6_SetConfig+0xa0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_OC6_SetConfig+0x60>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <TIM_OC6_SetConfig+0xa4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d109      	bne.n	8004fe8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	029b      	lsls	r3, r3, #10
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	feff8fff 	.word	0xfeff8fff
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400

0800501c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005030:	2302      	movs	r3, #2
 8005032:	e06d      	b.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a30      	ldr	r2, [pc, #192]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2f      	ldr	r2, [pc, #188]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800506e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a20      	ldr	r2, [pc, #128]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a6:	d01d      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a15      	ldr	r2, [pc, #84]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10c      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40014000 	.word	0x40014000
 8005134:	40001800 	.word	0x40001800

08005138 <std>:
 8005138:	2300      	movs	r3, #0
 800513a:	b510      	push	{r4, lr}
 800513c:	4604      	mov	r4, r0
 800513e:	e9c0 3300 	strd	r3, r3, [r0]
 8005142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005146:	6083      	str	r3, [r0, #8]
 8005148:	8181      	strh	r1, [r0, #12]
 800514a:	6643      	str	r3, [r0, #100]	@ 0x64
 800514c:	81c2      	strh	r2, [r0, #14]
 800514e:	6183      	str	r3, [r0, #24]
 8005150:	4619      	mov	r1, r3
 8005152:	2208      	movs	r2, #8
 8005154:	305c      	adds	r0, #92	@ 0x5c
 8005156:	f000 f9e7 	bl	8005528 <memset>
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <std+0x58>)
 800515c:	6263      	str	r3, [r4, #36]	@ 0x24
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <std+0x5c>)
 8005160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <std+0x60>)
 8005164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <std+0x64>)
 8005168:	6323      	str	r3, [r4, #48]	@ 0x30
 800516a:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <std+0x68>)
 800516c:	6224      	str	r4, [r4, #32]
 800516e:	429c      	cmp	r4, r3
 8005170:	d006      	beq.n	8005180 <std+0x48>
 8005172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005176:	4294      	cmp	r4, r2
 8005178:	d002      	beq.n	8005180 <std+0x48>
 800517a:	33d0      	adds	r3, #208	@ 0xd0
 800517c:	429c      	cmp	r4, r3
 800517e:	d105      	bne.n	800518c <std+0x54>
 8005180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	f000 ba46 	b.w	8005618 <__retarget_lock_init_recursive>
 800518c:	bd10      	pop	{r4, pc}
 800518e:	bf00      	nop
 8005190:	08005379 	.word	0x08005379
 8005194:	0800539b 	.word	0x0800539b
 8005198:	080053d3 	.word	0x080053d3
 800519c:	080053f7 	.word	0x080053f7
 80051a0:	200001f4 	.word	0x200001f4

080051a4 <stdio_exit_handler>:
 80051a4:	4a02      	ldr	r2, [pc, #8]	@ (80051b0 <stdio_exit_handler+0xc>)
 80051a6:	4903      	ldr	r1, [pc, #12]	@ (80051b4 <stdio_exit_handler+0x10>)
 80051a8:	4803      	ldr	r0, [pc, #12]	@ (80051b8 <stdio_exit_handler+0x14>)
 80051aa:	f000 b869 	b.w	8005280 <_fwalk_sglue>
 80051ae:	bf00      	nop
 80051b0:	20000010 	.word	0x20000010
 80051b4:	08005919 	.word	0x08005919
 80051b8:	20000020 	.word	0x20000020

080051bc <cleanup_stdio>:
 80051bc:	6841      	ldr	r1, [r0, #4]
 80051be:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <cleanup_stdio+0x34>)
 80051c0:	4299      	cmp	r1, r3
 80051c2:	b510      	push	{r4, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	d001      	beq.n	80051cc <cleanup_stdio+0x10>
 80051c8:	f000 fba6 	bl	8005918 <_fflush_r>
 80051cc:	68a1      	ldr	r1, [r4, #8]
 80051ce:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <cleanup_stdio+0x38>)
 80051d0:	4299      	cmp	r1, r3
 80051d2:	d002      	beq.n	80051da <cleanup_stdio+0x1e>
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 fb9f 	bl	8005918 <_fflush_r>
 80051da:	68e1      	ldr	r1, [r4, #12]
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <cleanup_stdio+0x3c>)
 80051de:	4299      	cmp	r1, r3
 80051e0:	d004      	beq.n	80051ec <cleanup_stdio+0x30>
 80051e2:	4620      	mov	r0, r4
 80051e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e8:	f000 bb96 	b.w	8005918 <_fflush_r>
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	200001f4 	.word	0x200001f4
 80051f4:	2000025c 	.word	0x2000025c
 80051f8:	200002c4 	.word	0x200002c4

080051fc <global_stdio_init.part.0>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <global_stdio_init.part.0+0x30>)
 8005200:	4c0b      	ldr	r4, [pc, #44]	@ (8005230 <global_stdio_init.part.0+0x34>)
 8005202:	4a0c      	ldr	r2, [pc, #48]	@ (8005234 <global_stdio_init.part.0+0x38>)
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	4620      	mov	r0, r4
 8005208:	2200      	movs	r2, #0
 800520a:	2104      	movs	r1, #4
 800520c:	f7ff ff94 	bl	8005138 <std>
 8005210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005214:	2201      	movs	r2, #1
 8005216:	2109      	movs	r1, #9
 8005218:	f7ff ff8e 	bl	8005138 <std>
 800521c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005220:	2202      	movs	r2, #2
 8005222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005226:	2112      	movs	r1, #18
 8005228:	f7ff bf86 	b.w	8005138 <std>
 800522c:	2000032c 	.word	0x2000032c
 8005230:	200001f4 	.word	0x200001f4
 8005234:	080051a5 	.word	0x080051a5

08005238 <__sfp_lock_acquire>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__sfp_lock_acquire+0x8>)
 800523a:	f000 b9ee 	b.w	800561a <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	20000335 	.word	0x20000335

08005244 <__sfp_lock_release>:
 8005244:	4801      	ldr	r0, [pc, #4]	@ (800524c <__sfp_lock_release+0x8>)
 8005246:	f000 b9e9 	b.w	800561c <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	20000335 	.word	0x20000335

08005250 <__sinit>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4604      	mov	r4, r0
 8005254:	f7ff fff0 	bl	8005238 <__sfp_lock_acquire>
 8005258:	6a23      	ldr	r3, [r4, #32]
 800525a:	b11b      	cbz	r3, 8005264 <__sinit+0x14>
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f7ff bff0 	b.w	8005244 <__sfp_lock_release>
 8005264:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <__sinit+0x28>)
 8005266:	6223      	str	r3, [r4, #32]
 8005268:	4b04      	ldr	r3, [pc, #16]	@ (800527c <__sinit+0x2c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f5      	bne.n	800525c <__sinit+0xc>
 8005270:	f7ff ffc4 	bl	80051fc <global_stdio_init.part.0>
 8005274:	e7f2      	b.n	800525c <__sinit+0xc>
 8005276:	bf00      	nop
 8005278:	080051bd 	.word	0x080051bd
 800527c:	2000032c 	.word	0x2000032c

08005280 <_fwalk_sglue>:
 8005280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005284:	4607      	mov	r7, r0
 8005286:	4688      	mov	r8, r1
 8005288:	4614      	mov	r4, r2
 800528a:	2600      	movs	r6, #0
 800528c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005290:	f1b9 0901 	subs.w	r9, r9, #1
 8005294:	d505      	bpl.n	80052a2 <_fwalk_sglue+0x22>
 8005296:	6824      	ldr	r4, [r4, #0]
 8005298:	2c00      	cmp	r4, #0
 800529a:	d1f7      	bne.n	800528c <_fwalk_sglue+0xc>
 800529c:	4630      	mov	r0, r6
 800529e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d907      	bls.n	80052b8 <_fwalk_sglue+0x38>
 80052a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ac:	3301      	adds	r3, #1
 80052ae:	d003      	beq.n	80052b8 <_fwalk_sglue+0x38>
 80052b0:	4629      	mov	r1, r5
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	4306      	orrs	r6, r0
 80052b8:	3568      	adds	r5, #104	@ 0x68
 80052ba:	e7e9      	b.n	8005290 <_fwalk_sglue+0x10>

080052bc <_puts_r>:
 80052bc:	6a03      	ldr	r3, [r0, #32]
 80052be:	b570      	push	{r4, r5, r6, lr}
 80052c0:	6884      	ldr	r4, [r0, #8]
 80052c2:	4605      	mov	r5, r0
 80052c4:	460e      	mov	r6, r1
 80052c6:	b90b      	cbnz	r3, 80052cc <_puts_r+0x10>
 80052c8:	f7ff ffc2 	bl	8005250 <__sinit>
 80052cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052ce:	07db      	lsls	r3, r3, #31
 80052d0:	d405      	bmi.n	80052de <_puts_r+0x22>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	0598      	lsls	r0, r3, #22
 80052d6:	d402      	bmi.n	80052de <_puts_r+0x22>
 80052d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052da:	f000 f99e 	bl	800561a <__retarget_lock_acquire_recursive>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	0719      	lsls	r1, r3, #28
 80052e2:	d502      	bpl.n	80052ea <_puts_r+0x2e>
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d135      	bne.n	8005356 <_puts_r+0x9a>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f8c5 	bl	800547c <__swsetup_r>
 80052f2:	b380      	cbz	r0, 8005356 <_puts_r+0x9a>
 80052f4:	f04f 35ff 	mov.w	r5, #4294967295
 80052f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052fa:	07da      	lsls	r2, r3, #31
 80052fc:	d405      	bmi.n	800530a <_puts_r+0x4e>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d402      	bmi.n	800530a <_puts_r+0x4e>
 8005304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005306:	f000 f989 	bl	800561c <__retarget_lock_release_recursive>
 800530a:	4628      	mov	r0, r5
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	2b00      	cmp	r3, #0
 8005310:	da04      	bge.n	800531c <_puts_r+0x60>
 8005312:	69a2      	ldr	r2, [r4, #24]
 8005314:	429a      	cmp	r2, r3
 8005316:	dc17      	bgt.n	8005348 <_puts_r+0x8c>
 8005318:	290a      	cmp	r1, #10
 800531a:	d015      	beq.n	8005348 <_puts_r+0x8c>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	6022      	str	r2, [r4, #0]
 8005322:	7019      	strb	r1, [r3, #0]
 8005324:	68a3      	ldr	r3, [r4, #8]
 8005326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800532a:	3b01      	subs	r3, #1
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	2900      	cmp	r1, #0
 8005330:	d1ed      	bne.n	800530e <_puts_r+0x52>
 8005332:	2b00      	cmp	r3, #0
 8005334:	da11      	bge.n	800535a <_puts_r+0x9e>
 8005336:	4622      	mov	r2, r4
 8005338:	210a      	movs	r1, #10
 800533a:	4628      	mov	r0, r5
 800533c:	f000 f85f 	bl	80053fe <__swbuf_r>
 8005340:	3001      	adds	r0, #1
 8005342:	d0d7      	beq.n	80052f4 <_puts_r+0x38>
 8005344:	250a      	movs	r5, #10
 8005346:	e7d7      	b.n	80052f8 <_puts_r+0x3c>
 8005348:	4622      	mov	r2, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f857 	bl	80053fe <__swbuf_r>
 8005350:	3001      	adds	r0, #1
 8005352:	d1e7      	bne.n	8005324 <_puts_r+0x68>
 8005354:	e7ce      	b.n	80052f4 <_puts_r+0x38>
 8005356:	3e01      	subs	r6, #1
 8005358:	e7e4      	b.n	8005324 <_puts_r+0x68>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	6022      	str	r2, [r4, #0]
 8005360:	220a      	movs	r2, #10
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e7ee      	b.n	8005344 <_puts_r+0x88>
	...

08005368 <puts>:
 8005368:	4b02      	ldr	r3, [pc, #8]	@ (8005374 <puts+0xc>)
 800536a:	4601      	mov	r1, r0
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	f7ff bfa5 	b.w	80052bc <_puts_r>
 8005372:	bf00      	nop
 8005374:	2000001c 	.word	0x2000001c

08005378 <__sread>:
 8005378:	b510      	push	{r4, lr}
 800537a:	460c      	mov	r4, r1
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	f000 f8fc 	bl	800557c <_read_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	bfab      	itete	ge
 8005388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800538a:	89a3      	ldrhlt	r3, [r4, #12]
 800538c:	181b      	addge	r3, r3, r0
 800538e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005392:	bfac      	ite	ge
 8005394:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005396:	81a3      	strhlt	r3, [r4, #12]
 8005398:	bd10      	pop	{r4, pc}

0800539a <__swrite>:
 800539a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	461f      	mov	r7, r3
 80053a0:	898b      	ldrh	r3, [r1, #12]
 80053a2:	05db      	lsls	r3, r3, #23
 80053a4:	4605      	mov	r5, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	4616      	mov	r6, r2
 80053aa:	d505      	bpl.n	80053b8 <__swrite+0x1e>
 80053ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b0:	2302      	movs	r3, #2
 80053b2:	2200      	movs	r2, #0
 80053b4:	f000 f8d0 	bl	8005558 <_lseek_r>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053c2:	81a3      	strh	r3, [r4, #12]
 80053c4:	4632      	mov	r2, r6
 80053c6:	463b      	mov	r3, r7
 80053c8:	4628      	mov	r0, r5
 80053ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	f000 b8e7 	b.w	80055a0 <_write_r>

080053d2 <__sseek>:
 80053d2:	b510      	push	{r4, lr}
 80053d4:	460c      	mov	r4, r1
 80053d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053da:	f000 f8bd 	bl	8005558 <_lseek_r>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	bf15      	itete	ne
 80053e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ee:	81a3      	strheq	r3, [r4, #12]
 80053f0:	bf18      	it	ne
 80053f2:	81a3      	strhne	r3, [r4, #12]
 80053f4:	bd10      	pop	{r4, pc}

080053f6 <__sclose>:
 80053f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fa:	f000 b89d 	b.w	8005538 <_close_r>

080053fe <__swbuf_r>:
 80053fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005400:	460e      	mov	r6, r1
 8005402:	4614      	mov	r4, r2
 8005404:	4605      	mov	r5, r0
 8005406:	b118      	cbz	r0, 8005410 <__swbuf_r+0x12>
 8005408:	6a03      	ldr	r3, [r0, #32]
 800540a:	b90b      	cbnz	r3, 8005410 <__swbuf_r+0x12>
 800540c:	f7ff ff20 	bl	8005250 <__sinit>
 8005410:	69a3      	ldr	r3, [r4, #24]
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	071a      	lsls	r2, r3, #28
 8005418:	d501      	bpl.n	800541e <__swbuf_r+0x20>
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	b943      	cbnz	r3, 8005430 <__swbuf_r+0x32>
 800541e:	4621      	mov	r1, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f82b 	bl	800547c <__swsetup_r>
 8005426:	b118      	cbz	r0, 8005430 <__swbuf_r+0x32>
 8005428:	f04f 37ff 	mov.w	r7, #4294967295
 800542c:	4638      	mov	r0, r7
 800542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	6922      	ldr	r2, [r4, #16]
 8005434:	1a98      	subs	r0, r3, r2
 8005436:	6963      	ldr	r3, [r4, #20]
 8005438:	b2f6      	uxtb	r6, r6
 800543a:	4283      	cmp	r3, r0
 800543c:	4637      	mov	r7, r6
 800543e:	dc05      	bgt.n	800544c <__swbuf_r+0x4e>
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fa68 	bl	8005918 <_fflush_r>
 8005448:	2800      	cmp	r0, #0
 800544a:	d1ed      	bne.n	8005428 <__swbuf_r+0x2a>
 800544c:	68a3      	ldr	r3, [r4, #8]
 800544e:	3b01      	subs	r3, #1
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	6022      	str	r2, [r4, #0]
 8005458:	701e      	strb	r6, [r3, #0]
 800545a:	6962      	ldr	r2, [r4, #20]
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	429a      	cmp	r2, r3
 8005460:	d004      	beq.n	800546c <__swbuf_r+0x6e>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	07db      	lsls	r3, r3, #31
 8005466:	d5e1      	bpl.n	800542c <__swbuf_r+0x2e>
 8005468:	2e0a      	cmp	r6, #10
 800546a:	d1df      	bne.n	800542c <__swbuf_r+0x2e>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fa52 	bl	8005918 <_fflush_r>
 8005474:	2800      	cmp	r0, #0
 8005476:	d0d9      	beq.n	800542c <__swbuf_r+0x2e>
 8005478:	e7d6      	b.n	8005428 <__swbuf_r+0x2a>
	...

0800547c <__swsetup_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4b29      	ldr	r3, [pc, #164]	@ (8005524 <__swsetup_r+0xa8>)
 8005480:	4605      	mov	r5, r0
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	460c      	mov	r4, r1
 8005486:	b118      	cbz	r0, 8005490 <__swsetup_r+0x14>
 8005488:	6a03      	ldr	r3, [r0, #32]
 800548a:	b90b      	cbnz	r3, 8005490 <__swsetup_r+0x14>
 800548c:	f7ff fee0 	bl	8005250 <__sinit>
 8005490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005494:	0719      	lsls	r1, r3, #28
 8005496:	d422      	bmi.n	80054de <__swsetup_r+0x62>
 8005498:	06da      	lsls	r2, r3, #27
 800549a:	d407      	bmi.n	80054ac <__swsetup_r+0x30>
 800549c:	2209      	movs	r2, #9
 800549e:	602a      	str	r2, [r5, #0]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	e033      	b.n	8005514 <__swsetup_r+0x98>
 80054ac:	0758      	lsls	r0, r3, #29
 80054ae:	d512      	bpl.n	80054d6 <__swsetup_r+0x5a>
 80054b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054b2:	b141      	cbz	r1, 80054c6 <__swsetup_r+0x4a>
 80054b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054b8:	4299      	cmp	r1, r3
 80054ba:	d002      	beq.n	80054c2 <__swsetup_r+0x46>
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f8af 	bl	8005620 <_free_r>
 80054c2:	2300      	movs	r3, #0
 80054c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	b94b      	cbnz	r3, 80054f6 <__swsetup_r+0x7a>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ec:	d003      	beq.n	80054f6 <__swsetup_r+0x7a>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 fa5f 	bl	80059b4 <__smakebuf_r>
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	f013 0201 	ands.w	r2, r3, #1
 80054fe:	d00a      	beq.n	8005516 <__swsetup_r+0x9a>
 8005500:	2200      	movs	r2, #0
 8005502:	60a2      	str	r2, [r4, #8]
 8005504:	6962      	ldr	r2, [r4, #20]
 8005506:	4252      	negs	r2, r2
 8005508:	61a2      	str	r2, [r4, #24]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	b942      	cbnz	r2, 8005520 <__swsetup_r+0xa4>
 800550e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005512:	d1c5      	bne.n	80054a0 <__swsetup_r+0x24>
 8005514:	bd38      	pop	{r3, r4, r5, pc}
 8005516:	0799      	lsls	r1, r3, #30
 8005518:	bf58      	it	pl
 800551a:	6962      	ldrpl	r2, [r4, #20]
 800551c:	60a2      	str	r2, [r4, #8]
 800551e:	e7f4      	b.n	800550a <__swsetup_r+0x8e>
 8005520:	2000      	movs	r0, #0
 8005522:	e7f7      	b.n	8005514 <__swsetup_r+0x98>
 8005524:	2000001c 	.word	0x2000001c

08005528 <memset>:
 8005528:	4402      	add	r2, r0
 800552a:	4603      	mov	r3, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <_close_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_close_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fcdd 	bl	8000f02 <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_close_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_close_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000330 	.word	0x20000330

08005558 <_lseek_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_lseek_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fb fcf2 	bl	8000f50 <_lseek>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_lseek_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_lseek_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000330 	.word	0x20000330

0800557c <_read_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	@ (800559c <_read_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fc80 	bl	8000e90 <_read>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_read_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_read_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000330 	.word	0x20000330

080055a0 <_write_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	@ (80055c0 <_write_r+0x20>)
 80055a4:	4604      	mov	r4, r0
 80055a6:	4608      	mov	r0, r1
 80055a8:	4611      	mov	r1, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	602a      	str	r2, [r5, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fb fc8b 	bl	8000eca <_write>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_write_r+0x1e>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_write_r+0x1e>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000330 	.word	0x20000330

080055c4 <__errno>:
 80055c4:	4b01      	ldr	r3, [pc, #4]	@ (80055cc <__errno+0x8>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	2000001c 	.word	0x2000001c

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	@ (800560c <__libc_init_array+0x3c>)
 80055d6:	1b64      	subs	r4, r4, r5
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2600      	movs	r6, #0
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005614 <__libc_init_array+0x44>)
 80055e4:	f000 fa54 	bl	8005a90 <_init>
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2600      	movs	r6, #0
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	08005ad8 	.word	0x08005ad8
 800560c:	08005ad8 	.word	0x08005ad8
 8005610:	08005ad8 	.word	0x08005ad8
 8005614:	08005adc 	.word	0x08005adc

08005618 <__retarget_lock_init_recursive>:
 8005618:	4770      	bx	lr

0800561a <__retarget_lock_acquire_recursive>:
 800561a:	4770      	bx	lr

0800561c <__retarget_lock_release_recursive>:
 800561c:	4770      	bx	lr
	...

08005620 <_free_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	2900      	cmp	r1, #0
 8005626:	d041      	beq.n	80056ac <_free_r+0x8c>
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f0c      	subs	r4, r1, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfb8      	it	lt
 8005632:	18e4      	addlt	r4, r4, r3
 8005634:	f000 f8e0 	bl	80057f8 <__malloc_lock>
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <_free_r+0x90>)
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	b933      	cbnz	r3, 800564c <_free_r+0x2c>
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	6014      	str	r4, [r2, #0]
 8005642:	4628      	mov	r0, r5
 8005644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005648:	f000 b8dc 	b.w	8005804 <__malloc_unlock>
 800564c:	42a3      	cmp	r3, r4
 800564e:	d908      	bls.n	8005662 <_free_r+0x42>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	bf01      	itttt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	1809      	addeq	r1, r1, r0
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	e7ed      	b.n	800563e <_free_r+0x1e>
 8005662:	461a      	mov	r2, r3
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	b10b      	cbz	r3, 800566c <_free_r+0x4c>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d9fa      	bls.n	8005662 <_free_r+0x42>
 800566c:	6811      	ldr	r1, [r2, #0]
 800566e:	1850      	adds	r0, r2, r1
 8005670:	42a0      	cmp	r0, r4
 8005672:	d10b      	bne.n	800568c <_free_r+0x6c>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	4401      	add	r1, r0
 8005678:	1850      	adds	r0, r2, r1
 800567a:	4283      	cmp	r3, r0
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	d1e0      	bne.n	8005642 <_free_r+0x22>
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	6053      	str	r3, [r2, #4]
 8005686:	4408      	add	r0, r1
 8005688:	6010      	str	r0, [r2, #0]
 800568a:	e7da      	b.n	8005642 <_free_r+0x22>
 800568c:	d902      	bls.n	8005694 <_free_r+0x74>
 800568e:	230c      	movs	r3, #12
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	e7d6      	b.n	8005642 <_free_r+0x22>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	1821      	adds	r1, r4, r0
 8005698:	428b      	cmp	r3, r1
 800569a:	bf04      	itt	eq
 800569c:	6819      	ldreq	r1, [r3, #0]
 800569e:	685b      	ldreq	r3, [r3, #4]
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	bf04      	itt	eq
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	6054      	str	r4, [r2, #4]
 80056aa:	e7ca      	b.n	8005642 <_free_r+0x22>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	2000033c 	.word	0x2000033c

080056b4 <sbrk_aligned>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4e0f      	ldr	r6, [pc, #60]	@ (80056f4 <sbrk_aligned+0x40>)
 80056b8:	460c      	mov	r4, r1
 80056ba:	6831      	ldr	r1, [r6, #0]
 80056bc:	4605      	mov	r5, r0
 80056be:	b911      	cbnz	r1, 80056c6 <sbrk_aligned+0x12>
 80056c0:	f000 f9d6 	bl	8005a70 <_sbrk_r>
 80056c4:	6030      	str	r0, [r6, #0]
 80056c6:	4621      	mov	r1, r4
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 f9d1 	bl	8005a70 <_sbrk_r>
 80056ce:	1c43      	adds	r3, r0, #1
 80056d0:	d103      	bne.n	80056da <sbrk_aligned+0x26>
 80056d2:	f04f 34ff 	mov.w	r4, #4294967295
 80056d6:	4620      	mov	r0, r4
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	1cc4      	adds	r4, r0, #3
 80056dc:	f024 0403 	bic.w	r4, r4, #3
 80056e0:	42a0      	cmp	r0, r4
 80056e2:	d0f8      	beq.n	80056d6 <sbrk_aligned+0x22>
 80056e4:	1a21      	subs	r1, r4, r0
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f9c2 	bl	8005a70 <_sbrk_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d1f2      	bne.n	80056d6 <sbrk_aligned+0x22>
 80056f0:	e7ef      	b.n	80056d2 <sbrk_aligned+0x1e>
 80056f2:	bf00      	nop
 80056f4:	20000338 	.word	0x20000338

080056f8 <_malloc_r>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4606      	mov	r6, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d904      	bls.n	800571e <_malloc_r+0x26>
 8005714:	230c      	movs	r3, #12
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	2000      	movs	r0, #0
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057f4 <_malloc_r+0xfc>
 8005722:	f000 f869 	bl	80057f8 <__malloc_lock>
 8005726:	f8d8 3000 	ldr.w	r3, [r8]
 800572a:	461c      	mov	r4, r3
 800572c:	bb44      	cbnz	r4, 8005780 <_malloc_r+0x88>
 800572e:	4629      	mov	r1, r5
 8005730:	4630      	mov	r0, r6
 8005732:	f7ff ffbf 	bl	80056b4 <sbrk_aligned>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	4604      	mov	r4, r0
 800573a:	d158      	bne.n	80057ee <_malloc_r+0xf6>
 800573c:	f8d8 4000 	ldr.w	r4, [r8]
 8005740:	4627      	mov	r7, r4
 8005742:	2f00      	cmp	r7, #0
 8005744:	d143      	bne.n	80057ce <_malloc_r+0xd6>
 8005746:	2c00      	cmp	r4, #0
 8005748:	d04b      	beq.n	80057e2 <_malloc_r+0xea>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	4639      	mov	r1, r7
 800574e:	4630      	mov	r0, r6
 8005750:	eb04 0903 	add.w	r9, r4, r3
 8005754:	f000 f98c 	bl	8005a70 <_sbrk_r>
 8005758:	4581      	cmp	r9, r0
 800575a:	d142      	bne.n	80057e2 <_malloc_r+0xea>
 800575c:	6821      	ldr	r1, [r4, #0]
 800575e:	1a6d      	subs	r5, r5, r1
 8005760:	4629      	mov	r1, r5
 8005762:	4630      	mov	r0, r6
 8005764:	f7ff ffa6 	bl	80056b4 <sbrk_aligned>
 8005768:	3001      	adds	r0, #1
 800576a:	d03a      	beq.n	80057e2 <_malloc_r+0xea>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	442b      	add	r3, r5
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	f8d8 3000 	ldr.w	r3, [r8]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	bb62      	cbnz	r2, 80057d4 <_malloc_r+0xdc>
 800577a:	f8c8 7000 	str.w	r7, [r8]
 800577e:	e00f      	b.n	80057a0 <_malloc_r+0xa8>
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	1b52      	subs	r2, r2, r5
 8005784:	d420      	bmi.n	80057c8 <_malloc_r+0xd0>
 8005786:	2a0b      	cmp	r2, #11
 8005788:	d917      	bls.n	80057ba <_malloc_r+0xc2>
 800578a:	1961      	adds	r1, r4, r5
 800578c:	42a3      	cmp	r3, r4
 800578e:	6025      	str	r5, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	6059      	strne	r1, [r3, #4]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	bf08      	it	eq
 8005798:	f8c8 1000 	streq.w	r1, [r8]
 800579c:	5162      	str	r2, [r4, r5]
 800579e:	604b      	str	r3, [r1, #4]
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f82f 	bl	8005804 <__malloc_unlock>
 80057a6:	f104 000b 	add.w	r0, r4, #11
 80057aa:	1d23      	adds	r3, r4, #4
 80057ac:	f020 0007 	bic.w	r0, r0, #7
 80057b0:	1ac2      	subs	r2, r0, r3
 80057b2:	bf1c      	itt	ne
 80057b4:	1a1b      	subne	r3, r3, r0
 80057b6:	50a3      	strne	r3, [r4, r2]
 80057b8:	e7af      	b.n	800571a <_malloc_r+0x22>
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	42a3      	cmp	r3, r4
 80057be:	bf0c      	ite	eq
 80057c0:	f8c8 2000 	streq.w	r2, [r8]
 80057c4:	605a      	strne	r2, [r3, #4]
 80057c6:	e7eb      	b.n	80057a0 <_malloc_r+0xa8>
 80057c8:	4623      	mov	r3, r4
 80057ca:	6864      	ldr	r4, [r4, #4]
 80057cc:	e7ae      	b.n	800572c <_malloc_r+0x34>
 80057ce:	463c      	mov	r4, r7
 80057d0:	687f      	ldr	r7, [r7, #4]
 80057d2:	e7b6      	b.n	8005742 <_malloc_r+0x4a>
 80057d4:	461a      	mov	r2, r3
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d1fb      	bne.n	80057d4 <_malloc_r+0xdc>
 80057dc:	2300      	movs	r3, #0
 80057de:	6053      	str	r3, [r2, #4]
 80057e0:	e7de      	b.n	80057a0 <_malloc_r+0xa8>
 80057e2:	230c      	movs	r3, #12
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 f80c 	bl	8005804 <__malloc_unlock>
 80057ec:	e794      	b.n	8005718 <_malloc_r+0x20>
 80057ee:	6005      	str	r5, [r0, #0]
 80057f0:	e7d6      	b.n	80057a0 <_malloc_r+0xa8>
 80057f2:	bf00      	nop
 80057f4:	2000033c 	.word	0x2000033c

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	@ (8005800 <__malloc_lock+0x8>)
 80057fa:	f7ff bf0e 	b.w	800561a <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20000334 	.word	0x20000334

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	@ (800580c <__malloc_unlock+0x8>)
 8005806:	f7ff bf09 	b.w	800561c <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20000334 	.word	0x20000334

08005810 <__sflush_r>:
 8005810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	0716      	lsls	r6, r2, #28
 800581a:	4605      	mov	r5, r0
 800581c:	460c      	mov	r4, r1
 800581e:	d454      	bmi.n	80058ca <__sflush_r+0xba>
 8005820:	684b      	ldr	r3, [r1, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	dc02      	bgt.n	800582c <__sflush_r+0x1c>
 8005826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	dd48      	ble.n	80058be <__sflush_r+0xae>
 800582c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800582e:	2e00      	cmp	r6, #0
 8005830:	d045      	beq.n	80058be <__sflush_r+0xae>
 8005832:	2300      	movs	r3, #0
 8005834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005838:	682f      	ldr	r7, [r5, #0]
 800583a:	6a21      	ldr	r1, [r4, #32]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	d030      	beq.n	80058a2 <__sflush_r+0x92>
 8005840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	0759      	lsls	r1, r3, #29
 8005846:	d505      	bpl.n	8005854 <__sflush_r+0x44>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800584e:	b10b      	cbz	r3, 8005854 <__sflush_r+0x44>
 8005850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005858:	6a21      	ldr	r1, [r4, #32]
 800585a:	4628      	mov	r0, r5
 800585c:	47b0      	blx	r6
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	d106      	bne.n	8005872 <__sflush_r+0x62>
 8005864:	6829      	ldr	r1, [r5, #0]
 8005866:	291d      	cmp	r1, #29
 8005868:	d82b      	bhi.n	80058c2 <__sflush_r+0xb2>
 800586a:	4a2a      	ldr	r2, [pc, #168]	@ (8005914 <__sflush_r+0x104>)
 800586c:	410a      	asrs	r2, r1
 800586e:	07d6      	lsls	r6, r2, #31
 8005870:	d427      	bmi.n	80058c2 <__sflush_r+0xb2>
 8005872:	2200      	movs	r2, #0
 8005874:	6062      	str	r2, [r4, #4]
 8005876:	04d9      	lsls	r1, r3, #19
 8005878:	6922      	ldr	r2, [r4, #16]
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	d504      	bpl.n	8005888 <__sflush_r+0x78>
 800587e:	1c42      	adds	r2, r0, #1
 8005880:	d101      	bne.n	8005886 <__sflush_r+0x76>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	b903      	cbnz	r3, 8005888 <__sflush_r+0x78>
 8005886:	6560      	str	r0, [r4, #84]	@ 0x54
 8005888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800588a:	602f      	str	r7, [r5, #0]
 800588c:	b1b9      	cbz	r1, 80058be <__sflush_r+0xae>
 800588e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005892:	4299      	cmp	r1, r3
 8005894:	d002      	beq.n	800589c <__sflush_r+0x8c>
 8005896:	4628      	mov	r0, r5
 8005898:	f7ff fec2 	bl	8005620 <_free_r>
 800589c:	2300      	movs	r3, #0
 800589e:	6363      	str	r3, [r4, #52]	@ 0x34
 80058a0:	e00d      	b.n	80058be <__sflush_r+0xae>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b0      	blx	r6
 80058a8:	4602      	mov	r2, r0
 80058aa:	1c50      	adds	r0, r2, #1
 80058ac:	d1c9      	bne.n	8005842 <__sflush_r+0x32>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0c6      	beq.n	8005842 <__sflush_r+0x32>
 80058b4:	2b1d      	cmp	r3, #29
 80058b6:	d001      	beq.n	80058bc <__sflush_r+0xac>
 80058b8:	2b16      	cmp	r3, #22
 80058ba:	d11e      	bne.n	80058fa <__sflush_r+0xea>
 80058bc:	602f      	str	r7, [r5, #0]
 80058be:	2000      	movs	r0, #0
 80058c0:	e022      	b.n	8005908 <__sflush_r+0xf8>
 80058c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	e01b      	b.n	8005902 <__sflush_r+0xf2>
 80058ca:	690f      	ldr	r7, [r1, #16]
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	d0f6      	beq.n	80058be <__sflush_r+0xae>
 80058d0:	0793      	lsls	r3, r2, #30
 80058d2:	680e      	ldr	r6, [r1, #0]
 80058d4:	bf08      	it	eq
 80058d6:	694b      	ldreq	r3, [r1, #20]
 80058d8:	600f      	str	r7, [r1, #0]
 80058da:	bf18      	it	ne
 80058dc:	2300      	movne	r3, #0
 80058de:	eba6 0807 	sub.w	r8, r6, r7
 80058e2:	608b      	str	r3, [r1, #8]
 80058e4:	f1b8 0f00 	cmp.w	r8, #0
 80058e8:	dde9      	ble.n	80058be <__sflush_r+0xae>
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058ee:	4643      	mov	r3, r8
 80058f0:	463a      	mov	r2, r7
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b0      	blx	r6
 80058f6:	2800      	cmp	r0, #0
 80058f8:	dc08      	bgt.n	800590c <__sflush_r+0xfc>
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	4407      	add	r7, r0
 800590e:	eba8 0800 	sub.w	r8, r8, r0
 8005912:	e7e7      	b.n	80058e4 <__sflush_r+0xd4>
 8005914:	dfbffffe 	.word	0xdfbffffe

08005918 <_fflush_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	690b      	ldr	r3, [r1, #16]
 800591c:	4605      	mov	r5, r0
 800591e:	460c      	mov	r4, r1
 8005920:	b913      	cbnz	r3, 8005928 <_fflush_r+0x10>
 8005922:	2500      	movs	r5, #0
 8005924:	4628      	mov	r0, r5
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	b118      	cbz	r0, 8005932 <_fflush_r+0x1a>
 800592a:	6a03      	ldr	r3, [r0, #32]
 800592c:	b90b      	cbnz	r3, 8005932 <_fflush_r+0x1a>
 800592e:	f7ff fc8f 	bl	8005250 <__sinit>
 8005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f3      	beq.n	8005922 <_fflush_r+0xa>
 800593a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800593c:	07d0      	lsls	r0, r2, #31
 800593e:	d404      	bmi.n	800594a <_fflush_r+0x32>
 8005940:	0599      	lsls	r1, r3, #22
 8005942:	d402      	bmi.n	800594a <_fflush_r+0x32>
 8005944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005946:	f7ff fe68 	bl	800561a <__retarget_lock_acquire_recursive>
 800594a:	4628      	mov	r0, r5
 800594c:	4621      	mov	r1, r4
 800594e:	f7ff ff5f 	bl	8005810 <__sflush_r>
 8005952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005954:	07da      	lsls	r2, r3, #31
 8005956:	4605      	mov	r5, r0
 8005958:	d4e4      	bmi.n	8005924 <_fflush_r+0xc>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	059b      	lsls	r3, r3, #22
 800595e:	d4e1      	bmi.n	8005924 <_fflush_r+0xc>
 8005960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005962:	f7ff fe5b 	bl	800561c <__retarget_lock_release_recursive>
 8005966:	e7dd      	b.n	8005924 <_fflush_r+0xc>

08005968 <__swhatbuf_r>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	460c      	mov	r4, r1
 800596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005970:	2900      	cmp	r1, #0
 8005972:	b096      	sub	sp, #88	@ 0x58
 8005974:	4615      	mov	r5, r2
 8005976:	461e      	mov	r6, r3
 8005978:	da0d      	bge.n	8005996 <__swhatbuf_r+0x2e>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	bf14      	ite	ne
 8005986:	2340      	movne	r3, #64	@ 0x40
 8005988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800598c:	2000      	movs	r0, #0
 800598e:	6031      	str	r1, [r6, #0]
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	b016      	add	sp, #88	@ 0x58
 8005994:	bd70      	pop	{r4, r5, r6, pc}
 8005996:	466a      	mov	r2, sp
 8005998:	f000 f848 	bl	8005a2c <_fstat_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	dbec      	blt.n	800597a <__swhatbuf_r+0x12>
 80059a0:	9901      	ldr	r1, [sp, #4]
 80059a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059aa:	4259      	negs	r1, r3
 80059ac:	4159      	adcs	r1, r3
 80059ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059b2:	e7eb      	b.n	800598c <__swhatbuf_r+0x24>

080059b4 <__smakebuf_r>:
 80059b4:	898b      	ldrh	r3, [r1, #12]
 80059b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b8:	079d      	lsls	r5, r3, #30
 80059ba:	4606      	mov	r6, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	d507      	bpl.n	80059d0 <__smakebuf_r+0x1c>
 80059c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	2301      	movs	r3, #1
 80059ca:	6163      	str	r3, [r4, #20]
 80059cc:	b003      	add	sp, #12
 80059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d0:	ab01      	add	r3, sp, #4
 80059d2:	466a      	mov	r2, sp
 80059d4:	f7ff ffc8 	bl	8005968 <__swhatbuf_r>
 80059d8:	9f00      	ldr	r7, [sp, #0]
 80059da:	4605      	mov	r5, r0
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	f7ff fe8a 	bl	80056f8 <_malloc_r>
 80059e4:	b948      	cbnz	r0, 80059fa <__smakebuf_r+0x46>
 80059e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ea:	059a      	lsls	r2, r3, #22
 80059ec:	d4ee      	bmi.n	80059cc <__smakebuf_r+0x18>
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	e7e2      	b.n	80059c0 <__smakebuf_r+0xc>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	6020      	str	r0, [r4, #0]
 80059fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a0a:	b15b      	cbz	r3, 8005a24 <__smakebuf_r+0x70>
 8005a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 f81d 	bl	8005a50 <_isatty_r>
 8005a16:	b128      	cbz	r0, 8005a24 <__smakebuf_r+0x70>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	431d      	orrs	r5, r3
 8005a28:	81a5      	strh	r5, [r4, #12]
 8005a2a:	e7cf      	b.n	80059cc <__smakebuf_r+0x18>

08005a2c <_fstat_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d07      	ldr	r5, [pc, #28]	@ (8005a4c <_fstat_r+0x20>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f7fb fa6e 	bl	8000f1a <_fstat>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d102      	bne.n	8005a48 <_fstat_r+0x1c>
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	b103      	cbz	r3, 8005a48 <_fstat_r+0x1c>
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000330 	.word	0x20000330

08005a50 <_isatty_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_isatty_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fa6d 	bl	8000f3a <_isatty>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_isatty_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_isatty_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000330 	.word	0x20000330

08005a70 <_sbrk_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	@ (8005a8c <_sbrk_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fb fa76 	bl	8000f6c <_sbrk>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_sbrk_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_sbrk_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000330 	.word	0x20000330

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
